{"version":3,"sources":["components/DateTimePicker/DateTimePicker.js","utils/API.js","pages/SubmitIssue/SubmitIssue.js","pages/Dashboard/Dashboard.js","pages/SigninPage/SigninPage.js","components/Sidebar/Sidebar.js","pages/UserProfile/UserProfile.js","pages/OrganizationProfile/OrganizationProfile.js","pages/ProjectProfile/ProjectProfile.js","components/CommentCard/CommentCard.js","pages/ManageIssue/ManageIssue.js","pages/DeveloperView/DeveloperView.js","App.js","registerServiceWorker.js","index.js"],"names":["DateTimePicker","props","_React$useState","React","useState","selectedDate","_React$useState2","Object","slicedToArray","setSelectedDate","handleDateChange","useEffect","console","log","handleChange","date","react_default","a","createElement","useUtils_cfb96ac9","utils","DateFnsUtils","Grid","container","justify","DatePicker","margin","id","label","format","value","onChange","KeyboardButtonProps","aria-label","showTodayButton","InputLabelProps","shrink","TimePicker","API","getUsers","q","axios","get","params","createUser","userData","post","findOneUser","email","findUserById","deleteUser","concat","delete","getOrgs","createOrganization","orgData","createProject","projData","getProjects","updateProject","put","createVersion","data","updateVersion","verData","getVersions","findOneVersion","createIssue","issueData","getIssues","updateIssue","createComment","getComments","updateComment","SubmitIssue","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleFieldChange","event","fieldId","target","fieldValue","setState","defineProperty","objectSpread","state","handleTimeChange","time","selectedTime","handleOrgSelect","ind","organizationNames","indexOf","selectedId","selectedOrgName","keys","organizationList","orgId","orgName","projId","projName","projDescription","verId","verName","verDescription","getAllProj","handleProjSelect","projectNames","projectList","selectedName","selectedDesc","projectDesc","getAllVers","handleVerSelect","versionNames","versionList","versionDesc","clearState","comment","owner","status","resolved","priority","targetResolutionDate","potentialImpact","imageURL","partImpacted","Date","organizationDesc","disableProjSelect","disableVerSelect","issueSubject","issueDescription","issueType","issueURL","issueComment","handleSubmit","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","isSignedIn","showDashboard","history","push","pathname","stop","getAllOrgs","then","orgs","objects","map","obj","_id","name","names","saveOrg","description","orgDescription","url","orgUrl","member","createProj","organization","res","catch","error","_ref3","_callee2","_context2","result","_x","_x2","apply","arguments","projects","descriptions","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","err","return","includes","createVer","project","_ref4","_callee3","_context3","_x3","_x4","versions","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","getOneVer","ver","reporter","userId","reporterName","type","timing","version","subject","organizationName","projectName","versionName","issueId","issue","commenter","actionDescription","visibility","avatar","photoURL","commenterName","userName","_this2","classes","className","nonAuthenticated","noValidate","autoComplete","grouping","Typography","variant","textField","Fragment","TextField","placeholder","defaultValue","Divider","divider","FormControl","formControl","InputLabel","required","Select","labelId","key","now","org","MenuItem","disabled","style","bind","proj","i","Math","random","fullWidth","multiline","rows","buttonGroup","Button","color","button","endIcon","RotateLeft_default","onClick","Icon","Component","withRouter","withStyles","theme","display","flexWrap","alignItems","padding","spacing","mixins","toolbar","paddingTop","width","justifyContent","marginLeft","marginRight","content","flexGrow","minWidth","selectEmpty","marginTop","marginBottom","withTheme","useStyles","makeStyles","cardsContent","breakpoints","only","paddingLeft","card","wideCard","mouseEntered","mouseLeft","bullet","transform","cardTitle","fontSize","pos","Dashboard","dates","times","commentObjects","timeInMs","parse","timestamps","created_at","prettyDate","toLocaleDateString","prettyTime","toLocaleTimeString","Card","CardContent","component","orgCount","projCount","issueCount","require","config","firebase","initializeApp","apiKey","authDomain","SigninPage","checkNewUser","authEmail","message","uiConfig","signInFlow","signInOptions","auth","GoogleAuthProvider","PROVIDER_ID","FacebookAuthProvider","GithubAuthProvider","EmailAuthProvider","callbacks","signInSuccessWithAuthResult","componentDidMount","onAuthStateChanged","user","componentDidUpdate","setPersistence","Auth","Persistence","SESSION","code","CssBaseline","Container","maxWidth","backgroundColor","height","react_router","to","referrer","wasAuthenticated","StyledFirebaseAuth_default","firebaseAuth","root","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","enteringScreen","appBarHeading","menuButton","hide","flexShrink","drawerOpen","drawerClose","overflowX","up","_clsx3","_clsx4","useTheme","open","setOpen","AppBar","position","clsx","Toolbar","IconButton","edge","Menu_default","noWrap","activeView","disableGutters","title","flex","Tooltip","signOut","rel","Lock_default","href","GitHub_default","Drawer","paper","direction","ChevronRight_default","ChevronLeft_default","List","ListItem","ListItemIcon","Dashboard_default","ListItemText","primary","showSubmitIssue","Create_default","userType","showManageIssue","FindInPage_default","showUserProfile","AccountCircle_default","showOrganizationProfile","Business_default","showProjectProfile","AccountTree_default","children","UserProfile","image","getUser","saveUser","displayName","firstName","split","lastName","length","wrapper","OrganizationProfile","getOneOrg","ProjectProfile","handleFormSubmit","_ref5","_callee4","_context4","avatarRoot","& > *","avatarBlock","bigAvatar","fontWeight","CommentCard","CardActionArea","Avatar","alt","src","gutterBottom","createdAt","actionDesc","ManageIssue","comments","getAllIssues","handleIssueSelect","issueNames","desc","URL","ImageURL","Comment","Reporter","targetRes","impact","issueList","issueReporters","issueOwners","issueResolved","issuePriorities","issueTargetRes","issueTypes","issueStatus","issueDesc","issueDates","issueURLs","issueImageURLs","issueCommentIds","issueImpacts","issueReporterNames","getAllComments","issueObjectList","disableIssueSelect","issuePreState","issueAspects","updatedAt","commentOrgIds","commentProjIds","commentVerIds","commentIssueIds","commentCommenterIds","commentActionsDescriptions","commentTexts","commentVisibilities","commentPhotoURLs","commentTimestamps","commentFullObjects","commentAuthors","_ref2","issues","reporters","owners","reporterNames","fullObjects","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","findCommenter","_x5","findCommenterNames","_callee6","_context6","orgIds","projIds","verIds","issueIds","commenterIds","actions","visibilities","photoURLs","commenterNames","_callee5","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","_context5","t0","finish","reverse","commentprojIds","commentverIds","commentfullObjects","_callee7","_context7","updated_at","_ref9","_callee8","_context8","_x6","_x7","issueStatusChoices","issuePriorityChoices","commentVisibilityChoices","commentOrgNames","commentProjNames","commentVerNames","commentIssueSubjects","Paper","topContainer","containerOne","iss","orientation","containerTwo","commentObj","index","paddingRight","maxHeight","window","screen","availHeight","overflow","minHeight","styles","DeveloperView","changeName","alert","getUserOrgs","authenticate","handldIssueChange","handleSubmitIssue","val","determineView","text","handleUserSave","emailVerified","idToken","getIdToken","userOrgList","userOrgNames","affiliatedOrgIds","affiliatedOrgNames","affiliatedProjIds","affiliatedProjNames","relatedIssueIds","relatedIssueNames","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","relatedCommentObjects","toggleTheme","assertThisInitialized","view","newView","Dashboard_Dashboard","orgNames","projNames","issueSubjects","pages_SubmitIssue_SubmitIssue","pages_UserProfile_UserProfile","pages_OrganizationProfile_OrganizationProfile","pages_ProjectProfile_ProjectProfile","pages_ManageIssue_ManageIssue","Sidebar_Sidebar","_title","main","flexDirection","hero","palette","background","dark","textIndent","typography","fontWeightBold","letterSpacing","h5","textAlign","logo","steps","step","stepIcon","markdownElement","App","ProtectedRoute","_ref","rest","objectWithoutProperties","assign","render","AuthenticateButton","useHistory","authentication","isAuthenticated","signout","LandingPage","localStorage","find","e","match","JSON","getItem","isAuthorised","ex","BugReportTwoTone_default","align","CardActions","size","focus","handler","react_router_dom","exact","path","pages_DeveloperView_DeveloperView","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","src_App_0","document","getElementById","process","origin","addEventListener","fetch","response","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"+cAae,SAASA,EAAeC,GAAO,IAAAC,EACFC,IAAMC,SAASH,EAAMI,cADnBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,GACnCG,EADmCC,EAAA,GACrBG,EADqBH,EAAA,GAElCI,EAAqBT,EAArBS,iBAERC,oBAAU,WACNC,QAAQC,IAAI,yBAA0BZ,GACtCS,EAAiBL,IAClB,CAACA,EAAcK,IAElB,IAAMI,EAAe,SAAAC,GACjBN,EAAgBM,IAGpB,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAyBC,MAAOC,KAC5BL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,gBACpBR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACIC,OAAO,SACPC,GAAG,qBACHC,MAAM,oBACNC,OAAO,aACPC,MAAOzB,EACP0B,SACIjB,EAEJkB,oBAAqB,CACjBC,aAAc,eAElBC,iBAAe,EACfC,gBAAiB,CACbC,QAAQ,KAGhBpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CACIX,OAAO,SACPC,GAAG,cACHC,MAAM,oBACNE,MAAOzB,EACP0B,SACIjB,EAEJkB,oBAAqB,CACjBC,aAAc,eAGlBE,gBAAiB,CACbC,QAAQ,4BCzDjBE,EAAA,CAEbC,SAAU,SAAUC,GAElB,OADA5B,QAAQC,IAAR,iCAA8C2B,GACvCC,IAAMC,IAAI,aAAc,CAAEC,OAAQ,CAAEH,QAI7CI,WAAY,SAAUC,GAEpB,OAAOJ,IAAMK,KAAK,aAAcD,IAWlCE,YAAa,SAAUC,GAErB,OADApC,QAAQC,IAAR,wBAAqCmC,GAC9BP,IAAMC,IAAI,aAAc,CAAEC,OAAQ,CAAEK,YAM7CC,aAAc,SAAUtB,GAEtB,OADAf,QAAQC,IAAR,8BAA2Cc,GACpCc,IAAMC,IAAI,cAAgBf,IAmBnCuB,WAAY,SAAUvB,GAEpB,OADAf,QAAQC,IAAR,2CAAAsC,OAAuDxB,IAChDc,IAAMW,OAAO,cAAgBzB,IAKtC0B,QAAS,SAAUb,GAEjB,OADA5B,QAAQC,IAAR,oBAAiC2B,GAC1BC,IAAMC,IAAI,YAAa,CAAEC,OAAQ,CAAEH,QAI5Cc,mBAAoB,SAAUC,GAE5B,OADA3C,QAAQC,IAAI,kBACL4B,IAAMK,KAAK,YAAaS,IAOjCC,cAAe,SAAUC,GAEvB,OADA7C,QAAQC,IAAI,qBAAsB4C,GAC3BhB,IAAMK,KAAK,gBAAiBW,IAIrCC,YAAa,SAAUlB,GAErB,OADA5B,QAAQC,IAAI,qBAAsB2B,GAC3BC,IAAMC,IAAI,gBAAiB,CAAEC,OAAQ,CAAEH,QAGhDmB,cAAe,SAAUhC,EAAI8B,GAE3B,OADA7C,QAAQC,IAAR,+BAA4Cc,GACrCc,IAAMmB,IAAI,iBAAmBjC,EAAI8B,IAK1CI,cAAe,SAAUC,GAEvB,OADAlD,QAAQC,IAAI,qBAAsBiD,GAC3BrB,IAAMK,KAAK,gBAAiBgB,IAGrCC,cAAe,SAAUpC,EAAIqC,GAE3B,OADApD,QAAQC,IAAR,+BAA4Cc,GACrCc,IAAMmB,IAAI,iBAAmBjC,EAAIqC,IAG1CC,YAAa,SAAUzB,GAErB,OADA5B,QAAQC,IAAR,wBAAqC2B,GAC9BC,IAAMC,IAAI,gBAAiB,CAAEC,OAAQ,CAAEH,QAGhD0B,eAAgB,SAAUvC,GAExB,OADAf,QAAQC,IAAR,6BAA0Cc,GACnCc,IAAMC,IAAI,gBAAiB,CAAEC,OAAQ,CAAEhB,SAKhDwC,YAAa,SAAUC,GAErB,OADAxD,QAAQC,IAAR,yBAAsCuD,GAC/B3B,IAAMK,KAAK,cAAesB,IAGnCC,UAAW,SAAU7B,GAEnB,OADA5B,QAAQC,IAAR,sBAAAsC,OAAkCX,IAC3BC,IAAMC,IAAI,cAAe,CAAEC,OAAQ,CAAEH,QAG9C8B,YAAa,SAAU3C,EAAImC,GAEzB,OADAlD,QAAQC,IAAR,6BAA0Cc,GACnCc,IAAMmB,IAAI,eAAiBjC,EAAImC,IAKxCS,cAAe,SAAUT,GAEvB,OADAlD,QAAQC,IAAR,2BAAwCiD,GACjCrB,IAAMK,KAAK,gBAAiBgB,IAGrCU,YAAa,SAAUhC,GAErB,OADA5B,QAAQC,IAAR,wBAAAsC,OAAoCX,IAC7BC,IAAMC,IAAI,gBAAiB,CAAEC,OAAQ,CAAEH,QAGhDiC,cAAe,SAAU9C,EAAImC,GAE3B,OADAlD,QAAQC,IAAR,+BAA4Cc,GACrCc,IAAMmB,IAAI,iBAAmBjC,EAAImC,KC1BtCY,cAGF,SAAAA,EAAYzE,GAAO,IAAA0E,EAAA,OAAApE,OAAAqE,EAAA,EAAArE,CAAAsE,KAAAH,IACfC,EAAApE,OAAAuE,EAAA,EAAAvE,CAAAsE,KAAAtE,OAAAwE,EAAA,EAAAxE,CAAAmE,GAAAM,KAAAH,KAAM5E,KA6DVgF,kBAAoB,SAAAC,GAEhB,IAAMC,EAAUD,EAAME,OAAOzD,GACvB0D,EAAaH,EAAME,OAAOtD,MAKhC6C,EAAKW,SAAL/E,OAAAgF,EAAA,EAAAhF,CAAA,GACO4E,EAAUE,KAvEFV,EA2EnBjE,iBAAmB,SAAAK,GACfH,QAAQC,IAAI,iBAAkBE,GAC9B4D,EAAKW,SAAL/E,OAAAiF,EAAA,EAAAjF,CAAA,GACOoE,EAAKc,MADZ,CAEIpF,aAAcU,MA/EH4D,EAmFnBe,iBAAmB,SAAAC,GACf/E,QAAQC,IAAI,iBAAkB8E,GAC9BhB,EAAKW,SAAL/E,OAAAiF,EAAA,EAAAjF,CAAA,GACOoE,EAAKc,MADZ,CAEIG,aAAcD,MAvFHhB,EA2FnBkB,gBAAkB,SAAAX,GACdtE,QAAQC,IAAI,wBAAyBqE,EAAME,QAE3C,IAAIU,EAAMnB,EAAKc,MAAMM,kBAAkBC,QAAQd,EAAME,OAAOtD,OAMxDmE,EAAa,GAAIC,EAAkB,GAE1BD,EAAL,KAARH,EAA0BvF,OAAO4F,KAAKxB,EAAKc,MAAMW,iBAAiBN,IAAM,GAAkB,GAC7EI,EAAL,KAARJ,EAA+BnB,EAAKc,MAAMM,kBAAkBD,GAAyB,GACrFlF,QAAQC,IAAI,gBAAiBoF,GAC7BtB,EAAKW,SAAS,CACVe,MAAOJ,EACPK,QAASJ,EAGTK,OAAQ,GACRC,SAAU,GACVC,gBAAiB,GAGjBC,MAAO,GACPC,QAAS,GACTC,eAAgB,IAEd,WAAQjC,EAAKkC,gBAvHJlC,EA2HnBmC,iBAAmB,SAAA5B,GACftE,QAAQC,IAAI,uBAAwBqE,EAAME,QAC1C,IAAIU,EAAMnB,EAAKc,MAAMsB,aAAaf,QAAQd,EAAME,OAAOtD,OACnDmE,EAAa1F,OAAO4F,KAAKxB,EAAKc,MAAMuB,YAAYlB,IAAM,GACtDmB,EAAetC,EAAKc,MAAMsB,aAAajB,GACvCoB,EAAevC,EAAKc,MAAM0B,YAAYrB,GAC1ClF,QAAQC,IAAI,iBAAkBoF,GAC9BtB,EAAKW,SAAS,CACViB,OAAQN,EACRO,SAAUS,EACVR,gBAAiBS,EAGjBR,MAAO,GACPC,QAAS,GACTC,eAAgB,IAEd,kBAAMjC,EAAKyC,gBA5IFzC,EA+InB0C,gBAAkB,SAAAnC,GACdtE,QAAQC,IAAI,sBAAuBqE,EAAME,QACzC,IAAIU,EAAMnB,EAAKc,MAAM6B,aAAatB,QAAQd,EAAME,OAAOtD,OACnDmE,EAAa,GACbgB,EAAe,GACfC,EAAe,GAENjB,GAAJ,IAATH,EAA0BvF,OAAO4F,KAAKxB,EAAKc,MAAM8B,YAAYzB,IAAM,GAAkB,GACxEmB,GAAJ,IAATnB,EAA4BnB,EAAKc,MAAM6B,aAAaxB,GAAsB,GAC7DoB,GAAJ,IAATpB,EAA4BnB,EAAKc,MAAM+B,YAAY1B,GAAsB,IAChE,IAATA,EAAalF,QAAQC,IAAI,iBAAkBoF,GAAcrF,QAAQC,IAAI,4BAErE8D,EAAKW,SAAS,CACVoB,MAAOT,EACPU,QAASM,EACTL,eAAgBM,KA9JLvC,EAkKnB8C,WAAa,WACT9C,EAAKW,SAAL/E,OAAAiF,EAAA,EAAAjF,CAAA,GACOoE,EAAKc,MADZ,CAKIY,MAAO,GACPE,OAAQ,GACRG,MAAO,GAGPgB,QAAS,GAETC,MAAO,GACPC,OAAQ,GACRC,SAAU,GACVC,SAAU,GACVC,qBAAsB,GACtBC,gBAAiB,GACjBC,SAAU,GACVC,aAAc,GACd7H,aAAc,IAAI8H,KAGlB/B,iBAAkB,GAClBL,kBAAmB,GACnBqC,iBAAkB,GAElBpB,YAAa,GACbD,aAAc,GACdI,YAAa,GAEbI,YAAa,GACbD,aAAc,GACdE,YAAa,GAEba,mBAAmB,EACnBC,iBAAkB,OAGlBC,aAAc,GACdC,iBAAkB,GAClBC,UAAW,YACXC,SAAU,GACVC,aAAc,OA9MHhE,EAoNnBiE,aApNmBrI,OAAAsI,EAAA,EAAAtI,CAAAuI,EAAA7H,EAAA8H,KAoNJ,SAAAC,IAAA,OAAAF,EAAA7H,EAAAgI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACLzE,EAAKR,YADA,cAAA+E,EAAAE,KAAA,EAELzE,EAAKJ,cAFA,OAGXI,EAAK1E,MAAMoJ,WACL1E,EAAK1E,MAAMqJ,gBACX3E,EAAK1E,MAAMsJ,QAAQC,KAAK,CACtBC,SAAU,IACVhE,MAAO,CAAE4D,YAAY,KAPlB,wBAAAH,EAAAQ,SAAAV,MApNIrE,EAmOnBgF,WAAa,WACTrH,EAAIe,UACCuG,KAAK,SAAAC,GACFjJ,QAAQC,IAAI,yBAA0BgJ,EAAK/F,MAC3C,IAAIgG,EAAUD,EAAK/F,KAAKiG,IAAI,SAAAC,GACxB,OAAOzJ,OAAAgF,EAAA,EAAAhF,CAAA,GAAGyJ,EAAIC,IAAMD,EAAIE,QAExBC,EAAQN,EAAK/F,KAAKiG,IAAI,SAAAC,GACtB,OAAOA,EAAIE,OAEfvF,EAAKW,SAAS,CACVc,iBAAkB0D,EAClB/D,kBAAmBoE,MAG1BP,KAAK,kBAAMhJ,QAAQC,IAAI,sCAAuC8D,EAAKc,UAlPzDd,EAsPnByF,QAAU,WACN9H,EAAIgB,mBAAmB,CACnB4G,KAAMvF,EAAKc,MAAMa,QACjB+D,YAAa1F,EAAKc,MAAM6E,eACxBC,IAAK5F,EAAKc,MAAM+E,OAChBC,OAAQ,CAAC9F,EAAK1E,MAAM0B,MACrBiI,KAAK,kBAAMhJ,QAAQC,IAAI,iBA5PX8D,EAmQnB+F,WAAa,WACT9J,QAAQC,IAAI,wBACZyB,EAAIkB,cAAc,CACd0G,KAAMvF,EAAKc,MAAMe,SACjB6D,YAAa1F,EAAKc,MAAMgB,gBACxBkE,aAAc,CAAChG,EAAKc,MAAMY,SAEzBuD,KAAK,SAACgB,GAAD,OAAShK,QAAQC,IAAI,iBAAkB+J,KAC5CC,MAAM,SAAAC,GAAK,OAAIlK,QAAQC,IAAIiK,KAC3BlB,KAAK,kBAAMjF,EAAKkC,gBA5QNlC,EA+QnBhB,cA/QmB,eAAAoH,EAAAxK,OAAAsI,EAAA,EAAAtI,CAAAuI,EAAA7H,EAAA8H,KA+QH,SAAAiC,EAAOrJ,EAAImC,GAAX,OAAAgF,EAAA7H,EAAAgI,KAAA,SAAAgC,GAAA,cAAAA,EAAA9B,KAAA8B,EAAA7B,MAAA,cACZxI,QAAQC,IAAR,kBAAAsC,OAA8BxB,EAA9B,mBAAmDmC,GADvCmH,EAAA7B,KAAA,EAEN9G,EAAIqB,cAAchC,EAAImC,GACvB8F,KAAK,SAAAsB,GAEF,OADAtK,QAAQC,IAAI,gCAAiCqK,EAAOpH,MAC7CoH,IAEVL,MAAM,SAAAC,GAAK,OAAIlK,QAAQC,IAAI,kBAAmBiK,KAPvC,wBAAAG,EAAAvB,SAAAsB,MA/QG,gBAAAG,EAAAC,GAAA,OAAAL,EAAAM,MAAAxG,KAAAyG,YAAA,GAAA3G,EA0RnBkC,WAAa,WACTvE,EAAIoB,YACA,IAECkG,KAAK,SAAA2B,GACF3K,QAAQC,IAAI,eAAgB0K,GAE5B,IAAIzB,EAAU,GACVK,EAAQ,GACRqB,EAAe,GALLC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAOd,QAAAC,EAAAC,EAAgBP,EAASzH,KAAzBiI,OAAAC,cAAAP,GAAAI,EAAAC,EAAA1C,QAAA6C,MAAAR,GAAA,EAA+B,KAAtBzB,EAAsB6B,EAAA/J,MACvBkI,EAAIW,eAAiBhG,EAAKc,MAAMY,QAChCyD,EAAQN,KAARjJ,OAAAgF,EAAA,EAAAhF,CAAA,GAAgByJ,EAAIC,IAAMD,EAAIE,OAC9BC,EAAMX,KAAKQ,EAAIE,MACfsB,EAAahC,KAAKQ,EAAIK,eAXhB,MAAA6B,GAAAR,GAAA,EAAAC,EAAAO,EAAA,YAAAT,GAAA,MAAAK,EAAAK,QAAAL,EAAAK,SAAA,WAAAT,EAAA,MAAAC,GAgBd7B,EAAQsC,cAASR,GACbjH,EAAKW,SAAS,CACV0B,YAAa,GACbD,aAAc,GACdI,YAAa,GACbkB,mBAAmB,GAEnBzH,QAAQC,IAAI,wBAAyBiJ,EAASK,EAAOqB,IAKzD7G,EAAKW,SAAS,CACV0B,YAAa8C,EACb/C,aAAcoD,EACdhD,YAAaqE,EACbnD,mBAAmB,GAEjBzH,QAAQC,IAAI,4CAA6CiJ,EAASK,EAAOqB,MAKtF5B,KAAK,kBAAMhJ,QAAQC,IAAI,qCAAsC8D,EAAKc,SAClEmE,KAAKjF,EAAKyC,cACVyD,MAAM,SAAAqB,GAAG,OAAItL,QAAQC,IAAIqL,MAvUfvH,EA8UnB0H,UAAY,WACR/J,EAAIuB,cAAc,CACdqG,KAAMvF,EAAKc,MAAMkB,QACjB0D,YAAa1F,EAAKc,MAAMmB,eACxB0F,QAAS,CAAC3H,EAAKc,MAAMc,UAEpBqD,KAAK,SAAAgB,GAAG,OAAIhK,QAAQC,IAAI,iBAAkB+J,KAC1CC,MAAM,SAAAC,GAAK,OAAIlK,QAAQC,IAAIiK,MArVjBnG,EAwVnBZ,cAxVmB,eAAAwI,EAAAhM,OAAAsI,EAAA,EAAAtI,CAAAuI,EAAA7H,EAAA8H,KAwVH,SAAAyD,EAAO7K,EAAImC,GAAX,OAAAgF,EAAA7H,EAAAgI,KAAA,SAAAwD,GAAA,cAAAA,EAAAtD,KAAAsD,EAAArD,MAAA,cACZxI,QAAQC,IAAR,qBAAAsC,OAAiCxB,EAAjC,mBAAsDmC,GAD1C2I,EAAArD,KAAA,EAEN9G,EAAIyB,cAAcpC,EAAImC,GACvB8F,KAAK,SAAAsB,GAEF,OADAtK,QAAQC,IAAI,gCAAiCqK,EAAOpH,MAC7CoH,IAEVL,MAAM,SAAAC,GAAK,OAAIlK,QAAQC,IAAIiK,KAPpB,wBAAA2B,EAAA/C,SAAA8C,MAxVG,gBAAAE,EAAAC,GAAA,OAAAJ,EAAAlB,MAAAxG,KAAAyG,YAAA,GAAA3G,EAkWnByC,WAAa,WACT9E,EAAI2B,YAAY,IAGX2F,KAAK,SAAAgD,GACFhM,QAAQC,IAAI,eAAgB+L,GAC5B,IAAI9C,EAAU,GACVK,EAAQ,GACRqB,EAAe,GAJLqB,GAAA,EAAAC,GAAA,EAAAC,OAAAnB,EAAA,IAMd,QAAAoB,EAAAC,EAAgBL,EAAS9I,KAAzBiI,OAAAC,cAAAa,GAAAG,EAAAC,EAAA7D,QAAA6C,MAAAY,GAAA,EAA+B,KAAtB7C,EAAsBgD,EAAAlL,MACvBkI,EAAIsC,UAAY3H,EAAKc,MAAMc,SAC3BuD,EAAQN,KAARjJ,OAAAgF,EAAA,EAAAhF,CAAA,GAAgByJ,EAAIC,IAAMD,EAAIE,OAC9BC,EAAMX,KAAKQ,EAAIE,MACfsB,EAAahC,KAAKQ,EAAIK,eAVhB,MAAA6B,GAAAY,GAAA,EAAAC,EAAAb,EAAA,YAAAW,GAAA,MAAAI,EAAAd,QAAAc,EAAAd,SAAA,WAAAW,EAAA,MAAAC,GAgBdjD,EAAQsC,cAASR,GACbjH,EAAKW,SAAS,CACViC,YAAa,GACbD,aAAc,GACdE,YAAa,GACbc,kBAAkB,GAElB1H,QAAQC,IAAI,wBAAyBiJ,EAASK,EAAOqB,IAGzD7G,EAAKW,SAAS,CACViC,YAAauC,EACbxC,aAAc6C,EACd3C,YAAagE,EACblD,kBAAkB,GACnB1H,QAAQC,IAAI,4CAA6CiJ,EAASK,EAAOqB,OArYzE7G,EA0YnBuI,UAAY,WACR5K,EAAI4B,eAAeS,EAAKc,MAAMiB,OACzBkD,KAAK,SAAAuD,GAAG,OAAIvM,QAAQC,IAAI,cAAesM,MA5Y7BxI,EAkZnBR,YAAc,WAIV7B,EAAI6B,YAAY,CAEZiJ,SAAUzI,EAAK1E,MAAMoN,OACrBC,aAAc3I,EAAK1E,MAAMiK,KAEzBqD,KAAM5I,EAAKc,MAAMgD,UACjB+E,OAAQ7I,EAAKc,MAAMpF,aAEnBsK,aAAchG,EAAKc,MAAMY,MACzBiG,QAAS3H,EAAKc,MAAMc,OACpBkH,QAAS9I,EAAKc,MAAMiB,MAEpBgH,QAAS/I,EAAKc,MAAM8C,aACpB8B,YAAa1F,EAAKc,MAAM+C,iBACxB+B,IAAK5F,EAAKc,MAAMiD,SAChBT,SAAUtD,EAAKc,MAAMwC,SACrBL,OAAQjD,EAAKc,MAAMmC,OACnBC,SAAUlD,EAAKc,MAAMoC,SAErBF,MAAOhD,EAAKc,MAAMkC,MAClBG,SAAUnD,EAAKc,MAAMqC,SACrBC,qBAAsBpD,EAAKc,MAAMsC,qBACjCC,gBAAiBrD,EAAKc,MAAMuC,gBAC5BE,aAAcvD,EAAKc,MAAMyC,aAEzByF,iBAAkBhJ,EAAKc,MAAMa,QAC7BsH,YAAajJ,EAAKc,MAAMe,SACxBqH,YAAalJ,EAAKc,MAAMkB,QACxB4B,aAAc5D,EAAKc,MAAM8C,eAE1BqB,KAAK,SAACgB,GACLjG,EAAKW,SAAL/E,OAAAiF,EAAA,EAAAjF,CAAA,GACOoE,EAAKc,MADZ,CAEIqI,QAASlD,EAAI9G,KAAKmG,OAEtBrJ,QAAQC,IAAI,uBAAwB+J,KAInChB,KAAK,kBAAMjF,EAAKJ,mBA7bNI,EAgcnBJ,cAAgB,WACZjC,EAAIiC,cAAc,CACdoG,aAAchG,EAAKc,MAAMY,MACzBiG,QAAS3H,EAAKc,MAAMc,OACpBkH,QAAS9I,EAAKc,MAAMiB,MACpBqH,MAAOpJ,EAAKc,MAAMqI,QAClBE,UAAWrJ,EAAK1E,MAAMoN,OAEtBY,kBAAmB,CAAC,kBACpBvG,QAAS/C,EAAKc,MAAMkD,aACpBuF,WAAY,oCACZC,OAAQxJ,EAAK1E,MAAMmO,SACnBC,cAAe1J,EAAK1E,MAAMiK,OAKzBN,KAAK,SAACgB,GACHhK,QAAQC,IAAI,yBAA0B+J,KAEzChB,KACGjF,EAAK1E,MAAMqJ,gBAldnB3E,EAAKc,MAAQ,CACT4H,OAAQ1I,EAAK1E,MAAMoN,OACnBiB,SAAU3J,EAAK1E,MAAMiK,KACrB7J,aAAc,IAAI8H,KAYlB5B,OAAQ,GACRC,SAAU,GAIVE,MAAO,GACPC,QAAS,GAKTP,iBAAkB,GAClBL,kBAAmB,GACnBqC,iBAAkB,GAElBpB,YAAa,GACbD,aAAc,GACdI,YAAa,GAEbI,YAAa,GACbD,aAAc,GACdE,YAAa,GAEba,mBAAmB,EACnBC,iBAAkB,OAGlBC,aAAc,GACdC,iBAAkB,GAClBC,UAAW,YACXC,SAAU,GACVC,aAAc,GAEdmF,QAAS,IAnDEnJ,mFA6df/D,QAAQC,IAAI,wBAAyBgE,KAAKY,OAC1CZ,KAAK8E,0DAIL/I,QAAQC,IAAI,yBAA0BgE,KAAKY,wCAGtC,IAAA8I,EAAA1J,KACG2J,EAAY3J,KAAK5E,MAAjBuO,QACR,OACIxN,EAAAC,EAAAC,cAAA,QAAMuN,UAAW5J,KAAK5E,MAAMoJ,WAAamF,EAAQjN,UAAYiN,EAAQE,iBAGjEC,YAAU,EAACC,aAAa,OAExB5N,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQK,UACpB7N,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAYC,QAAQ,QAAQN,UAAWD,EAAQQ,WAA/C,yCAGJhO,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQK,WAClBhK,KAAK5E,MAAMoJ,YACTrI,EAAAC,EAAAC,cAACF,EAAAC,EAAMgO,SAAP,KACIjO,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,OAEHC,MAAM,YACNuN,YAAY,WACZV,UAAWD,EAAQQ,UACnBI,aAAcvK,KAAK5E,MAAMiK,KACzBxI,OAAO,SACPqN,QAAQ,aAEZ/N,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,QAEHC,MAAM,aACNwN,aAAcvK,KAAK5E,MAAM+C,MACzByL,UAAWD,EAAQQ,UACnBtN,OAAO,SACPqN,QAAQ,eAMxB/N,EAAAC,EAAAC,cAACmO,EAAA,EAAD,CAASZ,UAAWD,EAAQc,UAE5BtO,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQK,UACpB7N,EAAAC,EAAAC,cAACqO,EAAA,EAAD,CAAaR,QAAQ,WAAWN,UAAWD,EAAQgB,aAC/CxO,EAAAC,EAAAC,cAACuO,EAAA,EAAD,CAEI9N,GAAG,wCACH+N,UAAQ,GAHZ,YAMA1O,EAAAC,EAAAC,cAACyO,EAAA,EAAD,CACIC,QAAQ,wCAERjO,GAAI,8BACJkO,IAAK1H,KAAK2H,IACVX,YAAY,gBACZrN,MAAO+C,KAAKY,MAAMY,MAKlBtE,SAAU8C,KAAKgB,iBAKXhB,KAAKY,MAAMM,kBACPlB,KAAKY,MAAMM,kBAAkBgE,IAAI,SAACgG,EAAKjK,GAInC,OAAO9E,EAAAC,EAAAC,cAAE8O,EAAA,EAAF,CACHrO,GAAIpB,OAAO4F,KAAKoI,EAAK9I,MAAMW,iBAAiBN,IAAM,GAElD+J,IAAKE,EACL7F,KAAM6F,EACNjO,MAAOiO,GAENA,KAGP,kBAAMnP,QAAQC,IAAI,+BAAgC0N,EAAK9I,UAKzEzE,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,QAEHsO,UAAQ,EAERxB,UAAWD,EAAQQ,UACnBpN,MAAM,cACNE,MAAO+C,KAAKY,MAAMY,MAClB6J,MAAO,CAAExO,OAAQ,GACjBA,OAAO,SACPS,gBAAiB,CACbC,QAAQ,GAEZ2M,QAAQ,SACRhN,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,SAK9C7D,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQK,UAEpB7N,EAAAC,EAAAC,cAACqO,EAAA,EAAD,CAAaR,QAAQ,WACjBN,UAAWD,EAAQgB,aAGnBxO,EAAAC,EAAAC,cAACuO,EAAA,EAAD,CAEI9N,GAAG,yCACH+N,UAAQ,GAHZ,mBAOA1O,EAAAC,EAAAC,cAACyO,EAAA,EAAD,CACIC,QAAQ,yCAERjO,GAAI,sCACJwN,YAAY,eAEZpN,SAII8C,KAAKiC,kBAKLjC,KAAKY,MAAMsB,aACPlC,KAAKY,MAAMsB,aAAagD,IAAI,SAACqG,EAAMC,GAG/B,OAAOrP,EAAAC,EAAAC,cAAC8O,EAAA,EAAD,CACHrO,GAAIyO,EACJP,IAAK1H,KAAK2H,IAAsB,IAAhBQ,KAAKC,SACrBrG,KAAMkG,EACNtO,MAAOsO,EACPH,WACI1B,EAAK9I,MAAM4C,mBAId+H,EACAxP,QAAQC,IAAI,uBAAwB0N,EAAK9I,MAAMuB,YAAYqJ,OAE/DrP,EAAAC,EAAAC,cAAA,aAMrBF,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,SAEHsO,UAAQ,EAERrO,MAAM,aACN6M,UAAWD,EAAQQ,UACnBlN,MAAO+C,KAAKY,MAAMc,OAClB2J,MAAO,CAAExO,OAAQ,GACjBA,OAAO,SACPS,gBAAiB,CACbC,QAAQ,GAEZ2M,QAAQ,SACRhN,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,SAK9C7D,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQK,UACpB7N,EAAAC,EAAAC,cAACqO,EAAA,EAAD,CAAaR,QAAQ,WAAWN,UAAWD,EAAQgB,aAC/CxO,EAAAC,EAAAC,cAACuO,EAAA,EAAD,CAAY9N,GAAG,wCAAwC+N,UAAQ,GAA/D,yBAGA1O,EAAAC,EAAAC,cAACyO,EAAA,EAAD,CACIC,QAAQ,wCAERjO,GAAI,kCAEJwN,YAAY,0BAEZpN,SAII8C,KAAKwC,iBAKLxC,KAAKY,MAAM6B,aACPzC,KAAKY,MAAM6B,aAAayC,IAAI,SAACoD,EAAKkD,GAG9B,OAAOrP,EAAAC,EAAAC,cAAC8O,EAAA,EAAD,CACHrO,GAAIwL,EACJ0C,IAAKS,KAAKC,SACVrG,KAAMiD,EACNrL,MAAOqL,EACP8C,WACI1B,EAAK9I,MAAM6C,kBAGd6E,EACAvM,QAAQC,IAAI,sBAAuB0N,EAAK9I,MAAM8B,YAAY8I,OAE9DrP,EAAAC,EAAAC,cAAA,YAIhBN,QAAQC,IAAI,0CAA2CgE,KAAKY,MAAM4C,oBAEvErH,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,QAEHsO,UAAQ,EACRxB,UAAWD,EAAQQ,UACnBpN,MAAM,aACNE,MAAO+C,KAAKY,MAAMiB,MAClBwJ,MAAO,CAAExO,OAAQ,GACjBA,OAAO,SACPS,gBAAiB,CAAEC,QAAQ,GAC3BL,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,MACtCkK,QAAQ,YAGhB/N,EAAAC,EAAAC,cAACmO,EAAA,EAAD,CAASZ,UAAWD,EAAQc,UAE5BtO,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQK,UAkBpB7N,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,eACH6O,WAAS,EACT5O,MAAM,UAENE,MAAO+C,KAAKY,MAAM8C,aAElB7G,OAAO,SACPqN,QAAQ,WACRhN,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,MACtCqL,MAAO,CAAExO,OAAQ,KAErBV,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,mBACH+N,UAAQ,EACRe,WAAS,EACTD,WAAS,EACTE,KAAK,IACLb,IAAI,4BACJjO,MAAM,oBACNE,MAAO+C,KAAKY,MAAM+C,iBAClB0H,MAAO,CAAExO,OAAQ,GAGjBA,OAAO,SACPK,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,MACtC1C,gBAAiB,CACbC,QAAQ,GAEZ2M,QAAQ,aAEZ/N,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,YACHsO,UAAQ,EACRrO,MAAM,aACNwN,aAAcvK,KAAKY,MAAMgD,UACzBgG,UAAWD,EAAQQ,UACnBtN,OAAO,SACPqN,QAAQ,WACRhN,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,QAE1C7D,EAAAC,EAAAC,cAAClB,EAAD,CACIK,aAAcwE,KAAKY,MAAMpF,aACzBK,iBAAkBmE,KAAKnE,mBAE3BM,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,WACH6O,WAAS,EACT5O,MAAM,MAENE,MAAO+C,KAAKY,MAAMiD,SAElBhH,OAAO,SACPqN,QAAQ,WACRhN,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,MACtCqL,MAAO,CAAExO,OAAQ,KAErBV,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,eACH6O,WAAS,EACTC,WAAS,EACT7O,MAAM,UACNuN,YAAY,gBACZrN,MAAO+C,KAAKY,MAAMkD,aAElBjH,OAAO,SACPqN,QAAQ,WACRhN,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,MACtCqL,MAAO,CAAExO,OAAQ,KAGrBV,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQmC,aACpB3P,EAAAC,EAAAC,cAAC0P,EAAA,EAAD,CACI7B,QAAQ,YACR8B,MAAM,YACNpC,UAAWD,EAAQsC,OACnBC,QAAS/P,EAAAC,EAAAC,cAAC8P,EAAA/P,EAAD,mBACTgQ,QACI,WACIrQ,QAAQC,IAAI,+BAAgC0N,EAAK9I,OACjD8I,EAAK9G,eARjB,eAaAzG,EAAAC,EAAAC,cAAC0P,EAAA,EAAD,CACI7B,QAAQ,YACR8B,MAAM,UACNpC,UAAWD,EAAQsC,OACnBC,QAAS/P,EAAAC,EAAAC,cAACgQ,EAAA,EAAD,aACTD,QAEIpM,KAAK+D,cAPb,qBAvzBEuI,aAi1BXC,cAAWC,YA55BX,SAAAC,GAAK,MAAK,CAIrB/P,UAAUhB,OAAAiF,EAAA,EAAAjF,CAAA,CACNgR,QAAS,OACTC,SAAU,OACVC,WAAY,SACZC,QAASJ,EAAMK,QAAQ,EAAG,KACvBL,EAAMM,OAAOC,QALX,CAMLC,WAAY,OACZC,MAAO,SAEXrD,iBAAiBnO,OAAAiF,EAAA,EAAAjF,CAAA,CACbgR,QAAS,OACTC,SAAU,OACVC,WAAY,SACZO,eAAgB,SAChBN,QAASJ,EAAMK,QAAQ,EAAG,IACvBL,EAAMM,OAAOC,QANJ,CAOZC,WAAY,MACZC,MAAO,OACPrQ,OAAQ,SAGZsN,UAAW,CACPiD,WAAYX,EAAMK,QAAQ,GAC1BO,YAAaZ,EAAMK,QAAQ,GAC3BI,MAAO,OAKXI,QAAS,CACLC,SAAU,EACVV,QAASJ,EAAMK,QAAQ,IAG3Bb,OAAQ,CACJpP,OAAQ4P,EAAMK,QAAQ,IAG1BnC,YAAa,CACT9N,OAAQ4P,EAAMK,QAAQ,GAEtBU,SAAU,OAIdC,YAAa,CACTC,UAAWjB,EAAMK,QAAQ,IAG7BrC,QAAS,CACL5N,OAAQ,iBAGZmN,SAAU,CACN0C,QAAS,OACTC,SAAU,OACVQ,eAAgB,gBAEhBD,MAAO,QAGXpB,YAAa,CACTY,QAAS,OACTC,SAAU,OACVQ,eAAgB,WAChBO,UAAWjB,EAAMK,QAAQ,GACzBa,aAAclB,EAAMK,QAAQ,IAC5BI,MAAO,aAq1B8B,CAAEU,WAAW,GAAhCpB,CAAwC3M,8BC76B5DgO,EAAYC,YAAW,SAAArB,GAAK,MAAK,CAMrCsB,aAAarS,OAAAgF,EAAA,EAAAhF,CAAA,CACXmR,QAAS,GACTI,WAAY,OAEZP,QAAS,OACTS,eAAgB,gBAChBR,SAAU,OACVO,MAAO,QAENT,EAAMuB,YAAYC,KAAK,MAAQ,CAC9Bf,MAAO,OACPL,QAAS,EAETI,WAAY,GACZiB,YAAa,IAIjBC,KAAKzS,OAAAgF,EAAA,EAAAhF,CAAA,CAGHwR,MAAO,OACPrQ,OAAQ,IACP4P,EAAMuB,YAAYC,KAAK,MAAQ,CAC9BT,SAAU,IACVN,MAAO,OACPrQ,OAAQ,EACR6Q,UAAW,IAMfU,SAAS1S,OAAAgF,EAAA,EAAAhF,CAAA,CAIPwR,MAAO,QACPrQ,OAAQ,IACP4P,EAAMuB,YAAYC,KAAK,MAAQ,CAC9Bf,MAAO,OACPrQ,OAAQ,EACR6Q,UAAW,IAGfW,aAAc,CACZrC,MAAO,OAETsC,UAAW,CACTtC,MAAO,SAETuC,OAAQ,CACN7B,QAAS,eACT7P,OAAQ,QACR2R,UAAW,cAEbC,UAAW,CACTd,aAAc,GACde,SAAU,IAEZC,IAAK,CACHhB,aAAc,OAqLHiB,MA/Kf,SAAmBxT,GAqBjB,IAAMuO,EAAUkE,IAEVgB,EAAQ,GAAIC,EAAQ,GAe1B,OACE3S,EAAAC,EAAAC,cAACF,EAAAC,EAAMgO,SAAP,KAEIhP,EAAM2T,eAAe7J,IAAI,SAAUC,EAAKlE,GACtC,IAAI+N,EAAW1L,KAAK2L,MAAM9J,EAAI+J,WAAWC,YACrCC,EAAa,IAAI9L,KAAK0L,GAAUK,qBAChCC,EAAa,IAAIhM,KAAK0L,GAAUO,qBAIpCV,EAAMlK,KAAKyK,GACXN,EAAMnK,KAAK2K,KAGfnT,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQoE,cACtB5R,EAAAC,EAAAC,cAACmT,EAAA,EAAD,CAAM5F,UAAWD,EAAQwE,MACvBhS,EAAAC,EAAAC,cAACoT,EAAA,EAAD,KACEtT,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAYC,QAAQ,KAAKwF,UAAU,MAAnC,gBAGAvT,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAYL,UAAWD,EAAQgF,IAAK3C,MAAM,iBAA1C,sCACA7P,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAYC,QAAQ,MACjB9O,EAAMuU,SADT,kBACiCxT,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAYC,QAAQ,SAApB,OADjC,IAC+E9O,EAAMwU,UADrF,gBAyBJzT,EAAAC,EAAAC,cAACmT,EAAA,EAAD,CAAM5F,UAAWD,EAAQwE,MACvBhS,EAAAC,EAAAC,cAACoT,EAAA,EAAD,KACEtT,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAYC,QAAQ,KAAKwF,UAAU,MAAnC,iBAGAvT,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAEE+B,MAAM,iBAFR,uBAGA7P,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAYC,QAAQ,MACjB9O,EAAMyU,WADT,iCAEG,OAiBP1T,EAAAC,EAAAC,cAACmT,EAAA,EAAD,CAAM5F,UAAWD,EAAQyE,UACvBjS,EAAAC,EAAAC,cAACoT,EAAA,EAAD,KACEtT,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAYC,QAAQ,KAAKwF,UAAU,MAAnC,iBAGAvT,EAAAC,EAAAC,cAAA,WAaAF,EAAAC,EAAAC,cAAA,WAEEjB,EAAM2T,eAAe7J,IAAI,SAAUC,EAAKlE,GAKtC,OACE9E,EAAAC,EAAAC,cAACF,EAAAC,EAAMgO,SAAP,CAAgBY,IAAKS,KAAKC,UACxBvP,EAAAC,EAAAC,cAACmO,EAAA,EAAD,MACArO,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CACEL,UAAWD,EAAQgF,IAAK3C,MAAM,iBADhC,KAIK6C,EAAM5N,GAJX,KAImB6N,EAAM7N,GAJzB,qBAIiDkE,EAAI2D,iBAJrD,gBAIoF3D,EAAI4D,YAJxF,cAIgH5D,EAAIzB,aAJpH,UASAvH,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,KACG9E,EAAIqE,cADP,IACuBrE,EAAIiE,kBAAkB,IAG7CjN,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,SAAc9E,EAAItC,QAAlB,KACA1G,EAAAC,EAAAC,cAAA,mMC9OpByT,EAAQ,KAAUC,SAalBC,KAASC,cAAc,CAEnBC,OAAQ,0CAERC,WAAY,8CAsMDC,eAhMX,SAAAA,EAAYhV,GAAO,IAAA0E,EAAA,OAAApE,OAAAqE,EAAA,EAAArE,CAAAsE,KAAAoQ,IACftQ,EAAApE,OAAAuE,EAAA,EAAAvE,CAAAsE,KAAAtE,OAAAwE,EAAA,EAAAxE,CAAA0U,GAAAjQ,KAAAH,KAAM5E,KAwBViV,aAAe,SAACC,GACZ7S,EAAIS,YAEAoS,GAAaxQ,EAAKc,MAAMzC,OAEvB4G,KAAK,SAAAgB,GAGFhK,QAAQC,IAAI,0CAA2C+J,KAW1DC,MAAM,kBACHlG,EAAKW,SAAS,CACV8P,QAAS,6CA9CNzQ,EAqDnB0Q,SAAW,CACPC,WAAY,QACZC,cAAe,CACXV,KAASW,KAAKC,mBAAmBC,YACjCb,KAASW,KAAKG,qBAAqBD,YACnCb,KAASW,KAAKI,mBAAmBF,YACjCb,KAASW,KAAKK,kBAAkBH,aAEpCI,UAAW,CAEPC,4BAA6B,WAIzB,OAAO,KAnEApR,EA2EnBqR,kBAAoB,WAChBnB,KAASW,OAAOS,mBAAmB,SAAAC,GAC/BvR,EAAKW,SAAS,CAEV+D,aAAc6M,OA/EPvR,EAoFnBwR,mBAAqB,WAMjBtB,KAASW,OAAOY,eAAevB,KAASW,KAAKa,KAAKC,YAAYC,SACzD3M,KAAK,cAOLiB,MAAM,SAAUC,GAIblK,QAAQC,IAAR,mBAAAsC,OAA+B2H,EAAM0L,MAArC,sBAAArT,OAC0B2H,EAAMsK,aAnGxCzQ,EAAKc,MAAQ,CACT4D,YAAY,GALD1E,wEA4Gf,OAEI3D,EAAAC,EAAAC,cAACF,EAAAC,EAAMgO,SAAP,KACIjO,EAAAC,EAAAC,cAACuV,GAAA,EAAD,MACAzV,EAAAC,EAAAC,cAACwV,GAAA,EAAD,CAAWC,SAAS,KAChBzG,MAAO,CACH0G,gBAAiB,UACfC,OAAQ,QACR9E,MAAO,UAEb/Q,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAYyF,UAAU,OAMlBvT,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAAA,2EAkCC2D,KAAKY,MAAM4D,WACRrI,EAAAC,EAAAC,cAAC4V,EAAA,EAAD,CACIC,GAAI,CACAtN,SAAU,iBACVhE,MAAO,CACHuR,SAAU,cACVC,kBAAkB,MAc1BjW,EAAAC,EAAAC,cAACgW,GAAAjW,EAAD,CACIoU,SAAUxQ,KAAKwQ,SACf8B,aAActC,KAASW,mBAvLlCrE,6QCiBnBuB,GAAYC,YAAW,SAAArB,GAAK,MAAK,CACrC8F,KAAM,CACJ7F,QAAS,OACTa,SAAU,GAEZiF,OAAQ,CACNC,OAAQhG,EAAMgG,OAAOC,OAAS,EAC9BC,WAAYlG,EAAMmG,YAAYC,OAAO,CAAC,QAAS,UAAW,CACxDC,OAAQrG,EAAMmG,YAAYE,OAAOC,MACjCC,SAAUvG,EAAMmG,YAAYI,SAASC,iBAGzCC,YAAa,CACX9F,WAfgB,IAgBhBF,MAAK,eAAA5O,OAhBW,IAgBX,OACLqU,WAAYlG,EAAMmG,YAAYC,OAAO,CAAC,QAAS,UAAW,CACxDC,OAAQrG,EAAMmG,YAAYE,OAAOC,MACjCC,SAAUvG,EAAMmG,YAAYI,SAASG,kBAGzCC,cAAe,CACb7F,SAAU,GAGZ8F,WAAY,CACVhG,YAAa,IAEfiG,KAAM,CACJ5G,QAAS,QAEXgG,OAAQ,CACNxF,MAjCgB,IAkChBqG,WAAY,GAGdC,WAAY,CACVtG,MAtCgB,IAuChByF,WAAYlG,EAAMmG,YAAYC,OAAO,QAAS,CAC5CC,OAAQrG,EAAMmG,YAAYE,OAAOC,MACjCC,SAAUvG,EAAMmG,YAAYI,SAASG,kBAGzCM,YAAY/X,OAAAgF,EAAA,EAAAhF,CAAA,CACViX,WAAYlG,EAAMmG,YAAYC,OAAO,QAAS,CAC5CC,OAAQrG,EAAMmG,YAAYE,OAAOC,MACjCC,SAAUvG,EAAMmG,YAAYI,SAASC,gBAEvCS,UAAW,SACXxG,MAAOT,EAAMK,QAAQ,GAAK,GACzBL,EAAMuB,YAAY2F,GAAG,MAAQ,CAC5BzG,MAAOT,EAAMK,QAAQ,GAAK,IAG9BE,QAAQtR,OAAAiF,EAAA,EAAAjF,CAAA,CACNgR,QAAS,OACTE,WAAY,SACZO,eAAgB,WAChBN,QAASJ,EAAMK,QAAQ,EAAG,IACvBL,EAAMM,OAAOC,YAyWLT,mBArWf,SAAiBnR,GAAO,IAAAwY,EAAAC,EA4ChBlK,EAAUkE,KACVpB,EAAQqH,eA7CQzY,EAoDEC,IAAMC,UAAS,GApDjBE,EAAAC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,GAoDf0Y,EApDetY,EAAA,GAoDTuY,EApDSvY,EAAA,GAmItB,OAEEU,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQ4I,MACtBpW,EAAAC,EAAAC,cAACuV,GAAA,EAAD,MACAzV,EAAAC,EAAAC,cAAC4X,EAAA,EAAD,CACEC,SAAS,QACTtK,UAAWuK,aAAKxK,EAAQ6I,OAAT9W,OAAAgF,EAAA,EAAAhF,CAAA,GACZiO,EAAQuJ,YAAca,KAGzB5X,EAAAC,EAAAC,cAAC+X,GAAA,EAAD,KACEjY,EAAAC,EAAAC,cAACgY,GAAA,EAAD,CACErI,MAAM,UACN5O,aAAW,cACXgP,QAjEe,WACvB4H,GAAQ,IAiEAM,KAAK,QACL1K,UAAWuK,aAAKxK,EAAQ0J,WAAT3X,OAAAgF,EAAA,EAAAhF,CAAA,GACZiO,EAAQ2J,KAAOS,KAGlB5X,EAAAC,EAAAC,cAACkY,GAAAnY,EAAD,OAEFD,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAYC,QAAQ,KAAKN,UAAWD,EAAQyJ,cAAeoB,QAAM,GAE9DpZ,EAAMqZ,YAGTtY,EAAAC,EAAAC,cAAC+X,GAAA,EAAD,CAASM,gBAAc,GACrBvY,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAYC,QAAQ,KAAKN,UAAWD,EAAQgL,QAG5CxY,EAAAC,EAAAC,cAAA,OAAKgP,MAAO,CAAEuJ,KAAM,KACpBzY,EAAAC,EAAAC,cAACwY,GAAA,EAAD,CAAS/X,GAAG,gBAAgB6X,MAAM,YAChCxY,EAAAC,EAAAC,cAACgY,GAAA,EAAD,CACEhP,KAAK,UACLjI,aAAW,UACX4O,MAAM,UACNI,QAAS,WACP4D,KAASW,OAAOmE,UAChB1Z,EAAMsJ,QAAQC,KAAK,MAErBoQ,IAAI,YAEJ5Y,EAAAC,EAAAC,cAAC2Y,GAAA5Y,EAAD,QAGJD,EAAAC,EAAAC,cAACwY,GAAA,EAAD,CAAS/X,GAAG,gBAAgB6X,MAAM,qBAChCxY,EAAAC,EAAAC,cAACgY,GAAA,EAAD,CACEhP,KAAK,SACLjI,aAAW,cACX4O,MAAM,UACNiJ,KAAK,qDACL1U,OAAO,SACPwU,IAAI,YAEJ5Y,EAAAC,EAAAC,cAAC6Y,EAAA9Y,EAAD,WAMVD,EAAAC,EAAAC,cAAC8Y,GAAA,EAAD,CACEjL,QAAQ,YACRN,UAAWuK,aAAKxK,EAAQ+I,QAATkB,EAAA,GAAAlY,OAAAgF,EAAA,EAAAhF,CAAAkY,EACZjK,EAAQ6J,WAAaO,GADTrY,OAAAgF,EAAA,EAAAhF,CAAAkY,EAEZjK,EAAQ8J,aAAeM,GAFXH,IAIfjK,QAAS,CACPyL,MAAOjB,cAAIN,EAAA,GAAAnY,OAAAgF,EAAA,EAAAhF,CAAAmY,EACRlK,EAAQ6J,WAAaO,GADbrY,OAAAgF,EAAA,EAAAhF,CAAAmY,EAERlK,EAAQ8J,aAAeM,GAFfF,KAKbE,KAAMA,GAEN5X,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQqD,SACtB7Q,EAAAC,EAAAC,cAACgY,GAAA,EAAD,CAAYjI,QA3HM,WACxB4H,GAAQ,KA2HqB,QAApBvH,EAAM4I,UAAsBlZ,EAAAC,EAAAC,cAACiZ,GAAAlZ,EAAD,MAAuBD,EAAAC,EAAAC,cAACkZ,GAAAnZ,EAAD,QAGxDD,EAAAC,EAAAC,cAACmO,EAAA,EAAD,MACArO,EAAAC,EAAAC,cAACmZ,GAAA,EAAD,CAAMpY,aAAW,qBAEfjB,EAAAC,EAAAC,cAACoZ,GAAA,EAAD,CAAUxJ,QAAM,EAACjB,IAAI,YACnBoB,QAAShR,EAAMqJ,eACftI,EAAAC,EAAAC,cAACqZ,GAAA,EAAD,KACEvZ,EAAAC,EAAAC,cAACsZ,GAAAvZ,EAAD,OAEFD,EAAAC,EAAAC,cAACuZ,GAAA,EAAD,CAAcC,QAAQ,eAGxB1Z,EAAAC,EAAAC,cAACoZ,GAAA,EAAD,CAAUxJ,QAAM,EAACjB,IAAI,eACnBoB,QAAShR,EAAM0a,iBACf3Z,EAAAC,EAAAC,cAACqZ,GAAA,EAAD,KACEvZ,EAAAC,EAAAC,cAAC0Z,GAAA3Z,EAAD,OAEFD,EAAAC,EAAAC,cAACuZ,GAAA,EAAD,CAAcC,QAAQ,kBAIxB1Z,EAAAC,EAAAC,cAACoZ,GAAA,EAAD,CAAUxJ,QAAM,EAACjB,IAAwB,aAAnB5P,EAAM4a,SAA0B,cAAgB,eACpE5J,QAAShR,EAAM6a,iBACf9Z,EAAAC,EAAAC,cAACqZ,GAAA,EAAD,KACEvZ,EAAAC,EAAAC,cAAC6Z,GAAA9Z,EAAD,OAEFD,EAAAC,EAAAC,cAACuZ,GAAA,EAAD,CAAcC,QAA4B,aAAnBza,EAAM4a,SAA0B,cAAgB,kBAGzE7Z,EAAAC,EAAAC,cAACmO,EAAA,EAAD,MAEArO,EAAAC,EAAAC,cAACoZ,GAAA,EAAD,CAAUxJ,QAAM,EAACjB,IAAI,eACnBoB,QAAShR,EAAM+a,iBACfha,EAAAC,EAAAC,cAACqZ,GAAA,EAAD,KACEvZ,EAAAC,EAAAC,cAAC+Z,GAAAha,EAAD,OAEFD,EAAAC,EAAAC,cAACuZ,GAAA,EAAD,CAAcC,QAAQ,kBAGJ,aAAnBza,EAAM4a,UACL7Z,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgO,SAAA,KACEjO,EAAAC,EAAAC,cAACoZ,GAAA,EAAD,CAAUxJ,QAAM,EAACjB,IAAI,uBACnBoB,QAAShR,EAAMib,yBACfla,EAAAC,EAAAC,cAACqZ,GAAA,EAAD,KACEvZ,EAAAC,EAAAC,cAACia,GAAAla,EAAD,OAEFD,EAAAC,EAAAC,cAACuZ,GAAA,EAAD,CAAcC,QAAQ,0BAGxB1Z,EAAAC,EAAAC,cAACoZ,GAAA,EAAD,CAAUxJ,QAAM,EAACjB,IAAI,kBACnBoB,QAAShR,EAAMmb,oBACfpa,EAAAC,EAAAC,cAACqZ,GAAA,EAAD,KACEvZ,EAAAC,EAAAC,cAACma,GAAApa,EAAD,OAEFD,EAAAC,EAAAC,cAACuZ,GAAA,EAAD,CAAcC,QAAQ,uBAQ9B1Z,EAAAC,EAAAC,cAACmO,EAAA,EAAD,MAqEArO,EAAAC,EAAAC,cAACmO,EAAA,EAAD,OASDpP,EAAMqb,YC3YPC,eAGF,SAAAA,EAAYtb,GAAO,IAAA0E,EAAA,OAAApE,OAAAqE,EAAA,EAAArE,CAAAsE,KAAA0W,IACf5W,EAAApE,OAAAuE,EAAA,EAAAvE,CAAAsE,KAAAtE,OAAAwE,EAAA,EAAAxE,CAAAgb,GAAAvW,KAAAH,KAAM5E,KASVgF,kBAAoB,SAACC,GAEjB,IAAMC,EAAUD,EAAME,OAAOzD,GACvB0D,EAAaH,EAAME,OAAOtD,MAKhC6C,EAAKW,SAAL/E,OAAAgF,EAAA,EAAAhF,CAAA,GACO4E,EAAUE,KAnBFV,EAqCnB8C,WAAa,WACT9C,EAAKW,SAAL/E,OAAAiF,EAAA,EAAAjF,CAAA,GACOoE,EAAKc,MADZ,CAGIoV,SAAU,OAGVlQ,aAAc,GACd2B,QAAS,GACToB,QAAS,GACTrD,YAAa,GACb1C,MAAO,GAGPD,QAAS,GAGT6C,IAAK,GACL3C,OAAQ,GACRC,SAAU,GACVC,SAAU,GACVC,qBAAsB,GACtBC,gBAAiB,GACjBwT,MAAO,GACPtT,aAAc,OA7DHvD,EA0EnB8W,QAAU,WAGNnZ,EAAIS,YACA4B,EAAK1E,MAAM+C,OAEV4G,KAAK,SAAAgB,GACFA,EAAI9G,KACAlD,QAAQC,IAAI,aAAc+J,EAAI9G,KAAK,IAIjClD,QAAQC,IAAI,UAAW+J,EAAI9G,QAEpC+G,MAAM,kBACHlG,EAAKW,SAAS,CACV8P,QAAS,6CA1FNzQ,EAgGnB+W,SAAW,WACPpZ,EAAIM,WAAW,CACXI,MAAO2B,EAAK1E,MAAM+C,MAClB2Y,YAAahX,EAAK1E,MAAMiK,KAExB0R,UAAWjX,EAAK1E,MAAMiK,KAAK2R,MAAM,KAAK,GAEtCC,SAAUnX,EAAK1E,MAAMiK,KAAK2R,MAAM,KAAKlX,EAAK1E,MAAMiK,KAAK2R,MAAM,KAAKE,OAAS,GACzE3N,SAAUzJ,EAAK1E,MAAMmO,SACrByM,SAAUlW,EAAK1E,MAAM4a,WACtBjR,KAAK,kBAAMjF,EAAK8W,aAvGnB9W,EAAKc,MAAQ,GAHEd,oFAgHf/D,QAAQC,IAAI,yBAA0BgE,KAAKY,wCAGtC,IAAA8I,EAAA1J,KACLA,KAAK4W,UADA,IAEGjN,EAAY3J,KAAK5E,MAAjBuO,QACR,OACIxN,EAAAC,EAAAC,cAAA,QAAMuN,UAAWD,EAAQjN,UAAWoN,YAAU,EAACC,aAAa,OACxD5N,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAYC,QAAQ,SAApB,wCACA/N,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQK,UACpB7N,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,OACHsO,UAAQ,EACRrO,MAAM,YACNuN,YAAY,WACZV,UAAWD,EAAQQ,UACnBI,aAAcvK,KAAK5E,MAAMiK,KACzBxI,OAAO,SACPqN,QAAQ,aAEZ/N,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,QACHsO,UAAQ,EACRrO,MAAM,aACNwN,aAAcvK,KAAK5E,MAAM+C,MACzByL,UAAWD,EAAQQ,UACnBtN,OAAO,SACPqN,QAAQ,cAIhB/N,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQK,UACpB7N,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,WACH+N,UAAQ,EACR9N,MAAM,mBACNwN,aAAcvK,KAAK5E,MAAM4a,SACzBpM,UAAWD,EAAQQ,UACnBtN,OAAO,SACPqN,QAAQ,WACRhN,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,QAE1C7D,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,WACHC,MAAM,sBACNE,MAAO+C,KAAK5E,MAAMmO,SAClB8B,MAAO,CACHxO,OAAQ,EACRqQ,MAAO,QAKXrQ,OAAO,SACPS,gBAAiB,CACbC,QAAQ,GAEZ2M,QAAQ,WACRhN,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,SAI9C7D,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQmC,aACpB3P,EAAAC,EAAAC,cAAC0P,EAAA,EAAD,CACI7B,QAAQ,YACR8B,MAAM,YACNpC,UAAWD,EAAQsC,OACnBC,QAAS/P,EAAAC,EAAAC,cAAC8P,EAAA/P,EAAD,mBACTgQ,QAEI,WACIrQ,QAAQC,IAAI,+BAAgC0N,EAAK9I,OAEjD8I,EAAK9G,eAVjB,eAeAzG,EAAAC,EAAAC,cAAC0P,EAAA,EAAD,CACI7B,QAAQ,YACR8B,MAAM,UACNpC,UAAWD,EAAQsC,OACnBC,QAAS/P,EAAAC,EAAAC,cAACgQ,EAAA,EAAD,aACTD,QAAS,kBAAM1C,EAAKmN,aALxB,oBAnMMvK,aAgQXC,eAAWC,YAlTX,SAAAC,GAAK,MAAK,CAGrB/P,UAAUhB,OAAAiF,EAAA,EAAAjF,CAAA,CACNgR,QAAS,OACTC,SAAU,OAEVC,WAAY,SAGZC,QAASJ,EAAMK,QAAQ,EAAG,KACvBL,EAAMM,OAAOC,QARX,CAULC,WAAY,OACZC,MAAO,SAEX/C,UAAW,CACPiD,WAAYX,EAAMK,QAAQ,GAC1BO,YAAaZ,EAAMK,QAAQ,GAC3BI,MAAO,OAGXI,QAAS,CACLC,SAAU,EACVV,QAASJ,EAAMK,QAAQ,IAG3BqK,QAAS,CACLjD,SAAU,YAEdjI,OAAQ,CACJpP,OAAQ4P,EAAMK,QAAQ,IAE1B9C,SAAU,CACN0C,QAAS,OACTC,SAAU,OAGVO,MAAO,QAEXpB,YAAa,CACTY,QAAS,OACTC,SAAU,OACVQ,eAAgB,WAChBO,UAAWjB,EAAMK,QAAQ,GACzBa,aAAclB,EAAMK,QAAQ,IAC5BI,MAAO,aAoQ8B,CAAEU,WAAW,GAAhCpB,CAAwCkK,KCpQ5DU,eACF,SAAAA,EAAYhc,GAAO,IAAA0E,EAAA,OAAApE,OAAAqE,EAAA,EAAArE,CAAAsE,KAAAoX,IACftX,EAAApE,OAAAuE,EAAA,EAAAvE,CAAAsE,KAAAtE,OAAAwE,EAAA,EAAAxE,CAAA0b,GAAAjX,KAAAH,KAAM5E,KAQVgF,kBAAoB,SAACC,GAEjB,IAAMC,EAAUD,EAAME,OAAOzD,GACvB0D,EAAaH,EAAME,OAAOtD,MAKhC6C,EAAKW,SAAL/E,OAAAgF,EAAA,EAAAhF,CAAA,GACO4E,EAAUE,KAlBFV,EAoCnB8C,WAAa,WACT9C,EAAKW,SAAL/E,OAAAiF,EAAA,EAAAjF,CAAA,GACOoE,EAAKc,MADZ,CAGIa,QAAS,GACTgE,eAAgB,GAChBE,OAAQ,GACRxH,MAAO,GACPyH,OAAQ,CAAC9F,EAAK1E,MAAM0B,QA5CTgD,EAmEnBgF,WAAa,aAnEMhF,EAuEnBuX,UAAY,aAvEOvX,EA0FnByF,QAAU,WACN9H,EAAIgB,mBAAmB,CACnB4G,KAAMvF,EAAKc,MAAMa,QACjB+D,YAAa1F,EAAKc,MAAM6E,eACxBC,IAAK5F,EAAKc,MAAM+E,OAChBC,OAAQ,CAAC9F,EAAK1E,MAAM0B,MACrBiI,KAAK,kBAAMhJ,QAAQC,IAAI,iBA9F1B8D,EAAKc,MAAQ,GAFEd,oFAoGf/D,QAAQC,IAAI,yBAA0BgE,KAAKY,wCAGtC,IAAA8I,EAAA1J,KAEG2J,EAAY3J,KAAK5E,MAAjBuO,QACR,OACIxN,EAAAC,EAAAC,cAAA,QAAMuN,UAAWD,EAAQjN,UAAWoN,YAAU,EAACC,aAAa,OACxD5N,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAYC,QAAQ,QAAQmB,MAAO,CAAEsC,aAAc,IAAnD,wCACAxR,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQK,UACpB7N,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,UACH+N,UAAQ,EAER9N,MAAM,gBACNE,MAAO+C,KAAKY,MAAMa,QAClBmI,UAAWD,EAAQQ,UAEnBtN,OAAO,SACPqN,QAAQ,WACRhN,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,MACtCqL,MAAO,CAAExO,OAAQ,GACjBS,gBAAiB,CACbC,QAAQ,KAGhBpB,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,QAEHC,MAAM,QACNE,MAAO+C,KAAKY,MAAMzC,MAClByL,UAAWD,EAAQQ,UACnBkB,MAAO,CAAExO,OAAQ,GACjByN,YAAY,mBAGZzN,OAAO,SACPS,gBAAiB,CACbC,QAAQ,GAEZ2M,QAAQ,WACRhN,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,QAE1C7D,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,iBAEHC,MAAM,cACNE,MAAO+C,KAAKY,MAAM6E,eAClB4F,MAAO,CACHxO,OAAQ,EACRqQ,MAAO,QAKXrQ,OAAO,SACPS,gBAAiB,CACbC,QAAQ,GAEZ2M,QAAQ,WACRhN,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,QAE1C7D,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,SAEHC,MAAM,MACNE,MAAO+C,KAAKY,MAAM+E,OAClB0F,MAAO,CAAExO,OAAQ,EAAGqQ,MAAO,QAI3BrQ,OAAO,SACPS,gBAAiB,CACbC,QAAQ,GAEZ2M,QAAQ,WACRhN,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,SAG9C7D,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQmC,aACpB3P,EAAAC,EAAAC,cAAC0P,EAAA,EAAD,CACI7B,QAAQ,YACR8B,MAAM,YACNpC,UAAWD,EAAQsC,OACnBC,QAAS/P,EAAAC,EAAAC,cAAC8P,EAAA/P,EAAD,mBACTgQ,QAEI,WACIrQ,QAAQC,IAAI,+BAAgC0N,EAAK9I,OAEjD8I,EAAK9G,eAVjB,eAeAzG,EAAAC,EAAAC,cAAC0P,EAAA,EAAD,CACI7B,QAAQ,YACR8B,MAAM,UACNpC,UAAWD,EAAQsC,OACnBC,QAAS/P,EAAAC,EAAAC,cAACgQ,EAAA,EAAD,aACTD,QAASpM,KAAKuF,SALlB,oBArMc+G,aAyNnBC,eAAWC,YAvQX,SAAAC,GAAK,MAAK,CAGrB/P,UAAUhB,OAAAiF,EAAA,EAAAjF,CAAA,CACNgR,QAAS,OACTC,SAAU,OACVC,WAAY,SACZC,QAASJ,EAAMK,QAAQ,EAAG,KACvBL,EAAMM,OAAOC,QALX,CAMLC,WAAY,OACZC,MAAO,SAEX/C,UAAW,CACPiD,WAAYX,EAAMK,QAAQ,GAC1BO,YAAaZ,EAAMK,QAAQ,GAC3BI,MAAO,OAGXI,QAAS,CACLC,SAAU,EACVV,QAASJ,EAAMK,QAAQ,IAG3BqK,QAAS,CACLjD,SAAU,YAEdjI,OAAQ,CACJpP,OAAQ4P,EAAMK,QAAQ,IAE1B9C,SAAU,CACN0C,QAAS,OACTC,SAAU,OAGVO,MAAO,QAEXpB,YAAa,CACTY,QAAS,OACTC,SAAU,OACVQ,eAAgB,WAChBO,UAAWjB,EAAMK,QAAQ,GACzBa,aAAclB,EAAMK,QAAQ,IAC5BI,MAAO,aA6N8B,CAAEU,WAAW,GAAhCpB,CAAwC4K,KC7L5DE,eACF,SAAAA,EAAYlc,GAAO,IAAA0E,EAAA,OAAApE,OAAAqE,EAAA,EAAArE,CAAAsE,KAAAsX,IACfxX,EAAApE,OAAAuE,EAAA,EAAAvE,CAAAsE,KAAAtE,OAAAwE,EAAA,EAAAxE,CAAA4b,GAAAnX,KAAAH,KAAM5E,KAsCVgF,kBAAoB,SAACC,GAEjB,IAAMC,EAAUD,EAAME,OAAOzD,GACvB0D,EAAaH,EAAME,OAAOtD,MAKhC6C,EAAKW,SAAL/E,OAAAgF,EAAA,EAAAhF,CAAA,GAAiB4E,EAAUE,KA/CZV,EAmDnBkB,gBAAkB,SAAAX,GACdtE,QAAQC,IAAI,wBAAyBqE,EAAME,QAE3C,IAAIU,EAAMnB,EAAKc,MAAMM,kBAAkBC,QAAQd,EAAME,OAAOtD,OAMxDmE,EAAa,GAEJA,EAAL,KAARH,EAA0BvF,OAAO4F,KAAKxB,EAAKc,MAAMW,iBAAiBN,IAAM,GAAkB,GAC1FlF,QAAQC,IAAI,gBAAiBoF,GAC7BtB,EAAKW,SAAS,CACVe,MAAOJ,EAGPM,OAAQ,GACRC,SAAU,GACVC,gBAAiB,GAGjBC,MAAO,GACPC,QAAS,GACTC,eAAgB,IAEd,WAAQjC,EAAKkC,gBA7EJlC,EAiFnBmC,iBAAmB,SAAA5B,GACftE,QAAQC,IAAI,uBAAwBqE,EAAME,QAC1C,IAAIU,EAAMnB,EAAKc,MAAMsB,aAAaf,QAAQd,EAAME,OAAOtD,OAMnDmE,EAAa1F,OAAO4F,KAAKxB,EAAKc,MAAMuB,YAAYlB,IAAM,GACtDmB,EAAetC,EAAKc,MAAMsB,aAAajB,GACvCoB,EAAevC,EAAKc,MAAM0B,YAAYrB,GAC1ClF,QAAQC,IAAI,iBAAkBoF,GAC9BtB,EAAKW,SAAS,CACViB,OAAQN,EACRO,SAAUS,EACVR,gBAAiBS,EAGjBR,MAAO,GACPC,QAAS,GACTC,eAAgB,IAEd,kBAAMjC,EAAKyC,gBAvGFzC,EA0GnB0C,gBAAkB,SAAAnC,GACdtE,QAAQC,IAAI,sBAAuBqE,EAAME,QACzC,IAAIU,EAAMnB,EAAKc,MAAM6B,aAAatB,QAAQd,EAAME,OAAOtD,OAKnDmE,EAAa,GACbgB,EAAe,GACfC,EAAe,GAENjB,GAAJ,IAATH,EAA0BvF,OAAO4F,KAAKxB,EAAKc,MAAM8B,YAAYzB,IAAM,GAAkB,GACxEmB,GAAJ,IAATnB,EAA4BnB,EAAKc,MAAM6B,aAAaxB,GAAsB,GAC7DoB,GAAJ,IAATpB,EAA4BnB,EAAKc,MAAM+B,YAAY1B,GAAsB,IAChE,IAATA,EAAalF,QAAQC,IAAI,iBAAkBoF,GAAcrF,QAAQC,IAAI,4BAErE8D,EAAKW,SAAS,CACVoB,MAAOT,EACPU,QAASM,EACTL,eAAgBM,KA7HLvC,EAiInB8C,WAAa,WACT9C,EAAKW,SAAL/E,OAAAiF,EAAA,EAAAjF,CAAA,GACOoE,EAAKc,MADZ,CAMIc,OAAQ,GACRC,SAAU,GACVC,gBAAiB,GAGjBC,MAAO,GACPC,QAAS,GACTC,eAAgB,GAIhBR,iBAAkB,GAClBL,kBAAmB,GACnBqC,iBAAkB,GAElBpB,YAAa,GACbD,aAAc,GACdI,YAAa,GAEbI,YAAa,GACbD,aAAc,GACdE,YAAa,GAEba,kBAAmB,OACnBC,iBAAkB,SAElB,WACI3D,EAAKgF,aAEL/I,QAAQC,IAAI,oBArKL8D,EAyKnByX,iBAAmB,SAAClX,GAGK,KAArBP,EAAKc,MAAMY,MAGLzF,QAAQC,IAAI,oDAGZN,OAAAsI,EAAA,EAAAtI,CAAAuI,EAAA7H,EAAA8H,KAAC,SAAAiC,IAAA,OAAAlC,EAAA7H,EAAAgI,KAAA,SAAAgC,GAAA,cAAAA,EAAA9B,KAAA8B,EAAA7B,MAAA,UACuB,KAAtBzE,EAAKc,MAAMc,OADZ,CAAA0E,EAAA7B,KAAA,eAAA6B,EAAA7B,KAAA,EAEazE,EAAKhB,cAAcgB,EAAKc,MAAMc,OAAQ,CAC1C2D,KAAQvF,EAAKc,MAAMe,SACnB6D,YAAe1F,EAAKc,MAAMgB,gBAC1BkE,aAAgBhG,EAAKc,MAAMY,QALpC,OAAA4E,EAAA7B,KAAA,eAWK7I,OAAAsI,EAAA,EAAAtI,CAAAuI,EAAA7H,EAAA8H,KAAC,SAAAC,IAAA,OAAAF,EAAA7H,EAAAgI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACSzE,EAAK+F,aADd,wBAAAxB,EAAAQ,SAAAV,KAADzI,GAXL,wBAAA0K,EAAAvB,SAAAsB,KAADzK,GAeGqJ,KAEwB,KAArBjF,EAAKc,MAAMiB,MACL/B,EAAK0H,YAEP1H,EAAKZ,cAAcY,EAAKc,MAAMiB,MAAO,CACjCwD,KAAQvF,EAAKc,MAAMkB,QACnB0D,YAAe1F,EAAKc,MAAMmB,eAC1B0F,QAAW3H,EAAKc,MAAMc,UAGjCqD,KAAM,kBAAMjF,EAAK1E,MAAMqJ,kBACvBuB,MAAM,SAAAqB,GAAG,OAAItL,QAAQC,IAAIqL,MA7MnBvH,EAoNnBgF,WAAa,WACTrH,EAAIe,UACCuG,KAAK,SAAAC,GACFjJ,QAAQC,IAAI,yBAA0BgJ,EAAK/F,MAC3C,IAAIgG,EAAUD,EAAK/F,KAAKiG,IAAI,SAAAC,GACxB,OAAOzJ,OAAAgF,EAAA,EAAAhF,CAAA,GAAGyJ,EAAIC,IAAMD,EAAIE,QAExBC,EAAQN,EAAK/F,KAAKiG,IAAI,SAAAC,GACtB,OAAOA,EAAIE,OAEfvF,EAAKW,SACD,CACIc,iBAAkB0D,EAClB/D,kBAAmBoE,MAgB9BP,KAAK,kBAAMhJ,QAAQC,IAAI,sCAAuC8D,EAAKc,UAjPzDd,EAuPnByF,QAAU,WACN9H,EAAIgB,mBAAmB,CACnB4G,KAAMvF,EAAKc,MAAMa,QACjB+D,YAAa1F,EAAKc,MAAM6E,eACxBC,IAAK5F,EAAKc,MAAM+E,OAChBC,OAAQ,CAAC9F,EAAK1E,MAAM0B,MACrBiI,KAAK,kBAAMhJ,QAAQC,IAAI,iBA7PX8D,EAoQnB+F,WAAa,WACT9J,QAAQC,IAAI,wBACZyB,EAAIkB,cAAc,CACd0G,KAAMvF,EAAKc,MAAMe,SACjB6D,YAAa1F,EAAKc,MAAMgB,gBACxBkE,aAAc,CAAChG,EAAKc,MAAMY,SAEzBuD,KAAK,SAACgB,GAAD,OAAShK,QAAQC,IAAI,iBAAkB+J,KAC5CC,MAAM,SAAAC,GAAK,OAAIlK,QAAQC,IAAIiK,KAC3BlB,KAAK,kBAAMjF,EAAKkC,gBA7QNlC,EAgRnBhB,cAhRmB,eAAA4I,EAAAhM,OAAAsI,EAAA,EAAAtI,CAAAuI,EAAA7H,EAAA8H,KAgRH,SAAAyD,EAAO7K,EAAImC,GAAX,OAAAgF,EAAA7H,EAAAgI,KAAA,SAAAwD,GAAA,cAAAA,EAAAtD,KAAAsD,EAAArD,MAAA,cACZxI,QAAQC,IAAR,kBAAAsC,OAA8BxB,EAA9B,mBAAmDmC,GADvC2I,EAAArD,KAAA,EAEN9G,EAAIqB,cAAchC,EAAImC,GACvB8F,KAAK,SAAAsB,GAEF,OADAtK,QAAQC,IAAI,gCAAiCqK,EAAOpH,MAC7CoH,IAEVL,MAAM,SAAAC,GAAK,OAAIlK,QAAQC,IAAI,kBAAmBiK,KAPvC,wBAAA2B,EAAA/C,SAAA8C,MAhRG,gBAAArB,EAAAC,GAAA,OAAAmB,EAAAlB,MAAAxG,KAAAyG,YAAA,GAAA3G,EA2RnBkC,WAAa,WACTvE,EAAIoB,YACA,IAECkG,KAAK,SAAA2B,GACF3K,QAAQC,IAAI,eAAgB0K,GAE5B,IAAIzB,EAAU,GACVK,EAAQ,GACRqB,EAAe,GALLC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAOd,QAAAC,EAAAC,EAAgBP,EAASzH,KAAzBiI,OAAAC,cAAAP,GAAAI,EAAAC,EAAA1C,QAAA6C,MAAAR,GAAA,EAA+B,KAAtBzB,EAAsB6B,EAAA/J,MACvBkI,EAAIW,eAAiBhG,EAAKc,MAAMY,QAChCyD,EAAQN,KAARjJ,OAAAgF,EAAA,EAAAhF,CAAA,GAAgByJ,EAAIC,IAAMD,EAAIE,OAC9BC,EAAMX,KAAKQ,EAAIE,MACfsB,EAAahC,KAAKQ,EAAIK,eAXhB,MAAA6B,GAAAR,GAAA,EAAAC,EAAAO,EAAA,YAAAT,GAAA,MAAAK,EAAAK,QAAAL,EAAAK,SAAA,WAAAT,EAAA,MAAAC,GAgBd7B,EAAQsC,cAASR,GACbjH,EAAKW,SAAS,CACV0B,YAAa,GACbD,aAAc,GACdI,YAAa,GACbkB,mBAAmB,GAEnBzH,QAAQC,IAAI,wBAAyBiJ,EAASK,EAAOqB,IAKzD7G,EAAKW,SAAS,CACV0B,YAAa8C,EACb/C,aAAcoD,EACdhD,YAAaqE,EACbnD,mBAAmB,GAEjBzH,QAAQC,IAAI,4CAA6CiJ,EAASK,EAAOqB,MAKtF5B,KAAK,kBAAMhJ,QAAQC,IAAI,qCAAsC8D,EAAKc,SAClEmE,KAAKjF,EAAKyC,cACVyD,MAAM,SAAAqB,GAAG,OAAItL,QAAQC,IAAIqL,MAxUfvH,EA+UnB0H,UAAY,WACR/J,EAAIuB,cAAc,CACdqG,KAAMvF,EAAKc,MAAMkB,QACjB0D,YAAa1F,EAAKc,MAAMmB,eACxB0F,QAAS,CAAC3H,EAAKc,MAAMc,UAEpBqD,KAAK,SAAAgB,GAAG,OAAIhK,QAAQC,IAAI,iBAAkB+J,KAC1CC,MAAM,SAAAC,GAAK,OAAIlK,QAAQC,IAAIiK,MAtVjBnG,EAyVnBZ,cAzVmB,eAAAsY,EAAA9b,OAAAsI,EAAA,EAAAtI,CAAAuI,EAAA7H,EAAA8H,KAyVH,SAAAuT,EAAO3a,EAAImC,GAAX,OAAAgF,EAAA7H,EAAAgI,KAAA,SAAAsT,GAAA,cAAAA,EAAApT,KAAAoT,EAAAnT,MAAA,cACZxI,QAAQC,IAAR,qBAAAsC,OAAiCxB,EAAjC,mBAAsDmC,GAD1CyY,EAAAnT,KAAA,EAEN9G,EAAIyB,cAAcpC,EAAImC,GACvB8F,KAAK,SAAAsB,GAEF,OADAtK,QAAQC,IAAI,gCAAiCqK,EAAOpH,MAC7CoH,IAEVL,MAAM,SAAAC,GAAK,OAAIlK,QAAQC,IAAIiK,KAPpB,wBAAAyR,EAAA7S,SAAA4S,MAzVG,gBAAA5P,EAAAC,GAAA,OAAA0P,EAAAhR,MAAAxG,KAAAyG,YAAA,GAAA3G,EAmWnByC,WAAa,WACT9E,EAAI2B,YAAY,IAGX2F,KAAK,SAAAgD,GACFhM,QAAQC,IAAI,eAAgB+L,GAC5B,IAAI9C,EAAU,GACVK,EAAQ,GACRqB,EAAe,GAJLqB,GAAA,EAAAC,GAAA,EAAAC,OAAAnB,EAAA,IAMd,QAAAoB,EAAAC,EAAgBL,EAAS9I,KAAzBiI,OAAAC,cAAAa,GAAAG,EAAAC,EAAA7D,QAAA6C,MAAAY,GAAA,EAA+B,KAAtB7C,EAAsBgD,EAAAlL,MACvBkI,EAAIsC,UAAY3H,EAAKc,MAAMc,SAC3BuD,EAAQN,KAARjJ,OAAAgF,EAAA,EAAAhF,CAAA,GAAgByJ,EAAIC,IAAMD,EAAIE,OAC9BC,EAAMX,KAAKQ,EAAIE,MACfsB,EAAahC,KAAKQ,EAAIK,eAVhB,MAAA6B,GAAAY,GAAA,EAAAC,EAAAb,EAAA,YAAAW,GAAA,MAAAI,EAAAd,QAAAc,EAAAd,SAAA,WAAAW,EAAA,MAAAC,GAgBdjD,EAAQsC,cAASR,GACbjH,EAAKW,SAAS,CACViC,YAAa,GACbD,aAAc,GACdE,YAAa,GACbc,kBAAkB,GAElB1H,QAAQC,IAAI,wBAAyBiJ,EAASK,EAAOqB,IAGzD7G,EAAKW,SAAS,CACViC,YAAauC,EACbxC,aAAc6C,EACd3C,YAAagE,EACblD,kBAAkB,GACnB1H,QAAQC,IAAI,4CAA6CiJ,EAASK,EAAOqB,OAtYzE7G,EA2YnBuI,UAAY,WACR5K,EAAI4B,eAAeS,EAAKc,MAAMiB,OACzBkD,KAAK,SAAAuD,GAAG,OAAIvM,QAAQC,IAAI,cAAesM,MA3Y5CxI,EAAKc,MAAQ,CAMTc,OAAQ,GACRC,SAAU,GACVC,gBAAiB,GAGjBC,MAAO,GACPC,QAAS,GACTC,eAAgB,GAIhBR,iBAAkB,GAClBL,kBAAmB,GACnBqC,iBAAkB,GAElBpB,YAAa,GACbD,aAAc,GACdI,YAAa,GAEbI,YAAa,GACbD,aAAc,GACdE,YAAa,GAEba,mBAAmB,EACnBC,iBAAkB,QAhCP3D,mFAqZfE,KAAK8E,0DAIL/I,QAAQC,IAAI,yBAA0BgE,KAAKY,wCAWtC,IAAA8I,EAAA1J,KACG2J,EAAY3J,KAAK5E,MAAjBuO,QAER,OACIxN,EAAAC,EAAAC,cAAA,QAAMuN,UAAWD,EAAQjN,UAAWoN,YAAU,EAACC,aAAa,OACxD5N,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAYC,QAAQ,SAApB,wCACI/N,EAAAC,EAAAC,cAAA,WAEJF,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQK,UACpB7N,EAAAC,EAAAC,cAACqO,EAAA,EAAD,CAAaR,QAAQ,WAAWN,UAAWD,EAAQgB,aAC/CxO,EAAAC,EAAAC,cAACuO,EAAA,EAAD,CAEI9N,GAAG,yCAFP,YAKAX,EAAAC,EAAAC,cAACyO,EAAA,EAAD,CACIC,QAAQ,wCAERjO,GAAI,8BACJkO,IAAK1H,KAAK2H,IACVX,YAAY,gBACZrN,MACyB,KAArB+C,KAAKY,MAAMY,MAAexB,KAAKY,MAAMY,MAAQ,GAGjDtE,SAAU8C,KAAKgB,iBAOXhB,KAAKY,MAAMM,kBACPlB,KAAKY,MAAMM,kBAAkBgE,IAAI,SAACgG,EAAKjK,GAInC,OAAO9E,EAAAC,EAAAC,cAAE8O,EAAA,EAAF,CACHrO,GAAIpB,OAAO4F,KAAKoI,EAAK9I,MAAMW,iBAAiBN,IAAM,GAElD+J,IAAKE,EACL7F,KAAM6F,EACNjO,MAAOiO,GAENA,KAGP,kBAAMnP,QAAQC,IAAI,+BAAgC0N,EAAK9I,UAKzEzE,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,QAEHsO,UAAQ,EAERxB,UAAWD,EAAQQ,UACnBpN,MAAM,cACNE,MAAO+C,KAAKY,MAAMY,MAClB6J,MAAO,CAAExO,OAAQ,GACjBA,OAAO,SACPS,gBAAiB,CACbC,QAAQ,GAEZ2M,QAAQ,SACRhN,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,QAE1C7D,EAAAC,EAAAC,cAACmO,EAAA,EAAD,CAASZ,UAAWD,EAAQc,WAIhCtO,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQK,UACpB7N,EAAAC,EAAAC,cAACqO,EAAA,EAAD,CAAaR,QAAQ,WACjBN,UAAWD,EAAQgB,aAGnBxO,EAAAC,EAAAC,cAACuO,EAAA,EAAD,CAEI9N,GAAG,0CAFP,kBAKAX,EAAAC,EAAAC,cAACyO,EAAA,EAAD,CACIC,QAAQ,yCAERjO,GAAI,mCACJkO,IAAK1H,KAAK2H,IACVX,YAAY,eAEZpN,SAII8C,KAAKiC,kBAKLjC,KAAKY,MAAMsB,aACPlC,KAAKY,MAAMsB,aAAagD,IAAI,SAACqG,EAAMC,GAG/B,OAAOrP,EAAAC,EAAAC,cAAC8O,EAAA,EAAD,CACHrO,GAAIyO,EACJP,IAAK1H,KAAK2H,IACV5F,KAAMkG,EACNtO,MAAOsO,EACPH,WACI1B,EAAK9I,MAAM4C,mBAId+H,EACAxP,QAAQC,IAAI,uBAAwB0N,EAAK9I,MAAMuB,YAAYqJ,OAE/DrP,EAAAC,EAAAC,cAAA,aAKrBF,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,SAEHsO,UAAQ,EAERrO,MAAM,aACN6M,UAAWD,EAAQQ,UACnBlN,MAAO+C,KAAKY,MAAMc,OAClB2J,MAAO,CAAExO,OAAQ,GACjBA,OAAO,SACPS,gBAAiB,CACbC,QAAQ,GAEZ2M,QAAQ,SACRhN,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,QAE1C7D,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,WACH+N,UAAQ,EACRc,WAAS,EACTP,SAA+B,KAArBpL,KAAKY,MAAMY,MACrBzE,MAAM,uBACNE,MAAO+C,KAAKY,MAAMe,SAGlB9E,OAAO,SACPqN,QAAQ,WACRhN,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,MACtCqL,MAAO,CAAExO,OAAQ,GACjBS,gBAAiB,CACbC,QAAQ,KAGhBpB,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,kBACH6O,WAAS,EACTP,SAA+B,KAArBpL,KAAKY,MAAMY,MACrBzE,MAAM,cACNE,MAAO+C,KAAKY,MAAMgB,gBAClByJ,MAAO,CAAExO,OAAQ,GAIjBA,OAAO,SACPS,gBAAiB,CACbC,QAAQ,GAEZ2M,QAAQ,WACRhN,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,QAE1C7D,EAAAC,EAAAC,cAACmO,EAAA,EAAD,CAASZ,UAAWD,EAAQc,WAGhCtO,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQK,UACpB7N,EAAAC,EAAAC,cAACqO,EAAA,EAAD,CAAaR,QAAQ,WAAWN,UAAWD,EAAQgB,aAC/CxO,EAAAC,EAAAC,cAACuO,EAAA,EAAD,CAAY9N,GAAG,yCAAf,kBAGAX,EAAAC,EAAAC,cAACyO,EAAA,EAAD,CACIC,QAAQ,wCAERjO,GAAI,kCACJwN,YAAY,0BAEZpN,SAII8C,KAAKwC,iBAKLxC,KAAKY,MAAM6B,aACPzC,KAAKY,MAAM6B,aAAayC,IAAI,SAACoD,EAAKkD,GAG9B,OAAOrP,EAAAC,EAAAC,cAAC8O,EAAA,EAAD,CACHrO,GAAIwL,EACJ0C,IAAK1C,EACLjD,KAAMiD,EACNrL,MAAOqL,EACP8C,WACI1B,EAAK9I,MAAM6C,kBAGd6E,EACAvM,QAAQC,IAAI,sBAAuB0N,EAAK9I,MAAM8B,YAAY8I,OAE9DrP,EAAAC,EAAAC,cAAA,YAIhBN,QAAQC,IAAI,0CAA2CgE,KAAKY,MAAM4C,oBAGvErH,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,QAEHsO,UAAQ,EAERxB,UAAWD,EAAQQ,UACnBpN,MAAM,aACNE,MAAO+C,KAAKY,MAAMiB,MAClBwJ,MAAO,CAAExO,OAAQ,GACjBA,OAAO,SACPS,gBAAiB,CACbC,QAAQ,GAEZ2M,QAAQ,SACRhN,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,QAE1C7D,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,UACH+N,UAAQ,EACRc,WAAS,EACT5O,MAAM,+BAGNE,MAAO+C,KAAKY,MAAMkB,QAClBjF,OAAO,SACPqN,QAAQ,WACRhN,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,MACtCqL,MAAO,CAAExO,OAAQ,GACjBS,gBAAiB,CACbC,QAAQ,KAIhBpB,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,iBACH6O,WAAS,EACT5O,MAAM,cACNE,MAAO+C,KAAKY,MAAMmB,eAClBsJ,MAAO,CAAExO,OAAQ,GAIjBA,OAAO,SACPS,gBAAiB,CACbC,QAAQ,GAEZ2M,QAAQ,WACRhN,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,SAI9C7D,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQmC,aACpB3P,EAAAC,EAAAC,cAAC0P,EAAA,EAAD,CACI7B,QAAQ,YACR8B,MAAM,YACNpC,UAAWD,EAAQsC,OACnBC,QAAS/P,EAAAC,EAAAC,cAAC8P,EAAA/P,EAAD,mBACTgQ,QAEI,WACIrQ,QAAQC,IAAI,6BAA8B0N,EAAK9I,OAC/C8I,EAAK9G,eATjB,eAcAzG,EAAAC,EAAAC,cAAC0P,EAAA,EAAD,CACI7B,QAAQ,YACR8B,MAAM,UACNpC,UAAWD,EAAQsC,OACnBC,QAAS/P,EAAAC,EAAAC,cAACgQ,EAAA,EAAD,aACTD,QAASpM,KAAKuX,kBALlB,oBA/rBSjL,aAgtBdC,eAAWC,YAnxBX,SAAAC,GAAK,MAAK,CAGrB/P,UAAUhB,OAAAiF,EAAA,EAAAjF,CAAA,CACNgR,QAAS,OACTC,SAAU,OACVC,WAAY,SACZC,QAASJ,EAAMK,QAAQ,EAAG,KACvBL,EAAMM,OAAOC,QALX,CAMLC,WAAY,OACZC,MAAO,SAEX/C,UAAW,CACPiD,WAAYX,EAAMK,QAAQ,GAC1BO,YAAaZ,EAAMK,QAAQ,GAC3BI,MAAO,OAGXI,QAAS,CACLC,SAAU,EACVV,QAASJ,EAAMK,QAAQ,IAG3BqK,QAAS,CACLjD,SAAU,YAEdjI,OAAQ,CACJpP,OAAQ4P,EAAMK,QAAQ,IAG1BnC,YAAa,CACT9N,OAAQ4P,EAAMK,QAAQ,GACtBU,SAAU,OAEdC,YAAa,CACTC,UAAWjB,EAAMK,QAAQ,IAG7BrC,QAAS,CACL5N,OAAQ,gBACRqQ,MAAO,QAEXlD,SAAU,CACN0C,QAAS,OACTC,SAAU,OACVQ,eAAgB,gBAChBD,MAAO,QAEXpB,YAAa,CACTY,QAAS,OACTC,SAAU,OACVQ,eAAgB,WAChBO,UAAWjB,EAAMK,QAAQ,GACzBa,aAAclB,EAAMK,QAAQ,IAC5BI,MAAO,aA6tB8B,CAAEU,WAAW,GAAhCpB,CAAwC8K,yBCryB5DzJ,GAAYC,YAAW,SAAArB,GAAK,MAAK,CAEnC0B,KAAM,CACF2D,SAAU,IAGVtE,SAAU,OAEVE,UAAWjB,EAAMK,QAAQ,IAM7BrC,QAAS,CACLiD,UAAWjB,EAAMK,QAAQ,GACzBa,aAAclB,EAAMK,QAAQ,IAGhC6K,WAAY,CACRjL,QAAS,OACTkL,QAAS,CACL/a,OAAQ4P,EAAMK,QAAQ,IAE1BF,WAAY,SACZO,eAAgB,iBAEpB0K,YAAa,CACTnL,QAAS,OACTE,WAAY,UAEhBtD,OAAQ,CACJoD,QAAS,eACTW,YAAaZ,EAAMK,QAAQ,IAE/BgL,UAAW,CACP5K,MAAO,GACP8E,OAAQ,IAEZzR,OAAQ,CACJwX,WAAY,OACZ/L,MAAO,UASA,SAASgM,GAAY5c,GAChC,IAAMuO,EAAUkE,KAIhB,OACI1R,EAAAC,EAAAC,cAACmT,EAAA,EAAD,CAAM5F,UAAWD,EAAQwE,MACrBhS,EAAAC,EAAAC,cAAC4b,GAAA,EAAD,KAMI9b,EAAAC,EAAAC,cAACoT,EAAA,EAAD,KACItT,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQgO,YACpBxb,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQkO,aACpB1b,EAAAC,EAAAC,cAAC6b,GAAA,EAAD,CAAQC,IAAK/c,EAAM0b,YACfsB,IAAKhd,EAAMmO,SACXK,UAAWD,EAAQL,QAElBlO,EAAM0b,aAEX3a,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAYoO,cAAY,EAACnO,QAAQ,KAAKwF,UAAU,KAAKhD,QAAQ,UAAUtR,EAAM0b,cAEjF3a,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,KAAa7O,EAAMkd,aAG3Bnc,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAYyC,QAAQ,SAASxC,QAAQ,YAAY8B,MAAM,gBAAgB0D,UAAU,KAC5EtU,EAAMmd,YAIXpc,EAAAC,EAAAC,cAACmO,EAAA,EAAD,CAASZ,UAAWD,EAAQc,UAC5BtO,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAYC,QAAQ,QAAQ8B,MAAM,gBAAgB0D,UAAU,KAGvDtU,EAAMyH,0BCMzB2V,eAGF,SAAAA,EAAYpd,GAAO,IAAA0E,EAAA,OAAApE,OAAAqE,EAAA,EAAArE,CAAAsE,KAAAwY,IACf1Y,EAAApE,OAAAuE,EAAA,EAAAvE,CAAAsE,KAAAtE,OAAAwE,EAAA,EAAAxE,CAAA8c,GAAArY,KAAAH,KAAM5E,KAkKVgF,kBAAoB,SAAAC,GAEhB,IAAMC,EAAUD,EAAME,OAAOzD,GACvB0D,EAAaH,EAAME,OAAOtD,MAKhC6C,EAAKW,SAAL/E,OAAAgF,EAAA,EAAAhF,CAAA,GACO4E,EAAUE,KA5KFV,EAgLnBjE,iBAAmB,SAAAK,GACfH,QAAQC,IAAI,6BAA8BE,GAC1C4D,EAAKW,SAAL/E,OAAAiF,EAAA,EAAAjF,CAAA,GACOoE,EAAKc,MADZ,CAGIpF,aAAcU,MArLH4D,EAyLnBkB,gBAAkB,SAAAX,GACdtE,QAAQC,IAAI,wBAAyBqE,EAAME,QAE3C,IAAIU,EAAMnB,EAAKc,MAAMM,kBAAkBC,QAAQd,EAAME,OAAOtD,OAMxDmE,EAAa,GAAIC,EAAkB,GAE1BD,EAAL,KAARH,EAA0BvF,OAAO4F,KAAKxB,EAAKc,MAAMW,iBAAiBN,IAAM,GAAkB,GAC7EI,EAAL,KAARJ,EAA+BnB,EAAKc,MAAMM,kBAAkBD,GAAyB,GACrFlF,QAAQC,IAAI,gBAAiBoF,GAC7BtB,EAAKW,SAAL/E,OAAAiF,EAAA,EAAAjF,CAAA,GACOoE,EAAKc,MADZ,CAEIY,MAAOJ,EACPK,QAASJ,EAGTK,OAAQ,GACRC,SAAU,GACVC,gBAAiB,GAGjBC,MAAO,GACPC,QAAS,GACTC,eAAgB,GAGhBwG,SAAU,GACVzF,MAAO,GACPE,SAAU,GACVC,SAAU,GACVC,qBAAsB,GACtBwF,KAAM,YACN3F,OAAQ,GACR8F,QAAS,GACTrD,YAAa,GACbrC,gBAAiB,GACjBwF,OAAQ,GACRjD,IAAK,GACLtC,SAAU,GACVqV,SAAU,GAGVvP,MAAO,GACPC,UAAW,GACXoP,WAAY,GACZlP,WAAY,GACZxG,QAAS,KAIP,WAAQ/C,EAAKkC,gBA/OJlC,EAmPnBmC,iBAAmB,SAAA5B,GACftE,QAAQC,IAAI,uBAAwBqE,EAAME,QAC1C,IAAIU,EAAMnB,EAAKc,MAAMsB,aAAaf,QAAQd,EAAME,OAAOtD,OACnDmE,EAAa1F,OAAO4F,KAAKxB,EAAKc,MAAMuB,YAAYlB,IAAM,GACtDmB,EAAetC,EAAKc,MAAMsB,aAAajB,GACvCoB,EAAevC,EAAKc,MAAM0B,YAAYrB,GAC1ClF,QAAQC,IAAI,iBAAkBoF,GAC9BtB,EAAKW,SAAL/E,OAAAiF,EAAA,EAAAjF,CAAA,GACOoE,EAAKc,MADZ,CAEIc,OAAQN,EACRO,SAAUS,EACVR,gBAAiBS,EAGjBR,MAAO,GACPC,QAAS,GACTC,eAAgB,KAId,kBAAMjC,EAAKyC,gBAvQFzC,EA0QnB0C,gBAAkB,SAAAnC,GACdtE,QAAQC,IAAI,sBAAuBqE,EAAME,QACzC,IAAIU,EAAMnB,EAAKc,MAAM6B,aAAatB,QAAQd,EAAME,OAAOtD,OACnDmE,EAAa,GACbgB,EAAe,GACfC,EAAe,GAENjB,GAAJ,IAATH,EAA0BvF,OAAO4F,KAAKxB,EAAKc,MAAM8B,YAAYzB,IAAM,GAAkB,GACxEmB,GAAJ,IAATnB,EAA4BnB,EAAKc,MAAM6B,aAAaxB,GAAsB,GAC7DoB,GAAJ,IAATpB,EAA4BnB,EAAKc,MAAM+B,YAAY1B,GAAsB,IAChE,IAATA,EAAalF,QAAQC,IAAI,iBAAkBoF,GAAcrF,QAAQC,IAAI,4BAErE8D,EAAKW,SAAL/E,OAAAiF,EAAA,EAAAjF,CAAA,GACOoE,EAAKc,MADZ,CAEIiB,MAAOT,EACPU,QAASM,EACTL,eAAgBM,IAId,kBAAMvC,EAAK4Y,kBA9RF5Y,EAiSnB6Y,kBAAoB,SAAAtY,GAChBtE,QAAQC,IAAI,8BAA+BqE,EAAME,QACjD,IAAIU,EAAMnB,EAAKc,MAAMgY,WAAWzX,QAAQd,EAAME,OAAOtD,OACjDH,EAAK,GACLuI,EAAO,GACPwT,EAAO,GACPlQ,EAAS,GACTmQ,EAAM,GACNC,EAAW,GACXC,EAAU,GACVC,EAAW,GACXnW,EAAQ,GACRE,GAAW,EACXC,EAAW,GACXiW,EAAY,GACZxQ,EAAO,GACP3F,EAAS,GACToW,EAAS,GACT1Q,EAAe,GAGN3L,GAAJ,IAATmE,EAAkBvF,OAAO4F,KAAKxB,EAAKc,MAAMwY,UAAUnY,IAAM,GAAU,IAC1D,IAATA,EAAalF,QAAQC,IAAI,qBAAsBc,GAAMf,QAAQC,IAAI,0BAEpDid,GAAJ,IAAThY,EAAwBnB,EAAKc,MAAMyY,eAAepY,GAAkB,GACvD6B,GAAJ,IAAT7B,EAAqBnB,EAAKc,MAAM0Y,YAAYrY,GAAe,GAC9C+B,GAAJ,IAAT/B,EAAwBnB,EAAKc,MAAM2Y,cAActY,GAAkB,GACtDgC,GAAJ,IAAThC,EAAwBnB,EAAKc,MAAM4Y,gBAAgBvY,GAAkB,GACxDiY,GAAJ,IAATjY,EAAyBnB,EAAKc,MAAM6Y,eAAexY,GAAmB,GAEzDyH,GAAJ,IAATzH,EAAoBnB,EAAKc,MAAM8Y,WAAWzY,GAAc,GAC3C8B,GAAJ,IAAT9B,EAAsBnB,EAAKc,MAAM+Y,YAAY1Y,GAAgB,GAChDoE,GAAJ,IAATpE,EAAoBnB,EAAKc,MAAMgY,WAAW3X,GAAc,GAC3C4X,GAAJ,IAAT5X,EAAoBnB,EAAKc,MAAMgZ,UAAU3Y,GAAc,GAC1C0H,GAAJ,IAAT1H,EAAsBnB,EAAKc,MAAMiZ,WAAW5Y,GAG7B,GACF6X,GAAJ,IAAT7X,EAAmBnB,EAAKc,MAAMkZ,UAAU7Y,GAAa,GACxC8X,GAAJ,IAAT9X,EAAwBnB,EAAKc,MAAMmZ,eAAe9Y,GAAkB,GACvD+X,GAAJ,IAAT/X,EAAuBnB,EAAKc,MAAMoZ,gBAAgB/Y,GAAiB,GACtDkY,GAAJ,IAATlY,EAAsBnB,EAAKc,MAAMqZ,aAAahZ,GAAgB,GACjDwH,GAAJ,IAATxH,EAA4BnB,EAAKc,MAAMsZ,mBAAmBjZ,GAAsB,GAEhFnB,EAAKW,SAAL/E,OAAAiF,EAAA,EAAAjF,CAAA,GACOoE,EAAKc,MADZ,CAEIsI,MAAOpM,EACP+L,QAASxD,EACTG,YAAaqT,EAEbrd,aAAcmN,EACdjD,IAAKoT,EACL1V,SAAU2V,EACVN,SAAUO,EACVzQ,SAAU0Q,EACVnW,MAAOA,EACPE,SAAUA,EACVC,SAAUA,EACVC,qBAAsBgW,EACtBxQ,KAAMA,EACN3F,OAAQA,EACRI,gBAAiBgW,EACjB1Q,aAAcA,IAId,kBAAM3I,EAAKqa,oBAnWAra,EA0WnB8C,WAAa,WACT9C,EAAKW,SAAL/E,OAAAiF,EAAA,EAAAjF,CAAA,GACOoE,EAAKc,MADZ,CASIc,OAAQ,GACRC,SAAU,GAIVE,MAAO,GACPC,QAAS,GASTK,YAAa,GACbD,aAAc,GACdI,YAAa,GAEbI,YAAa,GACbD,aAAc,GACdE,YAAa,GAGbyW,UAAW,GACXR,WAAY,GACZgB,UAAW,GAEXQ,gBAAiB,GAGjB5W,mBAAmB,EACnBC,kBAAkB,EAClB4W,oBAAoB,EAEpBC,cAAe,GAGfC,aAAc,CACV,WACA,QACA,WACA,WACA,uBACA,OACA,SACA,UACA,cACA,kBACA,SACA,MACA,WACA,YAGJhS,SAAU,GACVzF,MAAO,GACPE,SAAU,GACVC,SAAU,GACVC,qBAAsB,GACtBwF,KAAM,YACN3F,OAAQ,GACR8F,QAAS,GACTrD,YAAa,GACbrC,gBAAiB,GACjBwF,OAAQ,GACRjD,IAAK,GACLtC,SAAU,GACVP,QAAS,GAKTqG,MAAO,GACPC,UAAW,GACXoP,WAAY,GAEZlP,WAAY,GACZsN,MAAO,GAGP2B,UAAW,GACXkC,UAAW,GAIXC,cAAe,GACfC,eAAgB,GAChBC,cAAe,GACfC,gBAAiB,GACjBC,oBAAqB,GAErBC,2BAA4B,GAC5BC,aAAc,GACdC,oBAAqB,GACrBC,iBAAkB,GAClBC,kBAAmB,GAEnBC,mBAAoB,GACpBC,eAAgB,OAvdLtb,EA8dnBgF,WAAa,WACTrH,EAAIe,UACCuG,KAAK,SAAAC,GAEF,IAAIC,EAAUD,EAAK/F,KAAKiG,IAAI,SAAAC,GACxB,OAAOzJ,OAAAgF,EAAA,EAAAhF,CAAA,GAAGyJ,EAAIC,IAAMD,EAAIE,QAExBC,EAAQN,EAAK/F,KAAKiG,IAAI,SAAAC,GACtB,OAAOA,EAAIE,OAEfvF,EAAKW,SAAS,CACVc,iBAAkB0D,EAClB/D,kBAAmBoE,OA1ehBxF,EAifnByF,QAAU,WACN9H,EAAIgB,mBAAmB,CACnB4G,KAAMvF,EAAKc,MAAMa,QACjB+D,YAAa1F,EAAKc,MAAM6E,eACxBC,IAAK5F,EAAKc,MAAM+E,OAChBC,OAAQ,CAAC9F,EAAK1E,MAAM0B,MACrBiI,KAAK,kBAAMhJ,QAAQC,IAAI,iBAvfX8D,EA8fnB+F,WAAa,WACT9J,QAAQC,IAAI,wBACZyB,EAAIkB,cAAc,CACd0G,KAAMvF,EAAKc,MAAMe,SACjB6D,YAAa1F,EAAKc,MAAMgB,gBACxBkE,aAAc,CAAChG,EAAKc,MAAMY,SAEzBuD,KAAK,SAACgB,GAAD,OAAShK,QAAQC,IAAI,iBAAkB+J,KAC5CC,MAAM,SAAAC,GAAK,OAAIlK,QAAQC,IAAIiK,KAC3BlB,KAAK,kBAAMjF,EAAKkC,gBAvgBNlC,EA0gBnBhB,cA1gBmB,eAAAuc,EAAA3f,OAAAsI,EAAA,EAAAtI,CAAAuI,EAAA7H,EAAA8H,KA0gBH,SAAAC,EAAOrH,EAAImC,GAAX,OAAAgF,EAAA7H,EAAAgI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACZxI,QAAQC,IAAR,kBAAAsC,OAA8BxB,EAA9B,mBAAmDmC,GADvCoF,EAAAE,KAAA,EAEN9G,EAAIqB,cAAchC,EAAImC,GACvB8F,KAAK,SAAAsB,GAEF,OADAtK,QAAQC,IAAI,gCAAiCqK,EAAOpH,MAC7CoH,IAEVL,MAAM,SAAAC,GAAK,OAAIlK,QAAQC,IAAI,kBAAmBiK,KAPvC,wBAAA5B,EAAAQ,SAAAV,MA1gBG,gBAAAmC,EAAAC,GAAA,OAAA8U,EAAA7U,MAAAxG,KAAAyG,YAAA,GAAA3G,EAqhBnBkC,WAAa,WACTvE,EAAIoB,YACA,IAECkG,KAAK,SAAA2B,GAGF,IAAIzB,EAAU,GACVK,EAAQ,GACRqB,EAAe,GALLC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAOd,QAAAC,EAAAC,EAAgBP,EAASzH,KAAzBiI,OAAAC,cAAAP,GAAAI,EAAAC,EAAA1C,QAAA6C,MAAAR,GAAA,EAA+B,KAAtBzB,EAAsB6B,EAAA/J,MACvBkI,EAAIW,eAAiBhG,EAAKc,MAAMY,QAChCyD,EAAQN,KAARjJ,OAAAgF,EAAA,EAAAhF,CAAA,GAAgByJ,EAAIC,IAAMD,EAAIE,OAC9BC,EAAMX,KAAKQ,EAAIE,MACfsB,EAAahC,KAAKQ,EAAIK,eAXhB,MAAA6B,GAAAR,GAAA,EAAAC,EAAAO,EAAA,YAAAT,GAAA,MAAAK,EAAAK,QAAAL,EAAAK,SAAA,WAAAT,EAAA,MAAAC,GAgBd7B,EAAQsC,cAASR,GACbjH,EAAKW,SAAL/E,OAAAiF,EAAA,EAAAjF,CAAA,GACOoE,EAAKc,MADZ,CAEIuB,YAAa,GACbD,aAAc,GACdI,YAAa,GACbkB,mBAAmB,IAEnBzH,QAAQC,IAAI,wBAAyBiJ,EAASK,EAAOqB,IAKzD7G,EAAKW,SAAL/E,OAAAiF,EAAA,EAAAjF,CAAA,GACOoE,EAAKc,MADZ,CAEIuB,YAAa8C,EACb/C,aAAcoD,EACdhD,YAAaqE,EACbnD,mBAAmB,IAEjBzH,QAAQC,IAAI,4CAA6CiJ,EAASK,EAAOqB,MAMtF5B,KAAKjF,EAAKyC,cACVyD,MAAM,SAAAqB,GAAG,OAAItL,QAAQC,IAAIqL,MApkBfvH,EA2kBnB0H,UAAY,WACR/J,EAAIuB,cAAc,CACdqG,KAAMvF,EAAKc,MAAMkB,QACjB0D,YAAa1F,EAAKc,MAAMmB,eACxB0F,QAAS,CAAC3H,EAAKc,MAAMc,UAGpBsE,MAAM,SAAAC,GAAK,OAAIlK,QAAQC,IAAIiK,MAllBjBnG,EAqlBnBZ,cArlBmB,eAAAgH,EAAAxK,OAAAsI,EAAA,EAAAtI,CAAAuI,EAAA7H,EAAA8H,KAqlBH,SAAAiC,EAAOrJ,EAAImC,GAAX,OAAAgF,EAAA7H,EAAAgI,KAAA,SAAAgC,GAAA,cAAAA,EAAA9B,KAAA8B,EAAA7B,MAAA,cACZxI,QAAQC,IAAR,qBAAAsC,OAAiCxB,EAAjC,mBAAsDmC,GAD1CmH,EAAA7B,KAAA,EAEN9G,EAAIyB,cAAcpC,EAAImC,GACvB8F,KAAK,SAAAsB,GAEF,OADAtK,QAAQC,IAAI,gCAAiCqK,EAAOpH,MAC7CoH,IAEVL,MAAM,SAAAC,GAAK,OAAIlK,QAAQC,IAAIiK,KAPpB,wBAAAG,EAAAvB,SAAAsB,MArlBG,gBAAA0B,EAAAC,GAAA,OAAA5B,EAAAM,MAAAxG,KAAAyG,YAAA,GAAA3G,EA+lBnByC,WAAa,WACT9E,EAAI2B,YAAY,IAGX2F,KAAK,SAAAgD,GAEF,IAAI9C,EAAU,GACVK,EAAQ,GACRqB,EAAe,GAJLqB,GAAA,EAAAC,GAAA,EAAAC,OAAAnB,EAAA,IAMd,QAAAoB,EAAAC,EAAgBL,EAAS9I,KAAzBiI,OAAAC,cAAAa,GAAAG,EAAAC,EAAA7D,QAAA6C,MAAAY,GAAA,EAA+B,KAAtB7C,EAAsBgD,EAAAlL,MACvBkI,EAAIsC,UAAY3H,EAAKc,MAAMc,SAC3BuD,EAAQN,KAARjJ,OAAAgF,EAAA,EAAAhF,CAAA,GAAgByJ,EAAIC,IAAMD,EAAIE,OAC9BC,EAAMX,KAAKQ,EAAIE,MACfsB,EAAahC,KAAKQ,EAAIK,eAVhB,MAAA6B,GAAAY,GAAA,EAAAC,EAAAb,EAAA,YAAAW,GAAA,MAAAI,EAAAd,QAAAc,EAAAd,SAAA,WAAAW,EAAA,MAAAC,GAgBdjD,EAAQsC,cAASR,GACbjH,EAAKW,SAAS,CACViC,YAAa,GACbD,aAAc,GACdE,YAAa,GACbc,kBAAkB,GAElB1H,QAAQC,IAAI,wBAAyBiJ,EAASK,EAAOqB,IAGzD7G,EAAKW,SAAS,CACViC,YAAauC,EACbxC,aAAc6C,EACd3C,YAAagE,EACblD,kBAAkB,GACnB1H,QAAQC,IAAI,4CAA6CiJ,EAASK,EAAOqB,OAloBzE7G,EAuoBnBuI,UAAY,WACR5K,EAAI4B,eAAeS,EAAKc,MAAMiB,OACzBkD,KAAK,SAAAuD,GAAG,OAAIvM,QAAQC,IAAI,cAAesM,MAzoB7BxI,EAipBnB4Y,aAAe,WACXjb,EAAI+B,UAAU,IAGTuF,KAAK,SAAAuW,GACFvf,QAAQC,IAAI,kBAAmBsf,GAC/B,IAAIC,EAAY,GACVC,EAAS,GACTxY,EAAW,GACXC,EAAW,GACXC,EAAuB,GAEvBwF,EAAO,GACP3F,EAAS,GACT8F,EAAU,GACVrD,EAAc,GACdrC,EAAkB,GAElBwF,EAAS,GACTjD,EAAM,GACNtC,EAAW,GACXqV,EAAW,GACXgD,EAAgB,GAElBxW,EAAU,GAEVyW,EAAc,GAtBNC,GAAA,EAAAC,GAAA,EAAAC,OAAA9U,EAAA,IA8BZ,QAAA+U,EAAAC,EAAgBT,EAAOrc,KAAvBiI,OAAAC,cAAAwU,GAAAG,EAAAC,EAAAxX,QAAA6C,MAAAuU,GAAA,EAA6B,KAApBxW,EAAoB2W,EAAA7e,MACrBkI,EAAIyD,UAAY9I,EAAKc,MAAMiB,QAC3B9F,QAAQC,IAAI,uCAAwCmJ,GACpDoW,EAAU5W,KAAKQ,EAAIoD,UACnBiT,EAAO7W,KAAKQ,EAAIrC,OAChBE,EAAS2B,KAAKQ,EAAInC,UAClBC,EAAS0B,KAAKQ,EAAIlC,UAClBC,EAAqByB,KAAKQ,EAAIjC,sBAE9BwF,EAAK/D,KAAKQ,EAAIuD,MACd3F,EAAO4B,KAAKQ,EAAIpC,QAChB8F,EAAQlE,KAAKQ,EAAI0D,SAEjBrD,EAAYb,KAAKQ,EAAIK,aACrBrC,EAAgBwB,KAAKQ,EAAIhC,iBAEzBwF,EAAOhE,KAAKQ,EAAIwD,QAChBjD,EAAIf,KAAKQ,EAAIO,KACbtC,EAASuB,KAAKQ,EAAI/B,UAClBqV,EAAS9T,KAAKQ,EAAIsT,UAClBgD,EAAc9W,KAAKQ,EAAIsD,cAEvBxD,EAAQN,KAARjJ,OAAAgF,EAAA,EAAAhF,CAAA,GAAgByJ,EAAIC,IAAMD,EAAI0D,UAC9B9M,QAAQC,IAAI,0BAA2BiJ,GACvCyW,EAAY/W,KAAKQ,KAtDb,MAAAkC,GAAAuU,GAAA,EAAAC,EAAAxU,EAAA,YAAAsU,GAAA,MAAAI,EAAAzU,QAAAyU,EAAAzU,SAAA,WAAAsU,EAAA,MAAAC,GAmEZ5W,EAAQsC,cAASR,GACbjH,EAAKW,SAAS,CAEV4Y,eAAgB,GAChBC,YAAa,GACbC,cAAe,GACfC,gBAAiB,GACjBC,eAAgB,GAEhBC,WAAY,GACZC,YAAa,GACbP,UAAW,GACXR,WAAY,GACZgB,UAAW,GAEXC,WAAY,GACZC,UAAW,GACXC,eAAgB,GAChBC,gBAAiB,GACjBC,aAAc,GAEdG,gBAAiB,GACjBF,mBAAoB,GAEpBG,oBAAoB,GAEpBte,QAAQC,IAAI,wBAKhB8D,EAAKW,SAAS,CACV4Y,eAAgBkC,EAChBjC,YAAakC,EACbjC,cAAevW,EACfwW,gBAAiBvW,EACjBwW,eAAgBvW,EAEhBwW,WAAYhR,EACZiR,YAAa5W,EACbqW,UAAWnU,EACX2T,WAAY/P,EACZ+Q,UAAWpU,EAEXqU,WAAYlR,EACZmR,UAAWpU,EACXqU,eAAgB3W,EAChB4W,gBAAiBvB,EACjBwB,aAAc9W,EAEdiX,gBAAiBsB,EACjBxB,mBAAoBuB,EAEpBpB,oBAAoB,GASrBte,QAAQC,IAAI,+CAtxBZ8D,EA6xBnBL,YA7xBmB/D,OAAAsI,EAAA,EAAAtI,CAAAuI,EAAA7H,EAAA8H,KA6xBL,SAAAyD,IAAA,OAAA1D,EAAA7H,EAAAgI,KAAA,SAAAwD,GAAA,cAAAA,EAAAtD,KAAAsD,EAAArD,MAAA,cAAAqD,EAAArD,KAAA,EACJ9G,EAAIgC,YAAYK,EAAKc,MAAMsI,MAAO,CACpCX,SAAUzI,EAAK1E,MAAMoN,OACrBE,KAAM5I,EAAKc,MAAMgD,UACjB+E,OAAQ7I,EAAKc,MAAMpF,aAEnBsK,aAAchG,EAAKc,MAAMY,MACzBiG,QAAS3H,EAAKc,MAAMc,OACpBkH,QAAS9I,EAAKc,MAAMiB,MAEpBgH,QAAS/I,EAAKc,MAAMiI,QACpBrD,YAAa1F,EAAKc,MAAM4E,YACxBE,IAAK5F,EAAKc,MAAM8E,IAEhB3C,OAAQjD,EAAKc,MAAMmC,OACnBC,SAAUlD,EAAKc,MAAMoC,SACrBF,MAAOhD,EAAKc,MAAMkC,MAElBG,SAAUnD,EAAKc,MAAMqC,SACrBC,qBAAsBpD,EAAKc,MAAMsC,qBACjCC,gBAAiBrD,EAAKc,MAAMuC,gBAE5BC,SAAUtD,EAAKc,MAAMwC,SACrBC,aAAcvD,EAAKc,MAAMyC,eAM1B0B,KAAK,SAACgB,GAILhK,QAAQC,IAAI,uBAAwB+J,KAjC9B,cAAA6B,EAAArD,KAAA,EAoCJzE,EAAKJ,gBApCD,wBAAAkI,EAAA/C,SAAA8C,MA7xBK7H,EAy0BnBkc,cAz0BmB,eAAAxE,EAAA9b,OAAAsI,EAAA,EAAAtI,CAAAuI,EAAA7H,EAAA8H,KAy0BH,SAAAuT,EAAO3a,GAAP,OAAAmH,EAAA7H,EAAAgI,KAAA,SAAAsT,GAAA,cAAAA,EAAApT,KAAAoT,EAAAnT,MAAA,cAAAmT,EAAAnT,KAAA,EACN9G,EAAIW,aAAatB,GAClBiI,KAAK,SAAAgB,GAEF,OADAhK,QAAQC,IAAI,2BAA4B+J,EAAI9G,MACrC8G,EAAI9G,KAAK6X,cAUnB9Q,MAAM,SAACqB,GAAD,OAAStL,QAAQC,IAAIqL,KAdpB,wBAAAqQ,EAAA7S,SAAA4S,MAz0BG,gBAAAwE,GAAA,OAAAzE,EAAAhR,MAAAxG,KAAAyG,YAAA,GAAA3G,EA81BnBoc,mBAAqB,aA91BFpc,EAk2BnBqa,eAl2BmBze,OAAAsI,EAAA,EAAAtI,CAAAuI,EAAA7H,EAAA8H,KAk2BF,SAAAiY,IAAA,OAAAlY,EAAA7H,EAAAgI,KAAA,SAAAgY,GAAA,cAAAA,EAAA9X,KAAA8X,EAAA7X,MAAA,cAAA6X,EAAA7X,KAAA,EACP9G,EAAIkC,YAAY,IAGjBoF,KAAK,SAAA0T,GACF1c,QAAQC,IAAI,oBAAqByc,GAEjC,IAAI4D,EAAS,GAAIC,EAAU,GAAIC,EAAS,GACpCC,EAAW,GACXC,EAAe,GAEfC,EAAU,GACV3B,EAAe,GACf4B,EAAe,GACfC,EAAY,GACZ1N,EAAa,GAEbwM,EAAc,GACdmB,EAAiB,GACjB5X,EAAU,GAIdvJ,OAAAsI,EAAA,EAAAtI,CAAAuI,EAAA7H,EAAA8H,KAAC,SAAA4Y,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAhY,EAAA,OAAAlB,EAAA7H,EAAAgI,KAAA,SAAAgZ,GAAA,cAAAA,EAAA9Y,KAAA8Y,EAAA7Y,MAAA,OAAAwY,GAAA,EAAAC,GAAA,EAAAC,OAAAlW,EAAAqW,EAAA9Y,KAAA,EAAA4Y,EACmBzE,EAASxZ,KAD5BiI,OAAAC,YAAA,UAAA4V,GAAAI,EAAAD,EAAA3Y,QAAA6C,KAAA,CAAAgW,EAAA7Y,KAAA,aACYY,EADZgY,EAAAlgB,OAEeiM,QAAUpJ,EAAKc,MAAMsI,MAFpC,CAAAkU,EAAA7Y,KAAA,gBAGW8X,EAAO1X,KAAKQ,EAAIW,cAChBwW,EAAQ3X,KAAKQ,EAAIsC,SACjB8U,EAAO5X,KAAKQ,EAAIyD,SAChB4T,EAAS7X,KAAKQ,EAAI+D,OAN7BkU,EAAA7Y,KAAA,GAOiBkY,EAAa9X,KAAKQ,EAAIgE,WAPvC,QAQWpN,QAAQC,IAAI,gBAAiBygB,GAE7BC,EAAQ/X,KAAKQ,EAAIiE,mBACjB2R,EAAapW,KAAKQ,EAAItC,SACtB8Z,EAAahY,KAAKQ,EAAIkE,YACtBuT,EAAUjY,KAAKQ,EAAImE,QAOnB4F,EAAWvK,KAAKQ,EAAI+J,YAEpBwM,EAAY/W,KAAKQ,GAGjBF,EAAQN,KAARjJ,OAAAgF,EAAA,EAAAhF,CAAA,GAAgByJ,EAAIC,IAAMD,EAAI0D,UAE9BgU,EAAelY,KAAKQ,EAAIqE,eA3BnC,QAAAuT,GAAA,EAAAK,EAAA7Y,KAAA,gBAAA6Y,EAAA7Y,KAAA,iBAAA6Y,EAAA9Y,KAAA,GAAA8Y,EAAAC,GAAAD,EAAA,SAAAJ,GAAA,EAAAC,EAAAG,EAAAC,GAAA,QAAAD,EAAA9Y,KAAA,GAAA8Y,EAAA9Y,KAAA,GAAAyY,GAAA,MAAAG,EAAA5V,QAAA4V,EAAA5V,SAAA,WAAA8V,EAAA9Y,KAAA,IAAA0Y,EAAA,CAAAI,EAAA7Y,KAAA,eAAA0Y,EAAA,eAAAG,EAAAE,OAAA,mBAAAF,EAAAE,OAAA,mBAkCGvhB,QAAQC,IAAI,sBAAuBygB,GAlCtCW,EAAA7Y,KAAA,GA0CSxI,QAAQC,IAAI,6BAA8B6gB,GA1CnD,WA+CGnB,EAAY6B,WAUZtY,EAAQsC,cAASR,GAzDpB,CAAAqW,EAAA7Y,KAAA,gBAAA6Y,EAAA7Y,KAAA,GA0DazE,EAAKW,SAAS,CAChBga,cAAe,GACf+C,eAAgB,GAChBC,cAAe,GACf7C,gBAAiB,GACjBC,oBAAqB,GAErBC,2BAA4B,GAC5BC,aAAc,GACdC,oBAAqB,GACrBC,iBAAkB,GAClBC,kBAAmB,GAEnBE,eAAgB,GAChBsC,mBAAoB,IAEpB3hB,QAAQC,IAAI,wBAAyB0f,IA1EhD,QAAA0B,EAAA7Y,KAAA,wBAAA6Y,EAAA7Y,KAAA,GA6EazE,EAAKW,SAAS,CAChBga,cAAe4B,EACf3B,eAAgB4B,EAChB3B,cAAe4B,EACf3B,gBAAiB4B,EACjB3B,oBAAqB4B,EAErB3B,2BAA4B4B,EAC5B3B,aAAcA,EACdC,oBAAqB2B,EACrB1B,iBAAkB2B,EAClB1B,kBAAmBhM,EAEnBkM,eAAgByB,EAChB1B,mBAAoBO,GAEpB,WACI5b,EAAKc,MAAMua,mBAAmBjE,OAAS,EACjCnb,QAAQC,IAAI,8CAA+C0f,GAC3D3f,QAAQC,IAAI,wBAhGjC,yBAAAohB,EAAAvY,SAAAiY,EAAA,mCAADphB,KAvBK,wBAAA0gB,EAAAvX,SAAAsX,MAl2BErc,EAk+BnBJ,cAl+BmBhE,OAAAsI,EAAA,EAAAtI,CAAAuI,EAAA7H,EAAA8H,KAk+BH,SAAAyZ,IAAA,OAAA1Z,EAAA7H,EAAAgI,KAAA,SAAAwZ,GAAA,cAAAA,EAAAtZ,KAAAsZ,EAAArZ,MAAA,cAAAqZ,EAAArZ,KAAA,EAMN9G,EAAIiC,cAAc,CACpBoG,aAAchG,EAAKc,MAAMY,MACzBiG,QAAS3H,EAAKc,MAAMc,OACpBkH,QAAS9I,EAAKc,MAAMiB,MACpBqH,MAAOpJ,EAAKc,MAAMsI,MAClBC,UAAWrJ,EAAK1E,MAAMoN,OAEtBY,kBAAmB,CAAC,aACpBvG,QAAS/C,EAAKc,MAAMiC,QACpBwG,WAAY,oCACZC,OAAQxJ,EAAK1E,MAAMmO,SAEnB2F,WAAY,CAAE2O,WAAY/d,EAAKc,MAAMpF,cACrCgO,cAAe1J,EAAK1E,MAAMqO,SAE1BX,iBAAkBhJ,EAAKc,MAAMa,QAC7BsH,YAAajJ,EAAKc,MAAMe,SACxBqH,YAAalJ,EAAKc,MAAMkB,QACxB4B,aAAc5D,EAAKc,MAAMiI,UAKxB9D,KAAK,SAACgB,GACHhK,QAAQC,IAAI,yBAA0B+J,GACtCjG,EAAKqa,mBA/BD,wBAAAyD,EAAA/Y,SAAA8Y,MAl+BG7d,EAmhCnBF,cAnhCmB,eAAAke,EAAApiB,OAAAsI,EAAA,EAAAtI,CAAAuI,EAAA7H,EAAA8H,KAmhCH,SAAA6Z,EAAOjhB,EAAImC,GAAX,OAAAgF,EAAA7H,EAAAgI,KAAA,SAAA4Z,GAAA,cAAAA,EAAA1Z,KAAA0Z,EAAAzZ,MAAA,cACZxI,QAAQC,IAAR,kBAAAsC,OAA8BxB,EAA9B,mBAAmDmC,GADvC+e,EAAAzZ,KAAA,EAEN9G,EAAImC,cAAc9C,EAAImC,GACvB8F,KAAK,SAAAsB,GAEF,OADAtK,QAAQC,IAAI,gCAAiCqK,EAAOpH,MAC7CoH,IAEVL,MAAM,SAAAC,GAAK,OAAIlK,QAAQC,IAAI,kBAAmBiK,KAPvC,wBAAA+X,EAAAnZ,SAAAkZ,MAnhCG,gBAAAE,EAAAC,GAAA,OAAAJ,EAAAtX,MAAAxG,KAAAyG,YAAA,GAEf3G,EAAKc,MAAQ,CACTpF,aAAc,IACdgN,OAAQ,GAOR9G,OAAQ,GACRC,SAAU,GAIVE,MAAO,GACPC,QAAS,GAKTP,iBAAkB,GAClBL,kBAAmB,GACnBqC,iBAAkB,GAElBpB,YAAa,GACbD,aAAc,GACdI,YAAa,GAEbI,YAAa,GACbD,aAAc,GACdE,YAAa,GAGb0W,eAAgB,GAChBC,YAAa,GACbC,cAAe,GACfC,gBAAiB,GACjBC,eAAgB,GAEhBC,WAAY,GACZC,YAAa,GACbP,UAAW,GACXR,WAAY,GACZgB,UAAW,GAEXC,WAAY,GACZC,UAAW,GACXC,eAAgB,GAChBC,gBAAiB,GACjBC,aAAc,GAEdC,mBAAoB,GAEpBE,gBAAiB,GAIjB5W,mBAAmB,EACnBC,kBAAkB,EAClB4W,oBAAoB,EAIpBC,cAAe,GAEf6D,mBAAoB,CAAC,OAAQ,gBAAiB,eAAgB,YAAa,WAAY,UACvFC,qBAAsB,CAAC,WAAY,OAAQ,SAAU,MAAO,UAE5D7D,aAAc,CACV,WACA,QACA,WAEA,WACA,uBACA,OAEA,SACA,UACA,cAEA,kBACA,SACA,MAEA,WACA,eACA,UAEA,UACA,WACA,gBAGJhS,SAAU,GACVzF,MAAO,GACPE,UAAU,EACVC,SAAU,GACVC,qBAAsB,GACtBwF,KAAM,YACN3F,OAAQ,GACR8F,QAAS,GACTrD,YAAa,GACbrC,gBAAiB,GACjBwF,OAAQ,GACRjD,IAAK,GACLtC,SAAU,GACVP,QAAS,GACT4F,aAAc,GAMd4V,yBAA0B,CAEtB,qCAMJnV,MAAO,GACPC,UAAW,GACXoP,WAAY,GAEZlP,WAAY,GACZsN,MAAO,GAEP2B,UAAW,GACXkC,UAAW,GACXhR,cAAe1J,EAAK1E,MAAMqO,SAI1BgR,cAAe,GACfC,eAAgB,GAChBC,cAAe,GACfC,gBAAiB,GACjBC,oBAAqB,GAErBC,2BAA4B,GAC5BC,aAAc,GACdC,oBAAqB,GACrBC,iBAAkB,GAClBC,kBAAmB,GAEnBC,mBAAoB,GAEpBC,eAAgB,GAChBkD,gBAAiB,GACjBC,iBAAkB,GAClBC,gBAAiB,GACjBC,qBAAsB,IA3JX3e,mFA+jCf/D,QAAQC,IAAI,wBAAyBgE,KAAKY,OAE1CZ,KAAK8E,0DAIL/I,QAAQC,IAAI,yBAA0BgE,KAAKY,wCAMtC,IAAA8I,EAAA1J,KACG2J,EAAY3J,KAAK5E,MAAjBuO,QACR,OACIxN,EAAAC,EAAAC,cAACqiB,GAAA,EAAD,CAAO9U,UAAWD,EAAQgV,cACtBxiB,EAAAC,EAAAC,cAAA,QAAMuN,UAAWD,EAAQiV,aAAc9U,YAAU,EAACC,aAAa,OAC3D5N,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQK,UACpB7N,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAYC,QAAQ,QAAQN,UAAWD,EAAQQ,WAA/C,yCAEJhO,EAAAC,EAAAC,cAACmO,EAAA,EAAD,CAASZ,UAAWD,EAAQc,UAG5BtO,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQK,UACpB7N,EAAAC,EAAAC,cAACqO,EAAA,EAAD,CAAaR,QAAQ,WAAWN,UAAWD,EAAQgB,aAC/CxO,EAAAC,EAAAC,cAACuO,EAAA,EAAD,CAEI9N,GAAG,wCACH+N,UAAQ,GAHZ,YAMA1O,EAAAC,EAAAC,cAACyO,EAAA,EAAD,CACIC,QAAQ,oDACRjO,GAAI,0CACJkO,IAAK,0CACLV,YAAY,gBACZrN,MACyB,KAArB+C,KAAKY,MAAMY,MAAexB,KAAKY,MAAMY,MAAQ,GAGjDtE,SAAU8C,KAAKgB,iBAKXhB,KAAKY,MAAMM,kBACPlB,KAAKY,MAAMM,kBAAkBgE,IAAI,SAACgG,EAAKjK,GAInC,OAAO9E,EAAAC,EAAAC,cAAE8O,EAAA,EAAF,CACHrO,GAAIpB,OAAO4F,KAAKoI,EAAK9I,MAAMW,iBAAiBN,IAAM,GAElD+J,IAAKE,EACL7F,KAAM6F,EACNjO,MAAOiO,GAENA,KAGP,kBAAMnP,QAAQC,IAAI,+BAAgC0N,EAAK9I,UAKzEzE,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,QAEHsO,UAAQ,EAERxB,UAAWD,EAAQQ,UACnBpN,MAAM,cACNE,MAAO+C,KAAKY,MAAMY,MAClB6J,MAAO,CAAExO,OAAQ,GACjBA,OAAO,SACPS,gBAAiB,CACbC,QAAQ,GAEZ2M,QAAQ,SACRhN,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,SAM9C7D,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQK,UACpB7N,EAAAC,EAAAC,cAACqO,EAAA,EAAD,CAAaR,QAAQ,WACjBN,UAAWD,EAAQgB,aAGnBxO,EAAAC,EAAAC,cAACuO,EAAA,EAAD,CAEI9N,GAAG,qDACH+N,UAAQ,GAHZ,mBAMA1O,EAAAC,EAAAC,cAACyO,EAAA,EAAD,CACIC,QAAQ,qDAERjO,GAAI,+CACJkO,IAAK,+CACLV,YAAY,eAEZpN,SAII8C,KAAKiC,kBAKLjC,KAAKY,MAAMsB,aACPlC,KAAKY,MAAMsB,aAAagD,IAAI,SAACqG,EAAMC,GAG/B,OAAOrP,EAAAC,EAAAC,cAAC8O,EAAA,EAAD,CACHrO,GAAIyO,EACJP,IAAG,kBAAA1M,OAAoBkN,GACvBnG,KAAMkG,EACNtO,MAAOsO,EACPH,WACI1B,EAAK9I,MAAM4C,mBAId+H,KAGJpP,EAAAC,EAAAC,cAAA,aAMrBF,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,SAEHsO,UAAQ,EAERrO,MAAM,aACN6M,UAAWD,EAAQQ,UACnBlN,MAAO+C,KAAKY,MAAMc,OAClB2J,MAAO,CAAExO,OAAQ,GACjBA,OAAO,SACPS,gBAAiB,CACbC,QAAQ,GAEZ2M,QAAQ,SACRhN,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,SAK9C7D,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQK,UACpB7N,EAAAC,EAAAC,cAACqO,EAAA,EAAD,CAAaR,QAAQ,WAAWN,UAAWD,EAAQgB,aAC/CxO,EAAAC,EAAAC,cAACuO,EAAA,EAAD,CAAY9N,GAAG,wCAAwC+N,UAAQ,GAA/D,yBAGA1O,EAAAC,EAAAC,cAACyO,EAAA,EAAD,CACIC,QAAQ,wCACRjO,GAAI,kCACJwN,YAAY,0BAEZpN,SACI8C,KAAKwC,iBAILxC,KAAKY,MAAM6B,aACPzC,KAAKY,MAAM6B,aAAayC,IAAI,SAACoD,EAAKkD,GAC9B,OAAOrP,EAAAC,EAAAC,cAAC8O,EAAA,EAAD,CACHrO,GAAIwL,EACJ0C,IAAKS,KAAKC,SACVrG,KAAMiD,EACNrL,MAAOqL,EACP8C,WACI1B,EAAK9I,MAAM6C,kBAGd6E,KAGJnM,EAAAC,EAAAC,cAAA,aAMrBF,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,QACHsO,UAAQ,EACRxB,UAAWD,EAAQQ,UACnBpN,MAAM,aACNE,MAAO+C,KAAKY,MAAMiB,MAClBwJ,MAAO,CAAExO,OAAQ,GACjBA,OAAO,SACPS,gBAAiB,CAAEC,QAAQ,GAC3BL,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,MACtCkK,QAAQ,YAGhB/N,EAAAC,EAAAC,cAACmO,EAAA,EAAD,CAASZ,UAAWD,EAAQc,UAG5BtO,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQK,UACpB7N,EAAAC,EAAAC,cAACqO,EAAA,EAAD,CAAaR,QAAQ,WAAWN,UAAWD,EAAQgB,aAC/CxO,EAAAC,EAAAC,cAACuO,EAAA,EAAD,CAAY9N,GAAG,0CAA0C+N,UAAQ,GAAjE,SAGA1O,EAAAC,EAAAC,cAACyO,EAAA,EAAD,CACIC,QAAQ,0CACRjO,GAAI,oCACJwN,YAAY,QACZpN,SACI8C,KAAK2Y,mBAKL3Y,KAAKY,MAAMgY,WACP5Y,KAAKY,MAAMgY,WAAW1T,IAAI,SAAC2Z,EAAKrT,GAC5B,OAAOrP,EAAAC,EAAAC,cAAC8O,EAAA,EAAD,CACHrO,GAAI+hB,EACJ7T,IAAKS,KAAKC,SACVrG,KAAMwZ,EACN5hB,MAAO4hB,EACPzT,WACI1B,EAAK9I,MAAMyZ,oBAGdwE,KAGJ1iB,EAAAC,EAAAC,cAAA,aAMrBF,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,QACHsO,UAAQ,EACRrO,MAAM,WACN6M,UAAWD,EAAQQ,UACnBlN,MAAO+C,KAAKY,MAAMsI,MAClBmC,MAAO,CAAExO,OAAQ,GACjBA,OAAO,SACPS,gBAAiB,CACbC,QAAQ,GAEZ2M,QAAQ,YAGhB/N,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQK,UACpB7N,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,UAEHsO,SAAkC,aAAxBpL,KAAK5E,MAAM4a,SACrBrK,WAAS,EACTC,WAAS,EACT7O,MAAM,gBAENE,MAAO+C,KAAKY,MAAMiI,QAElBhM,OAAO,SACPqN,QAAQ,WACRhN,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,MACtCqL,MAAO,CAAExO,OAAQ,KAErBV,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,cACH+N,UAAQ,EACRe,WAAS,EACTD,WAAS,EACTE,KAAK,IACLb,IAAI,4BACJjO,MAAM,oBACNE,MAAO+C,KAAKY,MAAM4E,YAClB6F,MAAO,CAAExO,OAAQ,GACjBA,OAAO,SACPK,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,MACtC1C,gBAAiB,CACbC,QAAQ,GAEZ2M,QAAQ,aAEZ/N,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,OACHsO,UAAQ,EACRrO,MAAM,aACNwN,aAAcvK,KAAKY,MAAM8H,KACzBkB,UAAWD,EAAQQ,UACnBtN,OAAO,SACPqN,QAAQ,WACRhN,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,QAE1C7D,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,SACHsO,UAAQ,EACRrO,MAAM,SACNE,MAAO+C,KAAKY,MAAMpF,aAClBoO,UAAWD,EAAQQ,UACnBtN,OAAO,SACPqN,QAAQ,WACRhN,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,QAS1C7D,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,MACH6O,WAAS,EACT5O,MAAM,MAENE,MAAO+C,KAAKY,MAAM8E,IAElB7I,OAAO,SACPqN,QAAQ,WACRhN,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,MACtCqL,MAAO,CAAExO,OAAQ,KAarBV,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACIvN,GAAG,UACH6O,WAAS,EACTC,WAAS,EACT7O,MAAM,UACNuN,YAAY,gBACZrN,MAAO+C,KAAKY,MAAMiC,QAElBhG,OAAO,SACPqN,QAAQ,WACRhN,SAAU8C,KAAKI,kBAAkBkL,KAAKtL,MACtCqL,MAAO,CAAExO,OAAQ,KAErBV,EAAAC,EAAAC,cAAA,OAAKuN,UAAU,gBACXzN,EAAAC,EAAAC,cAAC0P,EAAA,EAAD,CACI7B,QAAQ,YACR8B,MAAM,YACNpC,UAAWD,EAAQsC,OACnBC,QAAS/P,EAAAC,EAAAC,cAAC8P,EAAA/P,EAAD,mBACTgQ,QACI,WACIrQ,QAAQC,IAAI,+BAAgC0N,EAAK9I,OACjD8I,EAAK9G,eARjB,eAaAzG,EAAAC,EAAAC,cAAC0P,EAAA,EAAD,CACI7B,QAAQ,YACR8B,MAAM,UACNpC,UAAWD,EAAQsC,OACnBC,QAAS/P,EAAAC,EAAAC,cAACgQ,EAAA,EAAD,aACTD,QACI,WACI1C,EAAKjK,gBAPjB,cAmBZtD,EAAAC,EAAAC,cAAA,OAAK6Q,MAAM,OACP/Q,EAAAC,EAAAC,cAACmO,EAAA,EAAD,CAASsU,YAAY,cAGzB3iB,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQoV,cACnB/e,KAAKY,MAAMwa,eAAelE,OAAS,EAC9BlX,KAAKY,MAAMua,mBAAmBjW,IAAI,SAAU8Z,EAAYC,GAEtD,OAAO9iB,EAAAC,EAAAC,cAAC2b,GAAD,CACHhN,IAAKiU,EACLnI,YAAakI,EAAWxV,cAGxBD,SAAUyV,EAAW1V,OACrBgP,UAAW0G,EAAW9P,WAAWC,WACjCoJ,WAAYyG,EAAW5V,kBAAkB,GACzCvG,QAASmc,EAAWnc,YAK1B1G,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,2CAt9CAqC,aAi+CXC,eAAWC,YAjjDX,SAAAC,GAAK,MAAK,CAGrBkS,aAAc,CACVjS,QAAS,OACTC,SAAU,OACVqF,OAAQ,QACRpF,WAAY,cAGhBgS,aAAaljB,OAAAiF,EAAA,EAAAjF,CAAA,CACTgR,QAAS,OACTC,SAAU,OACVC,WAAY,SACZC,QAASJ,EAAMK,QAAQ,EAAG,IACvBL,EAAMM,OAAOC,QALR,CAORC,WAAY,OACZC,MAAO,OACP8E,OAAQ,SAEZ+M,aAAc,CACV7R,MAAO,OACPD,WAAY,OACZiB,YAAa,MACbgR,aAAc,MACdnN,gBAAiB,UAGjBoN,UAAWC,OAAOC,OAAOC,YACzBC,SAAU,OAEVC,UAAWJ,OAAOC,OAAOC,aAE7BnV,UAAW,CACPiD,WAAYX,EAAMK,QAAQ,GAC1BO,YAAaZ,EAAMK,QAAQ,GAC3BI,MAAO,OAGXI,QAAS,CACLC,SAAU,EACVV,QAASJ,EAAMK,QAAQ,IAG3BqK,QAAS,CACLjD,SAAU,YAEdjI,OAAQ,CACJpP,OAAQ4P,EAAMK,QAAQ,IAG1BnC,YAAa,CACT9N,OAAQ4P,EAAMK,QAAQ,GAEtBU,SAAU,OAEdC,YAAa,CACTC,UAAWjB,EAAMK,QAAQ,IAG7BrC,QAAS,CACL5N,OAAQ,iBAGZmQ,QAAQtR,OAAAiF,EAAA,EAAAjF,CAAA,CACJgR,QAAS,OACTE,WAAY,SACZO,eAAgB,WAChBN,QAASJ,EAAMK,QAAQ,EAAG,IACvBL,EAAMM,OAAOC,SAEpBhD,SAAU,CACN0C,QAAS,OACTC,SAAU,OACVQ,eAAgB,gBAChBD,MAAO,UAq+C8B,CAAEU,WAAW,GAAhCpB,CAAwCgM,KC/iD5DiH,GAAS3R,YAAW,SAAArB,GAAK,MAAK,CAChC8F,KAAM,CACF7F,QAAS,QAEbY,QAAS,CACLC,SAAU,EACVV,QAASJ,EAAMK,QAAQ,OAIzB4S,eAEF,SAAAA,EAAYtkB,GAAO,IAAA0E,EAAA,OAAApE,OAAAqE,EAAA,EAAArE,CAAAsE,KAAA0f,IACf5f,EAAApE,OAAAuE,EAAA,EAAAvE,CAAAsE,KAAAtE,OAAAwE,EAAA,EAAAxE,CAAAgkB,GAAAvf,KAAAH,KAAM5E,KAuEVukB,WAAa,WACT7f,EAAKW,SAAS,CAAE4E,KAAM,cACtBua,MAAM,kBA1ES9f,EA6EnB8W,QAAU,WACNnZ,EAAIS,YACA4B,EAAK1E,MAAM+C,OAAS2B,EAAKc,MAAMzC,OAE9B4G,KAAK,SAAAgB,GACFhK,QAAQC,IAAI,qBAAsB+J,EAAI9G,MACtC8G,EAAI9G,KACEa,EAAKW,SAAL/E,OAAAiF,EAAA,EAAAjF,CAAA,GACKoE,EAAKc,MADV,CAEE9D,GAAIiJ,EAAI9G,KAAK,GAAGmG,MAEhBtF,EAAK+f,eAEP9jB,QAAQC,IAAI,yBAA0B+J,EAAI9G,QAEnD+G,MAAM,kBACHlG,EAAKW,SAAS,CACV8P,QAAS,6CA9FNzQ,EAmGnB2E,cAAgB,WACZ3E,EAAKW,SAAS,CAAEgU,WAAY,aACtB3U,EAAKggB,iBArGIhgB,EAwGnBgW,gBAAkB,WACdhW,EAAKW,SAAS,CAAEgU,WAAY,kBAzGb3U,EA4GnBqW,gBAAkB,WACdrW,EAAKW,SAAS,CAAEgU,WAAY,kBA7Gb3U,EAgHnBuW,wBAA0B,WACtBvW,EAAKW,SAAS,CAAEgU,WAAY,0BAjHb3U,EAoHnByW,mBAAqB,WACjBzW,EAAKW,SAAS,CAAEgU,WAAY,qBArHb3U,EAwHnBmW,gBAAkB,WACdnW,EAAKW,SAAS,CAAEgU,WAAY,kBAzHb3U,EA4HnBigB,kBAAoB,SAAC1f,GACjBP,EAAKW,SAAS,CAAExD,MAAOoD,EAAME,OAAOtD,SA7HrB6C,EAgInBkgB,kBAAoB,SAAChV,EAAKiV,GAwCtBngB,EAAKW,SAAL/E,OAAAgF,EAAA,EAAAhF,CAAA,GAAiBsP,EAAMiV,KAxKRngB,EA6LnBogB,cAAgB,SAACC,KA7LErgB,EAoNnBsgB,eAAiB,SAAC/O,GACd5T,EAAIM,WAAW,KArNA+B,EA+OnBuQ,aAAe,SAACC,GACZ7S,EAAIS,YAEAoS,GAAaxQ,EAAKc,MAAMzC,OAEvB4G,KAAK,SAAAgB,GAAG,MAIG,KAARA,EACMjG,EAAKW,SAAS,CAAE3D,GAAMiJ,EAAI9G,KAAK,GAAT,KAAsBlD,QAAQC,IAAI,cAAe+J,EAAI9G,OAE3E,WACElD,QAAQC,IAAI,iBAAkB+J,EAAI9G,MAClCa,EAAKqW,qBAGhBnQ,MAAM,kBACHlG,EAAKW,SAAS,CACV8P,QAAS,6CAlQNzQ,EAuQnBggB,aAAe,WACX9P,KAASW,OAAOS,mBAAmB,SAAAC,GAI/BvR,EAAKW,SAAS,CACV+D,aAAc6M,EACdhM,KAAMgM,EAAKyF,YACX3Y,MAAOkT,EAAKlT,MACZoL,SAAU8H,EAAK9H,SACf8W,cAAehP,EAAKgP,cACpBC,QAASjP,EAAKkP,cAEd,WACIxkB,QAAQC,IAAI,+CACZ8D,EAAK8W,eAtRF9W,EAkSnB+f,YAAc,WACVpiB,EAAIe,UACCuG,KAAK,SAAAC,GAEF,IAAIwb,EAAc,GAAIC,EAAe,GAF3B7Z,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAGV,QAAAC,EAAAC,EAAgBjC,EAAK/F,KAArBiI,OAAAC,cAAAP,GAAAI,EAAAC,EAAA1C,QAAA6C,MAAAR,GAAA,EAA2B,KAAlBsE,EAAkBlE,EAAA/J,MACvBlB,QAAQC,IAAI,QAASkP,GAEjBA,EAAItF,OAAO2B,SAASzH,EAAKc,MAAM9D,MAC/B0jB,EAAY7b,KAAKuG,EAAI9F,KACrBqb,EAAa9b,KAAKuG,EAAI7F,QARpB,MAAAgC,GAAAR,GAAA,EAAAC,EAAAO,EAAA,YAAAT,GAAA,MAAAK,EAAAK,QAAAL,EAAAK,SAAA,WAAAT,EAAA,MAAAC,GAWVhH,EAAKW,SAAL/E,OAAAiF,EAAA,EAAAjF,CAAA,GACOoE,EAAKc,MADZ,CAEI8f,iBAAkBF,EAAYjD,UAC9BoD,mBAAoBF,EAAalD,YAE/B,kBAAMzd,EAAKkC,kBApTVlC,EA6TnBkC,WAAa,WACTvE,EAAIoB,YACA,IAECkG,KAAK,SAAA2B,GAGF,IAAIzB,EAAU,GAAIK,EAAQ,GAAIqB,EAAe,GAAIia,EAAoB,GAAIC,EAAsB,GAE/F9kB,QAAQC,IAAI,cAAe0K,EAASzH,MALtB,IAAA+I,GAAA,EAAAC,GAAA,EAAAC,OAAAnB,EAAA,IAMd,QAAAoB,EAAAC,EAAgB1B,EAASzH,KAAzBiI,OAAAC,cAAAa,GAAAG,EAAAC,EAAA7D,QAAA6C,MAAAY,GAAA,EAA+B,KAAtB7C,EAAsBgD,EAAAlL,MAAA0e,GAAA,EAAAC,GAAA,EAAAC,OAAA9U,EAAA,IAE3B,QAAA+U,EAAAC,EAAkBjc,EAAKc,MAAM8f,iBAA7BxZ,OAAAC,cAAAwU,GAAAG,EAAAC,EAAAxX,QAAA6C,MAAAuU,GAAA,EAA+C,KAAtCna,EAAsCsa,EAAA7e,MAE3ClB,QAAQC,IAAI,aAAcmJ,EAAIW,cAC1BtE,IAAU2D,EAAIW,eACd8a,EAAkBjc,KAAKQ,EAAIC,KAC3Byb,EAAoBlc,KAAKQ,EAAIE,QAPV,MAAAgC,GAAAuU,GAAA,EAAAC,EAAAxU,EAAA,YAAAsU,GAAA,MAAAI,EAAAzU,QAAAyU,EAAAzU,SAAA,WAAAsU,EAAA,MAAAC,KANjB,MAAAxU,GAAAY,GAAA,EAAAC,EAAAb,EAAA,YAAAW,GAAA,MAAAI,EAAAd,QAAAc,EAAAd,SAAA,WAAAW,EAAA,MAAAC,GA8BdjD,EAAQsC,cAASR,GACbjH,EAAKW,SAAL/E,OAAAiF,EAAA,EAAAjF,CAAA,GACOoE,EAAKc,MADZ,CAEIuB,YAAa,GACbD,aAAc,GACdI,YAAa,GACbse,kBAAmB,GACnBC,oBAAqB,KAGrB9kB,QAAQC,IAAI,wBAAyBiJ,EAASK,EAAOqB,IAKzD7G,EAAKW,SAAL/E,OAAAiF,EAAA,EAAAjF,CAAA,GACOoE,EAAKc,MADZ,CAEIuB,YAAa8C,EACb/C,aAAcoD,EACdhD,YAAaqE,EAEbia,kBAAmBA,EAAkBrD,UACrCsD,oBAAqBA,EAAoBtD,YAMvC,kBAAMzd,EAAK4Y,mBAIxB1S,MAAM,SAAAqB,GAAG,OAAItL,QAAQC,IAAIqL,MA/XfvH,EAqYnB4Y,aAAe,WACXjb,EAAI+B,UAAU,IAGTuF,KAAK,SAAAuW,GAGF,IAEIwF,EAAkB,GAAIC,EAAoB,GALlChE,GAAA,EAAAC,GAAA,EAAAC,OAAAlW,EAAA,IAMZ,QAAAoW,EAAAD,EAAgB5B,EAAOrc,KAAvBiI,OAAAC,cAAA4V,GAAAI,EAAAD,EAAA3Y,QAAA6C,MAAA2V,GAAA,EAA6B,KAApB5X,EAAoBgY,EAAAlgB,MACrB6C,EAAKc,MAAM8f,iBAAiBnZ,SAASpC,EAAIW,gBACzCgb,EAAgBnc,KAAKQ,EAAIC,KACzB2b,EAAkBpc,KAAKQ,EAAI0D,WATvB,MAAAxB,GAAA2V,GAAA,EAAAC,EAAA5V,EAAA,YAAA0V,GAAA,MAAAG,EAAA5V,QAAA4V,EAAA5V,SAAA,WAAA0V,EAAA,MAAAC,GAGE,GAaN1V,cAASR,GACbjH,EAAKW,SAAS,GAEV1E,QAAQC,IAAI,wBAGhB8D,EAAKW,SAAL/E,OAAAiF,EAAA,EAAAjF,CAAA,GACOoE,EAAKc,MADZ,CAEIkgB,gBAAiBA,EAAgBvD,UACjCwD,kBAAmBA,EAAkBxD,YAGrC,WACIxhB,QAAQC,IAAI,2CACZ8D,EAAKqa,sBAvaVra,EAgbnBqa,eAhbmBze,OAAAsI,EAAA,EAAAtI,CAAAuI,EAAA7H,EAAA8H,KAgbF,SAAAC,IAAA,OAAAF,EAAA7H,EAAAgI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACP9G,EAAIkC,YAAY,IAIjBoF,KAAK,SAAA0T,GACF1c,QAAQC,IAAI,oBAAqByc,GACjC,IAAI1J,EAAiB,GAFPiS,GAAA,EAAAC,GAAA,EAAAC,OAAAna,EAAA,IAGd,QAAAoa,EAAAC,EAAoB3I,EAASxZ,KAA7BiI,OAAAC,cAAA6Z,GAAAG,EAAAC,EAAA7c,QAAA6C,MAAA4Z,GAAA,EAAmC,KAA1Bne,EAA0Bse,EAAAlkB,MAC3B6C,EAAKc,MAAM8f,iBAAiBnZ,SAAS1E,EAAQiD,eAC7CiJ,EAAepK,KAAK9B,IALd,MAAAwE,GAAA4Z,GAAA,EAAAC,EAAA7Z,EAAA,YAAA2Z,GAAA,MAAAI,EAAA9Z,QAAA8Z,EAAA9Z,SAAA,WAAA2Z,EAAA,MAAAC,GAWdphB,EAAKW,SAAL/E,OAAAiF,EAAA,EAAAjF,CAAA,GACOoE,EAAKc,MADZ,CAEIygB,sBAAuBtS,EAAewO,eAlBrC,wBAAAlZ,EAAAQ,SAAAV,MA7abrE,EAAKwhB,YAAc,WACfxhB,EAAKW,SAAS,SAAAG,GAAK,MAAK,MAQ5Bd,EAAKc,MAAQ,CACT6T,WAAY,YACZjQ,YAAY,EAGZ1H,GAAI,GACJqB,MAAO,GACPkH,KAAM,GACN2Q,SAAU,YAQVtN,KAAM,YACN5C,aAAc,GACd2B,QAAS,GACToB,QAAS,GACTrD,YAAa,GACb3C,QAAS,GACTC,MAAO,GAGP4C,IAAK,GACL3C,OAAQ,GACRC,SAAU,GACVC,SAAU,GACVC,qBAAsB,GACtBC,gBAAiB,GACjBwT,MAAO,GACPtT,aAAc,GAIdqd,iBAAkB,GAClBE,kBAAmB,GACnBE,gBAAiB,GAEjBH,mBAAoB,GACpBE,oBAAqB,GACrBE,kBAAmB,GAEnBM,sBAAuB,IAI3BvhB,EAAK8W,QAAU9W,EAAK8W,QAAQtL,KAAb5P,OAAA6lB,EAAA,EAAA7lB,QAAA6lB,EAAA,EAAA7lB,CAAAoE,KACfA,EAAKogB,cAAgBpgB,EAAKogB,cAAc5U,KAAnB5P,OAAA6lB,EAAA,EAAA7lB,QAAA6lB,EAAA,EAAA7lB,CAAAoE,KACrBA,EAAKgW,gBAAkBhW,EAAKgW,gBAAgBxK,KAArB5P,OAAA6lB,EAAA,EAAA7lB,QAAA6lB,EAAA,EAAA7lB,CAAAoE,KACvBA,EAAK2E,cAAgB3E,EAAK2E,cAAc6G,KAAnB5P,OAAA6lB,EAAA,EAAA7lB,QAAA6lB,EAAA,EAAA7lB,CAAAoE,KACrBA,EAAKkgB,kBAAoBlgB,EAAKkgB,kBAAkB1U,KAAvB5P,OAAA6lB,EAAA,EAAA7lB,QAAA6lB,EAAA,EAAA7lB,CAAAoE,KAhEVA,iFA2cD1E,GAEd4E,KAAK8f,eACL/jB,QAAQC,IAAI,qBAAsBgE,KAAKY,oDA0BvC7E,QAAQC,IAAI,0BAA2BgE,KAAKY,wCAoB5C,IACI4gB,EADEC,EAAUzhB,KAAKY,MAAM6T,WAiE3B,MA9DgB,cAAZgN,EACAD,EAAOrlB,EAAAC,EAAAC,cAACqlB,EAAD,CACH/R,SAAU3P,KAAKY,MAAM8f,iBAAiBxJ,OACtCtH,UAAW5P,KAAKY,MAAMggB,kBAAkB1J,OACxCrH,WAAY7P,KAAKY,MAAMkgB,gBAAgB5J,OACvCnI,eAAgB/O,KAAKY,MAAMygB,sBAE3BM,SAAU3hB,KAAKY,MAAM+f,mBACrBiB,UAAW5hB,KAAKY,MAAMigB,oBACtBgB,cAAe7hB,KAAKY,MAAMmgB,oBAGX,iBAAZU,EACPD,EAAOrlB,EAAAC,EAAAC,cAACylB,EAAD,CACHzW,MAAO,CAACoU,GAAOnS,SAEfjI,KAAMrF,KAAKY,MAAMyE,KACjBlH,MAAO6B,KAAKY,MAAMzC,MAClBuK,KAAM1I,KAAKY,MAAM8H,KACjBF,OAAQxI,KAAKY,MAAM9D,GACnByM,SAAUvJ,KAAKY,MAAM2I,SACrB/E,WAAYxE,KAAKY,MAAM4D,WACvBwb,kBAAmBhgB,KAAKggB,kBACxBvb,cAAezE,KAAKyE,gBAGP,iBAAZgd,EACLD,EAAOrlB,EAAAC,EAAAC,cAAC0lB,GAAD,CACHjlB,GAAIkD,KAAKY,MAAM9D,GACfuI,KAAMrF,KAAKY,MAAMyE,KACjBlH,MAAO6B,KAAKY,MAAMzC,MAClB6X,SAAUhW,KAAKY,MAAMoV,SACrBzM,SAAUvJ,KAAKY,MAAM2I,SACrB/E,WAAYxE,KAAKY,MAAM4D,aAGV,yBAAZid,EACLD,EAAOrlB,EAAAC,EAAAC,cAAC2lB,GAAD,CACHllB,GAAIkD,KAAKY,MAAM9D,GACfuI,KAAMrF,KAAKY,MAAMyE,KACjBlH,MAAO6B,KAAKY,MAAMzC,MAClB6X,SAAUhW,KAAKY,MAAMoV,SACrBxR,WAAYxE,KAAKY,MAAM4D,aAGV,oBAAZid,EACLD,EAAOrlB,EAAAC,EAAAC,cAAC4lB,GAAD,CACHnlB,GAAIkD,KAAKY,MAAM9D,GACf0H,WAAYxE,KAAKY,MAAM4D,WACvBC,cAAezE,KAAKyE,gBAGP,iBAAZgd,IACLD,EAAOrlB,EAAAC,EAAAC,cAAC6lB,GAAD,CACH1Z,OAAQxI,KAAKY,MAAM9D,GACnB2M,SAAUzJ,KAAKY,MAAMyE,KACrBkE,SAAUvJ,KAAKY,MAAM2I,SACrB/E,WAAYxE,KAAKY,MAAM4D,WACvBC,cAAezE,KAAKyE,iBAKxBtI,EAAAC,EAAAC,cAAA,WAEIF,EAAAC,EAAAC,cAACF,EAAAC,EAAMgO,SAAP,KACKrO,QAAQC,IAAI,kBAAmBgE,KAAKY,OAErCzE,EAAAC,EAAAC,cAAC8lB,GAAD,CACI1N,WAAYzU,KAAKY,MAAM6T,WACvBpP,KAAMrF,KAAKY,MAAMyE,KACjB2Q,SAAUhW,KAAKY,MAAMoV,SACrB2J,WAAY3f,KAAK2f,WACjBO,cAAelgB,KAAKkgB,cACpBzb,cAAezE,KAAKyE,cACpBqR,gBAAiB9V,KAAK8V,gBACtBK,gBAAiBnW,KAAKmW,gBACtBE,wBAAyBrW,KAAKqW,wBAC9BE,mBAAoBvW,KAAKuW,mBACzBN,gBAAiBjW,KAAKiW,iBAIrBuL,YAplBGlV,aA6lBbE,eAAWiT,GAAXjT,CAAmBkT,IChlB5B7R,GAAYC,YAAW,SAAArB,GAAK,IAAA2V,EAAA,MAAK,CACrCC,KAAM,CACJ3V,QAAS,OACT4V,cAAe,UAEjB/P,KAAM,CACJhF,SAAU,EACVqH,KAAM,YAIR2N,KAAM,CACJvQ,OAAQ,OAER4C,KAAM,WACNlI,QAAS,OACTS,eAAgB,SAChBP,WAAY,SACZmF,gBAAiBtF,EAAM+V,QAAQC,WAAWrN,MAC1CpJ,MAA8B,UAAvBS,EAAM+V,QAAQ9Z,KAAmB+D,EAAM+V,QAAQ3M,QAAQ6M,KAAOjW,EAAM+V,QAAQ3M,QAAQwM,MAE7FlC,KAAM,CACJzT,QAAS,OACT4V,cAAe,SACf1V,WAAY,SACZO,eAAgB,UAElBwH,OAAKyN,EAAA,CAEHO,WAAY,QACZ5K,WAAYtL,EAAMmW,WAAWC,gBAH1BnnB,OAAAgF,EAAA,EAAAhF,CAAA0mB,EAIF3V,EAAMuB,YAAYC,KAAK,MAAQ,CAC9BS,SAAU,GACVoU,cAAe,OACfH,WAAY,UAPXjnB,OAAAgF,EAAA,EAAAhF,CAAA0mB,EAAA,aASS,UATTA,GAWLW,GAAGrnB,OAAAgF,EAAA,EAAAhF,CAAA,CACDwS,YAAgC,EAAnBzB,EAAMK,QAAQ,GAC3BoS,aAAiC,EAAnBzS,EAAMK,QAAQ,GAC5BY,UAAWjB,EAAMK,QAAQ,GACzBgF,SAAU,IACVkR,UAAW,UACVvW,EAAMuB,YAAYC,KAAK,MAAQ,CAC9BS,SAAU,KAGdpB,QAAQ5R,OAAAgF,EAAA,EAAAhF,CAAA,CACNsW,OAAQ,QAEPvF,EAAMuB,YAAY2F,GAAG,MAAQ,CAC5B1G,WAAYR,EAAMK,QAAQ,KAG9Bb,OAAQ,CACNyB,UAA8B,EAAnBjB,EAAMK,QAAQ,GACzBM,WAA+B,EAAnBX,EAAMK,QAAQ,GAC1BO,YAAgC,EAAnBZ,EAAMK,QAAQ,IAM7BmW,KAAM,CACJjX,MAAO,YACPnP,OAAM,GAAAyB,OAAwB,EAAnBmO,EAAMK,QAAQ,GAAnB,SAAAxO,OAAoD,EAAnBmO,EAAMK,QAAQ,GAA/C,MACNI,MAAO,OACP8E,OAAQ,OACRmN,UAAW,KAEb+D,MAAO,CACLpR,SAA6B,IAAnBrF,EAAMK,QAAQ,GACxBjQ,OAAQ,QAEVsmB,KAAM,CACJtW,QAAO,GAAAvO,OAAwB,EAAnBmO,EAAMK,QAAQ,GAAnB,OAAAxO,OAAkD,EAAnBmO,EAAMK,QAAQ,GAA7C,OAETsW,SAAU,CACRzV,aAAclB,EAAMK,QAAQ,IAE9BuW,gBAAiB,GACjBtV,aAAarS,OAAAgF,EAAA,EAAAhF,CAAA,CACXmR,QAAS,GACTH,QAAS,OACTS,eAAgB,eAChBR,SAAU,QACTF,EAAMuB,YAAYC,KAAK,MAAQ,CAC9Bf,MAAO,OACPL,QAAS,EACTI,WAAY,KAGhBkB,KAAKzS,OAAAgF,EAAA,EAAAhF,CAAA,CACH8R,SAAU,IAEVsE,SAAU,MACVjV,OAAQ,IACP4P,EAAMuB,YAAYC,KAAK,MAAQ,CAC9Bf,MAAO,OACPrQ,OAAQ,EACR6Q,UAAW,IAGfa,OAAQ,CACN7B,QAAS,eACT7P,OAAQ,QACR2R,UAAW,cAEbC,UAAW,CACTd,aAAc,GACde,SAAU,IAEZC,IAAK,CACHhB,aAAc,OA2WH2V,eApWb,SAAAA,IAAc,IAAAxjB,EAAA,OAAApE,OAAAqE,EAAA,EAAArE,CAAAsE,KAAAsjB,IACZxjB,EAAApE,OAAAuE,EAAA,EAAAvE,CAAAsE,KAAAtE,OAAAwE,EAAA,EAAAxE,CAAA4nB,GAAAnjB,KAAAH,QA0DFujB,eAAiB,SAAAC,GAA2B,IAAxB/M,EAAwB+M,EAAxB/M,SAAagN,EAAW/nB,OAAAgoB,EAAA,EAAAhoB,CAAA8nB,EAAA,cAC1C,OACErnB,EAAAC,EAAAC,cAAC4V,EAAA,EAADvW,OAAAioB,OAAA,GACMF,EADN,CAEEG,OAAQnN,MA/DA3W,EAuGd+jB,mBAAqB,WACnB,IAAInf,EAAUof,cAEd,OAAOhkB,EAAKikB,eAAeC,gBACzB7nB,EAAAC,EAAAC,cAAA,oBACW,IACTF,EAAAC,EAAAC,cAAA,UACE+P,QAAS,WACPtM,EAAKikB,eAAeE,QAAQ,kBAAMvf,EAAQC,KAAK,SAFnD,aASAxI,EAAAC,EAAAC,cAAA,oCAtHQyD,EA+IdokB,YAAc,SAAA7I,GAES,IAArB3W,EAAqB2W,EAArB3W,QACMiF,GADe0R,EAAZ5O,MACOoB,MAmBhB,OANA/R,oBAAU,YAZW,WACnB,IACE,IAAMkP,EAAMtP,OAAO4F,KAAK6iB,cAAcC,KAAK,SAAAC,GAAC,OAAIA,EAAEC,MAAM,kBAClDrlB,EAAOslB,KAAKtV,MAAMkV,aAAaK,QAAQxZ,IACvC2F,EAAO4T,KAAKtV,MAAMhQ,EAAK0R,MAE7B,OAAOA,GAAQA,EAAK8T,aACpB,MAAOC,GACP,OAAO,IAKLD,IACF/f,EAAQC,KAAK,aAKfxI,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQ0Y,MAQtBlmB,EAAAC,EAAAC,cAAC4X,EAAA,EAAD,CAAQC,SAAS,UAEf/X,EAAAC,EAAAC,cAAC+X,GAAA,EAAD,CAASM,gBAAc,GACrBvY,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAYC,QAAQ,KAAKN,UAAWD,EAAQgL,OAA5C,2BAGAxY,EAAAC,EAAAC,cAAA,OAAKgP,MAAO,CAAEuJ,KAAM,KACpBzY,EAAAC,EAAAC,cAACwY,GAAA,EAAD,CAAS/X,GAAG,gBAAgB6X,MAAM,WAChCxY,EAAAC,EAAAC,cAACgY,GAAA,EAAD,CACEhP,KAAK,SACLjI,aAAW,UACX4O,MAAM,UACNI,QAAS,WACP1H,EAAQC,KAAK,gBAEfoQ,IAAI,YAEJ5Y,EAAAC,EAAAC,cAAC2Y,GAAA5Y,EAAD,QAGJD,EAAAC,EAAAC,cAACwY,GAAA,EAAD,CAAS/X,GAAG,gBAAgB6X,MAAM,qBAChCxY,EAAAC,EAAAC,cAACgY,GAAA,EAAD,CACEhP,KAAK,SACLjI,aAAW,cACX4O,MAAM,UACNiJ,KAAK,qDACL1U,OAAO,SACPwU,IAAI,YAEJ5Y,EAAAC,EAAAC,cAAC6Y,EAAA9Y,EAAD,UAORD,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQ4I,MACtBpW,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQ4Y,MACtBpmB,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQ2D,SAGtBnR,EAAAC,EAAAC,cAACsoB,GAAAvoB,EAAD,CAAsB+b,IAAI,mBAAmBvO,UAAWD,EAAQsZ,OAChE9mB,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQwW,MACtBhkB,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CACEC,QAAQ,KACR0a,MAAM,SACNlV,UAAU,KACV1D,MAAM,UACNqM,cAAY,EACZzO,UAAWD,EAAQgL,OAElB,yBAEHxY,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAYC,QAAQ,KAAKwF,UAAU,KAAK1D,MAAM,UAAUqM,cAAY,EAACzO,UAAWD,EAAQoZ,IACrF,6DAGH5mB,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQmC,aACtB3P,EAAAC,EAAAC,cAAC0P,EAAA,EAAD,CACEK,QAAS,WAEP1H,EAAQC,KAAK,iBAEfiF,UAAWD,EAAQsC,OACnB/B,QAAQ,WACR8B,MAAM,WAEL,mBAEH7P,EAAAC,EAAAC,cAAC0P,EAAA,EAAD,CACEK,QAAS,WAEP1H,EAAQC,KAAK,gBAEfiF,UAAWD,EAAQsC,OACnB/B,QAAQ,WACR8B,MAAM,WAEL,sBAKP7P,EAAAC,EAAAC,cAAA,OAAKuN,UAAWD,EAAQoE,cACtB5R,EAAAC,EAAAC,cAACmT,EAAA,EAAD,CAAM5F,UAAWD,EAAQwE,MACvBhS,EAAAC,EAAAC,cAACoT,EAAA,EAAD,KACEtT,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAYC,QAAQ,KAAKwF,UAAU,MAAnC,qBAGAvT,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAYuK,QAAQ,EAAOxI,MAAM,iBAC/B7P,EAAAC,EAAAC,cAAA,WADF,6CAGEF,EAAAC,EAAAC,cAAA,WAHF,8CAKEF,EAAAC,EAAAC,cAAA,WALF,oEASFF,EAAAC,EAAAC,cAACwoB,EAAA,EAAD,KACE1oB,EAAAC,EAAAC,cAAC0P,EAAA,EAAD,CACE+Y,KAAK,QACL1Y,QAAS,WACP1H,EAAQC,KAAK,iBAHjB,iBAYJxI,EAAAC,EAAAC,cAACmT,EAAA,EAAD,CAAM5F,UAAWD,EAAQwE,MACvBhS,EAAAC,EAAAC,cAACoT,EAAA,EAAD,KACEtT,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAYC,QAAQ,KAAKwF,UAAU,MAAnC,mCAGAvT,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,KAAa,oCACb9N,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAYL,UAAWD,EAAQgF,IAAK3C,MAAM,iBACvC,IADH,+DAE+D,IAC7D7P,EAAAC,EAAAC,cAAA,WACC,IAJH,kBAKkB,IAChBF,EAAAC,EAAAC,cAAA,WACC,IAPH,gCAQgC,MAGlCF,EAAAC,EAAAC,cAACwoB,EAAA,EAAD,KACE1oB,EAAAC,EAAAC,cAAC0P,EAAA,EAAD,CACE+Y,KAAK,QACL1Y,QAAS,WACGgT,OAAOrL,KAAK,qDAAsD,UACxEgR,UAJR,sBAjTJjlB,EAsUdqR,kBAAoB,aAtUNrR,EA2UdwR,mBAAqB,aAvUnBxR,EAAKklB,QAAUllB,EAAKklB,QAAQ1Z,KAAb5P,OAAA6lB,EAAA,EAAA7lB,QAAA6lB,EAAA,EAAA7lB,CAAAoE,KAIfA,EAAKc,MAAQ,CACXojB,iBAAiB,GATPlkB,yEA4BZE,KAAKS,SAAS,CACZujB,iBAAiB,IAEnBpE,MAAM,yDAKN5f,KAAKS,SAAS,CACZujB,iBAAiB,IAEnBpE,MAAM,0DAIN5f,KAAKS,SAAS,CACZujB,iBAAiB,qCAqSnB,OACE7nB,EAAAC,EAAAC,cAAC4oB,EAAA,EAAD,KACE9oB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4V,EAAA,EAAD,KACE9V,EAAAC,EAAAC,cAAC4V,EAAA,EAAD,CAAOiT,OAAK,EAACC,KAAK,IAAIzV,UAAW1P,KAAKkkB,cACtC/nB,EAAAC,EAAAC,cAAC4V,EAAA,EAAD,CAAOiT,OAAK,EAACC,KAAK,cAAcH,QAAShlB,KAAKglB,QAAStV,UAAWU,KAClEjU,EAAAC,EAAAC,cAAC4V,EAAA,EAAD,CAAOiT,OAAK,EAACC,KAAK,eAAezV,UAAW7P,IAC5C1D,EAAAC,EAAAC,cAAC4V,EAAA,EAAD,CAAOiT,OAAK,EAACC,KAAK,aAAazV,UAAWd,IAC1CzS,EAAAC,EAAAC,cAAC4V,EAAA,EAAD,CAAOiT,OAAK,EAACC,KAAK,kBAChBhpB,EAAAC,EAAAC,cAAC+oB,GAAD,iBA7VI9Y,aC9JZ+Y,GAAcC,QACW,cAA7BlG,OAAOmG,SAASC,UAEe,UAA7BpG,OAAOmG,SAASC,UAEhBpG,OAAOmG,SAASC,SAASlB,MACvB,2DA6BN,SAASmB,GAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACT3gB,KAAK,SAAA+gB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBplB,QACf+kB,UAAUC,cAAcO,WAK1BpqB,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBgK,MAAM,SAAAC,GACLlK,QAAQkK,MAAM,4CAA6CA,KCjEjEmgB,IAASxC,OAAOznB,EAAAC,EAAAC,cAACgqB,GAAD,MAASC,SAASC,eAAe,SDelC,WACb,GAA6C,kBAAmBZ,UAAW,CAGzE,GADkB,IAAI7M,IAAI0N,GAAwBpH,OAAOmG,UAC3CkB,SAAWrH,OAAOmG,SAASkB,OAIvC,OAGFrH,OAAOsH,iBAAiB,OAAQ,WAC9B,IAAMhB,EAAK,GAAApnB,OAAMkoB,GAAN,sBAEPnB,GAwCV,SAAiCK,GAE/BiB,MAAMjB,GACH3gB,KAAK,SAAA6hB,GAGkB,MAApBA,EAAS7jB,SACuD,IAAhE6jB,EAASC,QAAQhpB,IAAI,gBAAgBsD,QAAQ,cAG7CwkB,UAAUC,cAAckB,MAAM/hB,KAAK,SAAA+gB,GACjCA,EAAaiB,aAAahiB,KAAK,WAC7Bqa,OAAOmG,SAASyB,aAKpBvB,GAAgBC,KAGnB1f,MAAM,WACLjK,QAAQC,IACN,mEA5DAirB,CAAwBvB,GAGxBD,GAAgBC,MCjCxBwB","file":"static/js/main.cc142c8f.chunk.js","sourcesContent":["import 'date-fns';\nimport React, {\n    // useState,\n    useEffect\n} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardTimePicker,\n    KeyboardDatePicker,\n} from '@material-ui/pickers';\n\nexport default function DateTimePicker(props) {\n    const [selectedDate, setSelectedDate] = React.useState(props.selectedDate);\n    const { handleDateChange } = props;\n\n    useEffect(() => {\n        console.log(' Picker received props', props);\n        handleDateChange(selectedDate);\n    }, [selectedDate, handleDateChange])\n\n    const handleChange = date => {\n        setSelectedDate(date);\n    };\n\n    return (\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <Grid container justify=\"space-around\">\n                <KeyboardDatePicker\n                    margin=\"normal\"\n                    id=\"date-picker-dialog\"\n                    label=\"Date of Discovery\"\n                    format=\"MM/dd/yyyy\"\n                    value={selectedDate}\n                    onChange={\n                        handleChange\n                    }\n                    KeyboardButtonProps={{\n                        'aria-label': 'change date',\n                    }}\n                    showTodayButton\n                    InputLabelProps={{ // Prevent label from appearing as placeholder\n                        shrink: true,\n                    }}\n                />\n                <KeyboardTimePicker\n                    margin=\"normal\"\n                    id=\"time-picker\"\n                    label=\"Time of Discovery\"\n                    value={selectedDate}\n                    onChange={\n                        handleChange\n                    }\n                    KeyboardButtonProps={{\n                        'aria-label': 'change time',\n                    }}\n                    // showTodayButton\n                    InputLabelProps={{ // Prevent label from appearing as placeholder\n                        shrink: true,\n                    }}\n                />\n            </Grid>\n        </MuiPickersUtilsProvider>\n    );\n}","import axios from \"axios\";\n\nexport default {\n  // ok\n  getUsers: function (q) {\n    console.log(`\\n getUsers is querying for : `, q);\n    return axios.get(\"/api/users\", { params: { q } });\n  },\n\n  // ok, I think?\n  createUser: function (userData) {\n    // console.log(`\\n createUser is attempting to save : `, userData);\n    return axios.post(\"/api/users\", userData);\n  },\n\n  // params search required key and value.\n  // key of email and value of address is like\n  // http://localhost:3000/api/users?email=dudkny@gmail.com\n\n  // missing explicit param turn it into \"query\" like\n  // ... /api/users?q=dudkny@gmail.com\n\n  // http://localhost:3000/api/users?email=dudkny@gmail.com\n  findOneUser: function (email) {\n    console.log(`\\n API findOneUser : `, email);\n    return axios.get(\"/api/users\", { params: { email } });\n    // Must wrap params as above. Below does not work.\n    // console.log(`\\n findOneUser is querying for : `, email);\n    // return axios.get(\"/api/users\", email);\n  },\n\n  findUserById: function (id) {\n    console.log(`\\n API findUserById w/ id: `, id);\n    return axios.get(\"/api/users/\" + id);\n  },\n\n  // syntax FYI\n  // delete(function (req, res, next) {\n  //   //Only allow deleting user without an entry\n  //   entryModel.findOne({\n  //     author: req.params.userId\n  //   }, function (err, resp) {\n  //     if (err) return next(err);\n  //     if (typeof resp === 'object') {\n  //       err = new Error(\"This user owns entries, remove the entries first\");\n  //       err.status = 412; //precondition failed\n  //       return next(err);\n  //     }\n  //   })\n  // }\n\n  // Deletes the saved user with the given id\n  deleteUser: function (id) {\n    console.log(`\\n deleteUser is attempting to delete : ${id}`);\n    return axios.delete(\"/api/users/\" + id);\n  },\n\n  // ORG\n\n  getOrgs: function (q) {\n    console.log(`\\n API getOrgs : `, q);\n    return axios.get(\"/api/orgs\", { params: { q } });\n  },\n\n  // oks\n  createOrganization: function (orgData) {\n    console.log('API create org');\n    return axios.post(\"/api/orgs\", orgData);\n  },\n\n  // Project\n\n  // test after creating version.\n  // this is object in form of { name: this.name }\n  createProject: function (projData) {\n    console.log('API create project', projData);\n    return axios.post(\"/api/projects\", projData);\n  },\n\n  // works\n  getProjects: function (q) {\n    console.log('API get projects :', q);\n    return axios.get(\"/api/projects\", { params: { q } });\n  },\n\n  updateProject: function (id, projData) {\n    console.log(`\\n API updateProject w/ id: `, id);\n    return axios.put(\"/api/projects/\" + id, projData);\n  },\n\n  // Version //\n\n  createVersion: function (data) {\n    console.log('API create version', data);\n    return axios.post(\"/api/versions\", data);\n  },\n\n  updateVersion: function (id, verData) {\n    console.log(`\\n API updateVersion w/ id: `, id);\n    return axios.put(\"/api/versions/\" + id, verData);\n  },\n\n  getVersions: function (q) {\n    console.log(`\\n API getVersions : `, q);\n    return axios.get(\"/api/versions\", { params: { q } });\n  },\n\n  findOneVersion: function (id) {\n    console.log(`\\n API find one version : `, id);\n    return axios.get(\"/api/versions\", { params: { id } });\n  },\n\n  // Issue //\n\n  createIssue: function (issueData) {\n    console.log(`\\n API create issue : `, issueData);\n    return axios.post(\"/api/issues\", issueData);\n  },\n\n  getIssues: function (q) {\n    console.log(`\\n API getIssues : ${q}`);\n    return axios.get(\"/api/issues\", { params: { q } });\n  },\n\n  updateIssue: function (id, data) {\n    console.log(`\\n API updateIssue w/ id: `, id);\n    return axios.put(\"/api/issues/\" + id, data);\n  },\n\n  // Comment //\n\n  createComment: function (data) {\n    console.log(`\\n API create comment : `, data);\n    return axios.post(\"/api/comments\", data);\n  },\n\n  getComments: function (q) {\n    console.log(`\\n API getComments : ${q}`);\n    return axios.get(\"/api/comments\", { params: { q } });\n  },\n\n  updateComment: function (id, data) {\n    console.log(`\\n API updateComment w/ id: `, id);\n    return axios.put(\"/api/comments/\" + id, data);\n  }\n};","// React\nimport React\n, {\n    Component,\n    // useState\n}\n    from 'react';\nimport { withRouter } from 'react-router-dom';\n\n// Material UI\nimport {\n    // makeStyles, // used in functional component\n    // useStyles, // Stateful Components cannot use Hooks such as useStyles.\n    withStyles\n} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { Divider } from '@material-ui/core';\n// import Grid from '@material-ui/core/Grid';\n// import {\n//     MuiPickersUtilsProvider,\n//     KeyboardTimePicker,\n//     KeyboardDatePicker,\n// } from '@material-ui/pickers';\nimport 'date-fns';\n// import DateFnsUtils from '@date-io/date-fns';\n\n// import { DateTimePicker } from \"@material-ui/pickers\";\nimport DateTimePicker from '../../components/DateTimePicker/DateTimePicker';\n\nimport API from '../../utils/API';\n\n// Components\n// import Sidebar from '../../components/Sidebar';\n\nconst styles = theme => ({\n    // const styles = makeStyles(theme => ({\n    // const useStyles = makeStyles(theme => ({\n\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        padding: theme.spacing(0, 10),\n        ...theme.mixins.toolbar,\n        paddingTop: '10vh',\n        width: '60vw',\n    },\n    nonAuthenticated: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        justifyContent: 'center',\n        padding: theme.spacing(0, 1),\n        ...theme.mixins.toolbar,\n        paddingTop: '5vh',\n        width: '50vw',\n        margin: 'auto',\n    },\n\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: '40%'\n        // 300\n        ,\n    },\n\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n\n    button: {\n        margin: theme.spacing(1),\n    },\n    // For Select\n    formControl: {\n        margin: theme.spacing(1),\n        // marginTop: theme.spacing(2), // lines up verically w textfields\n        minWidth: '55%'\n        // 300\n        ,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n\n    divider: {\n        margin: '20px 0 20px 0',\n    },\n\n    grouping: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'space-between',\n        // width: '80vw',\n        width: '100%',\n    },\n\n    buttonGroup: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'flex-end',\n        marginTop: theme.spacing(5),\n        marginBottom: theme.spacing(15),\n        width: 'inherit',\n    },\n})\n\nclass SubmitIssue extends Component {\n    // function SubmitIssue(props) {\n\n    constructor(props) {\n        super(props);\n        // State updater function to be passed down into the context provider per https://reactjs.org/docs/context.html\n        this.state = {\n            userId: this.props.userId,\n            userName: this.props.name,\n            selectedDate: new Date(), // default is current date-time\n            // .toLocaleDateString('en-US'),\n\n            // name: this.props.name,\n            // email: this.props.email,\n            // type: 'Technical'\n\n            // organization info\n            // orgId: '', // ObjectId of org. For now, do not force clear?\n            // orgId: 'unknown' // initializing orgId prevents selection from staying\n\n            // project info\n            projId: '', // ObjectId of project\n            projName: '', // unique\n            // projDescription: '',\n\n            // version info\n            verId: '', // ObjectId of version\n            verName: '',\n            // verDescription: '',\n            // Also needs project ObjectId as ref. Use id above\n\n            // cache\n            organizationList: [], // should not be reset unless query auto restarts\n            organizationNames: [],\n            organizationDesc: [],\n\n            projectList: [],\n            projectNames: [],\n            projectDesc: [],\n\n            versionList: [],\n            versionNames: [],\n            versionDesc: [],\n\n            disableProjSelect: true, // both data types seem to work\n            disableVerSelect: 'true',\n\n            // issue info\n            issueSubject: '',\n            issueDescription: '',\n            issueType: 'Technical',\n            issueURL: '',\n            issueComment: '', // commit into array in DB\n\n            issueId: '' // To be read from GET query\n        }\n    }\n\n    // const classes = useStyles();\n    // const theme = useTheme();\n\n\n    //-------------------//\n    // Handler functions //\n    //-------------------//\n    handleFieldChange = event => {\n        // for a regular input field, read field name and value from the event\n        const fieldId = event.target.id;\n        const fieldValue = event.target.value;\n        // this.props.onChange(fieldName, fieldValue); // could use if updating parent state\n        // this.state.onChange(fieldName, fieldValue);\n\n        // console.log(fieldId, fieldValue);\n        this.setState(\n            { [fieldId]: fieldValue } // this works\n        );\n    }\n\n    handleDateChange = date => {\n        console.log('received date:', date)\n        this.setState({\n            ...this.state,\n            selectedDate: date\n        })\n    };\n\n    handleTimeChange = time => {\n        console.log('received time:', time)\n        this.setState({\n            ...this.state,\n            selectedTime: time\n        })\n    };\n\n    handleOrgSelect = event => {\n        console.log('selected org target: ', event.target)\n        // console.log(this.state.organizationNames.indexOf(event.target.value)) // check index by name\n        let ind = this.state.organizationNames.indexOf(event.target.value)\n        // console.log(this.state.organizationList[ind]) // shows the object at index\n        // this.setState({org: event.target.value})\n        // console.log(Object.keys(this.state.organizationList[ind])) // shows array containing keys from the object\n        // console.log(Object.keys(this.state.organizationList[ind])[0]) // first key (in ObjectId form) in a string\n\n        let selectedId = '', selectedOrgName = ''; // must initialize as string\n        // If index was found, get the key. If not, keep blank.\n        ind !== '' ? selectedId = Object.keys(this.state.organizationList[ind])[0] : selectedId = ''\n        ind !== '' ? selectedOrgName = this.state.organizationNames[ind] : selectedOrgName = ''\n        console.log('selected org:', selectedId);\n        this.setState({\n            orgId: selectedId,\n            orgName: selectedOrgName,\n\n            // If any proj is selected, remove it\n            projId: '',\n            projName: '',\n            projDescription: '',\n\n            // If any version is selected, remove it\n            verId: '',\n            verName: '',\n            verDescription: ''\n        }\n            , () => { this.getAllProj() } // on org select, query proj list\n        );\n    };\n\n    handleProjSelect = event => {\n        console.log('select proj target: ', event.target)\n        let ind = this.state.projectNames.indexOf(event.target.value) // index of selected item in array\n        let selectedId = Object.keys(this.state.projectList[ind])[0]; // ObjectId from DB\n        let selectedName = this.state.projectNames[ind]; // Name from DB\n        let selectedDesc = this.state.projectDesc[ind]; // Description from DB\n        console.log('selected proj:', selectedId)\n        this.setState({\n            projId: selectedId,\n            projName: selectedName,\n            projDescription: selectedDesc,\n\n            // If any version is selected, remove it\n            verId: '',\n            verName: '',\n            verDescription: ''\n        }\n            , () => this.getAllVers()) // on proj select, query version list\n    };\n\n    handleVerSelect = event => {\n        console.log('select ver target: ', event.target)\n        let ind = this.state.versionNames.indexOf(event.target.value) // get the index of selected item from array\n        let selectedId = '';\n        let selectedName = '';\n        let selectedDesc = '';\n        // If index was found, get the key, name and desc. For some reason not, keep blank.\n        ind !== -1 ? selectedId = Object.keys(this.state.versionList[ind])[0] : selectedId = ''\n        ind !== -1 ? selectedName = this.state.versionNames[ind] : selectedName = ''\n        ind !== -1 ? selectedDesc = this.state.versionDesc[ind] : selectedDesc = ''\n        ind !== -1 ? console.log('selected vers:', selectedId) : console.log('Version index not found.')\n\n        this.setState({\n            verId: selectedId,\n            verName: selectedName,\n            verDescription: selectedDesc\n        })\n    };\n\n    clearState = () => {\n        this.setState({\n            ...this.state,\n            // reporter: '', // ObjectId from User. (props.userId)\n\n            // required\n            orgId: '',\n            projId: '',\n            verId: '',\n\n            // This is string here but DB stores it as array\n            comment: '',\n\n            owner: '',\n            status: '',\n            resolved: '',\n            priority: '',\n            targetResolutionDate: '',\n            potentialImpact: '',\n            imageURL: '',\n            partImpacted: '',\n            selectedDate: new Date(),\n\n            // cache\n            organizationList: [], // should not be reset unless query auto restarts\n            organizationNames: [],\n            organizationDesc: [],\n\n            projectList: [],\n            projectNames: [],\n            projectDesc: [],\n\n            versionList: [],\n            versionNames: [],\n            versionDesc: [],\n\n            disableProjSelect: true, // both data types seem to work\n            disableVerSelect: 'true',\n\n            // issue info\n            issueSubject: '',\n            issueDescription: '',\n            issueType: 'Technical',\n            issueURL: '',\n            issueComment: '', // commit into array in DB\n\n\n        })\n    };\n\n    handleSubmit = async () => {\n        await this.createIssue;\n        await this.createComment;\n        this.props.isSignedIn\n            ? this.props.showDashboard()\n            : this.props.history.push({\n                pathname: '/',\n                state: { isSignedIn: false }\n            }); // redirect to LandingPage\n\n    }\n\n    //------------------------//\n    // Organization functions //\n    //------------------------//\n    getAllOrgs = () => {\n        API.getOrgs() // works if {} is omitted\n            .then(orgs => { // hits w no params for query\n                console.log('API getOrgs returned: ', orgs.data);\n                let objects = orgs.data.map(obj => {\n                    return { [obj._id]: obj.name } // orgId : orgName\n                })\n                let names = orgs.data.map(obj => {\n                    return obj.name // orgId : orgName\n                })\n                this.setState({\n                    organizationList: objects,\n                    organizationNames: names\n                })\n            })\n            .then(() => console.log('state after getAllOrg & getAllProj:', this.state))\n    }\n\n    // NEEDS DUPLICATION PREVENTION\n    saveOrg = () => {\n        API.createOrganization({\n            name: this.state.orgName,\n            description: this.state.orgDescription,\n            url: this.state.orgUrl,\n            member: [this.props.id] // user Id\n        }).then(() => console.log('Org saved.'))\n    }\n\n    //-------------------//\n    // Project functions //\n    //-------------------//\n\n    createProj = () => {  // works\n        console.log('creating new project')\n        API.createProject({\n            name: this.state.projName,\n            description: this.state.projDescription,\n            organization: [this.state.orgId] // user Id\n        })\n            .then((res) => console.log('Project saved.', res))\n            .catch(error => console.log(error))\n            .then(() => this.getAllProj()) // refresh proj list\n    }\n\n    updateProject = async (id, data) => { // works\n        console.log(`update proj w/ ${id} and this data:`, data)\n        await API.updateProject(id, data)\n            .then(result => {\n                console.log('updateProject returned data: ', result.data)\n                return result\n            })\n            .catch(error => console.log('error occurred!', error));\n    }\n\n    // Query projects matching selected organization\n    getAllProj = () => { // works w/o params\n        API.getProjects(\n            { // organization: this.state.orgId // non func\n            })\n            .then(projects => {\n                console.log('get all proj', projects);\n\n                let objects = [];\n                let names = [];\n                let descriptions = [];\n\n                for (let obj of projects.data) { // iterable array, so for-in does not work\n                    if (obj.organization === this.state.orgId) {\n                        objects.push({ [obj._id]: obj.name }) // projId : projName\n                        names.push(obj.name); // save names separately // works\n                        descriptions.push(obj.description); // save descriptions separately\n                    }\n                } // .map does not work since it may create \"undefined\" holes in output array\n                // .filter does not work since condition sits on same level as data to save\n\n                objects.includes(undefined) ? // no longer need to check undefineds due to change above, but will leave for now\n                    this.setState({\n                        projectList: [],\n                        projectNames: [],\n                        projectDesc: [],\n                        disableProjSelect: true // prevent proj pick\n                    },\n                        console.log('No relevant project. ', objects, names, descriptions)\n                        // console.log('No relevant project. ', o2, n2)\n                    ) :\n                    // If relevant projects are found, add list to state and enable project selection\n                    // objects.length > 0 && names.length > 0 ?\n                    this.setState({\n                        projectList: objects,\n                        projectNames: names,\n                        projectDesc: descriptions,\n                        disableProjSelect: false // enables project select\n                    }\n                        , console.log('Relevant projects found. Adding to state:', objects, names, descriptions)\n                        // , console.log('Relevant projects found. Adding to state:', o2, n2)\n                    )\n\n            })\n            .then(() => console.log('state after getAllProj, filtered :', this.state))\n            .then(this.getAllVers()) // query matching versions on proj select // works?\n            .catch(err => console.log(err));\n    }\n\n\n    //-------------------//\n    // Version functions //\n    //-------------------//\n    createVer = () => {\n        API.createVersion({\n            name: this.state.verName,\n            description: this.state.verDescription,\n            project: [this.state.projId] // project Id as ref\n        })\n            .then(res => console.log('Version saved.', res))\n            .catch(error => console.log(error))\n    }\n\n    updateVersion = async (id, data) => { // works\n        console.log(`update version w/ ${id} and this data:`, data)\n        await API.updateVersion(id, data)\n            .then(result => {\n                console.log('updateVersion returned data: ', result.data)\n                return result\n            })\n            .catch(error => console.log(error));\n    }\n\n    getAllVers = () => {\n        API.getVersions({\n            // project: this.state.projId // seems to work but below logic is for unfiltered data\n        })\n            .then(versions => {\n                console.log('get all vers', versions)\n                let objects = [];\n                let names = [];\n                let descriptions = [];\n\n                for (let obj of versions.data) { // iterable array, so for-in does not work\n                    if (obj.project === this.state.projId) {\n                        objects.push({ [obj._id]: obj.name }) // verId : verName\n                        names.push(obj.name); // save names separately\n                        descriptions.push(obj.description); // save descriptions separately\n                    }\n                } // .map does not work since it may create \"undefined\" holes in output array\n                // .filter does not work since condition sits on same level as data to save\n\n                // If blanks exist, this is remnant from relevant query\n                objects.includes(undefined) ?\n                    this.setState({\n                        versionList: [],\n                        versionNames: [],\n                        versionDesc: [],\n                        disableVerSelect: true // prevent select\n                    },\n                        console.log('No relevant version. ', objects, names, descriptions)\n                    ) :\n                    // If relevant result is found, add list to state and enable selection\n                    this.setState({\n                        versionList: objects,\n                        versionNames: names,\n                        versionDesc: descriptions,\n                        disableVerSelect: false // enables select\n                    }, console.log('Relevant versions found. Adding to state:', objects, names, descriptions)\n                    )\n            })\n    }\n\n    getOneVer = () => {\n        API.findOneVersion(this.state.verId)\n            .then(ver => console.log('get one ver', ver))\n    }\n\n    //---------------------------//\n    // Issue & Comment Functions //\n    //---------------------------// \n    createIssue = () => { // works\n\n        // PRETTIFY DATE HERE? //\n\n        API.createIssue({\n            // this.state\n            reporter: this.props.userId, // ObjectId\n            reporterName: this.props.name, // displayName\n\n            type: this.state.issueType,\n            timing: this.state.selectedDate,\n\n            organization: this.state.orgId, // ObjectId\n            project: this.state.projId, // ObjectId\n            version: this.state.verId, // ObjectId\n\n            subject: this.state.issueSubject,\n            description: this.state.issueDescription,\n            url: this.state.issueURL,\n            imageURL: this.state.imageURL,\n            status: this.state.status,\n            resolved: this.state.resolved,\n\n            owner: this.state.owner, // ObjectId\n            priority: this.state.priority,\n            targetResolutionDate: this.state.targetResolutionDate,\n            potentialImpact: this.state.potentialImpact,\n            partImpacted: this.state.partImpacted,\n\n            organizationName: this.state.orgName,\n            projectName: this.state.projName,\n            versionName: this.state.verName,\n            issueSubject: this.state.issueSubject\n\n        }).then((res) => {\n            this.setState({\n                ...this.state,\n                issueId: res.data._id\n            })\n            console.log('createIssue has run.', res);\n            // this.createComment() // save return issueId, then use it on new comment\n            // )\n        })\n            .then(() => this.createComment())\n    }\n\n    createComment = () => {\n        API.createComment({\n            organization: this.state.orgId, // ObjectId\n            project: this.state.projId, // ObjectId\n            version: this.state.verId, // ObjectId\n            issue: this.state.issueId, // ObjectId, returned at createIssue\n            commenter: this.props.userId, // ObjectId\n\n            actionDescription: ['Reported issue'],\n            comment: this.state.issueComment,\n            visibility: 'Organization members and reporter',\n            avatar: this.props.photoURL,\n            commenterName: this.props.name // displayName\n\n            // createdAt: new Date\n\n        })\n            .then((res) => {\n                console.log('createComment has run.', res);\n            })\n            .then(\n                this.props.showDashboard // forward to main view\n            )\n    }\n\n    //--------------------//\n    //  Lifecyle Methods  //\n    //--------------------//\n    componentDidMount() {\n        console.log('component did mount :', this.state);\n        this.getAllOrgs() // adds to state the list of org objects and array of org names\n    }\n\n    componentDidUpdate() {\n        console.log('component did update :', this.state);\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <form className={this.props.isSignedIn ? classes.container : classes.nonAuthenticated}\n                // Unauthenticated users do not see menu bar, so center thes contents.\n                // this.props.style.content\n                noValidate autoComplete=\"off\"\n            >\n                <div className={classes.grouping}>\n                    <Typography variant='body2' className={classes.textField}>Asterisk(*) denotes required fields.</Typography>\n                </div>\n\n                <div className={classes.grouping}>\n                    {!this.props.isSignedIn && // Render latter for \"anonymous\" users only\n                        <React.Fragment>\n                            <TextField\n                                id=\"name\"\n                                // required // disabled\n                                label=\"Your Name\"\n                                placeholder=\"John Doe\"\n                                className={classes.textField}\n                                defaultValue={this.props.name}\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                            />\n                            <TextField\n                                id=\"email\"\n                                // required // disabled\n                                label=\"Your Email\"\n                                defaultValue={this.props.email}\n                                className={classes.textField}\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                            />\n                        </React.Fragment>\n                    }\n                </div>\n\n                <Divider className={classes.divider} />\n\n                <div className={classes.grouping}>\n                    <FormControl variant=\"outlined\" className={classes.formControl}>\n                        <InputLabel\n                            // ref={inputLabel} \n                            id=\"demo-simple-select-outlined-label-org\"\n                            required>\n                            Provider\n                            </InputLabel>\n                        <Select\n                            labelId=\"demo-simple-select-outlined-label-org\"\n                            // id={this.state.orgId || \"demo-simple-select-outlined\"}\n                            id={\"demo-simple-select-outlined\"}\n                            key={Date.now}\n                            placeholder='Provider Name'\n                            value={this.state.orgId  // shouldn't be this value\n                                // this.state.orgId !== '' ? this.state.orgId : '' // does not change display\n                                // collin tried: this.state.orgId\n                                // this.state.orgId !== '' && this.state.orgId // still changing uncontrolled to controlled?\n                            }\n                            onChange={this.handleOrgSelect\n                                // this.handleFieldChange // not reading correctly\n                            }\n                        >\n                            {\n                                this.state.organizationNames ?\n                                    this.state.organizationNames.map((org, ind) => {\n                                        // console.log(Object.keys(this.state.organizationList[ind])[0])\n                                        // console.log(org)\n                                        // <option key={org.key} value={org.key}>{org.value}</option>\n                                        return < MenuItem\n                                            id={Object.keys(this.state.organizationList[ind])[0]}\n                                            // id={org} // collin tried\n                                            key={org}\n                                            name={org}\n                                            value={org} >\n                                            {/* error: you have provided an out-of-range value `undefined` for the select component. */}\n                                            {org}\n                                        </MenuItem>\n                                    })\n                                    : () => console.log('state during MenuItem render', this.state)\n                                // None should not be an option. Create org first if missing.\n                            }\n                        </Select>\n                    </FormControl>\n                    <TextField\n                        id=\"orgId\"\n                        // REMEMBER, LIST IS FOR NAME BUT SAVES ID\n                        disabled\n                        // fullWidth\n                        className={classes.textField}\n                        label=\"Provider ID\"\n                        value={this.state.orgId}\n                        style={{ margin: 8 }}\n                        margin=\"normal\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"filled\"\n                        onChange={this.handleFieldChange.bind(this)}\n                    />\n                </div>\n\n                {/* Project */}\n                <div className={classes.grouping}>\n\n                    <FormControl variant=\"outlined\"\n                        className={classes.formControl}\n                    // {this.state.projectList ? null : disabled}\n                    >\n                        <InputLabel\n                            // ref={inputLabel} \n                            id=\"demo-simple-select-outlined-label-proj\"\n                            required>\n                            Project/Product\n                        </InputLabel>\n\n                        <Select\n                            labelId=\"demo-simple-select-outlined-label-proj\"\n                            // id={this.state.orgId || \"demo-simple-select-outlined\"}\n                            id={\"SI-demo-simple-select-outlined-proj\"}\n                            placeholder='Project Name'\n                            // value={this.state.orgName}\n                            onChange={\n                                // onOpen={ // doesn't work but unsure if due to choice\n                                // this.handleFieldChange // not reading correctly?\n                                // this.setState({ event.target.value })\n                                this.handleProjSelect\n                            }\n                        // labelWidth={'500px'}\n                        >\n                            {\n                                this.state.projectNames ?\n                                    this.state.projectNames.map((proj, i) => {\n                                        // this.state.projectList ? // unexpected\n                                        // Object.keys(this.state.projectList[i])[0]: \n                                        return <MenuItem\n                                            id={proj}\n                                            key={Date.now + Math.random() * 10000}\n                                            name={proj}\n                                            value={proj}\n                                            disabled={\n                                                this.state.disableProjSelect ? true : false\n                                                // this.state.orgId !== '' ? 'false' : 'true'\n                                            }\n                                        >\n                                            {proj}\n                                            {console.log('proj list at render:', this.state.projectList[i])}\n                                        </MenuItem>\n                                    }) : <br />\n                                // 'None' should not be an option. Create org first if missing.\n                            }\n                        </Select>\n\n                    </FormControl>\n                    <TextField\n                        id=\"projId\"\n                        // REMEMBER, LIST IS FOR NAME BUT SAVES ID\n                        disabled\n                        // fullWidth\n                        label=\"Project ID\"\n                        className={classes.textField}\n                        value={this.state.projId}\n                        style={{ margin: 8 }}\n                        margin=\"normal\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"filled\"\n                        onChange={this.handleFieldChange.bind(this)}\n                    />\n                </div>\n\n                {/* Version */}\n                <div className={classes.grouping}>\n                    <FormControl variant=\"outlined\" className={classes.formControl}>\n                        <InputLabel id=\"demo-simple-select-outlined-label-ver\" required>\n                            Version/Specification\n                        </InputLabel>\n                        <Select\n                            labelId=\"demo-simple-select-outlined-label-ver\"\n                            // id={this.state.orgId || \"demo-simple-select-outlined\"}\n                            id={\"demo-simple-select-outlined-ver\"}\n                            // key={Math.random()}\n                            placeholder='Version / Specification'\n                            // value={this.state.verName}\n                            onChange={\n                                // onOpen={ // doesn't work but unsure if due to choice\n                                // this.handleFieldChange // not reading correctly?\n                                // this.setState({ event.target.value })\n                                this.handleVerSelect\n                            }\n                        // labelWidth={'500px'}\n                        >\n                            {\n                                this.state.versionNames ?\n                                    this.state.versionNames.map((ver, i) => {\n                                        // this.state.versionList ? // unexpected\n                                        // Object.keys(this.state.versionList[i])[0]: \n                                        return <MenuItem\n                                            id={ver}\n                                            key={Math.random()}\n                                            name={ver}\n                                            value={ver}\n                                            disabled={\n                                                this.state.disableVerSelect ? true : false\n                                            }\n                                        >\n                                            {ver}\n                                            {console.log('ver list at render:', this.state.versionList[i])}\n                                        </MenuItem>\n                                    }) : <br />\n                                // 'None' should not be an option. Create org first if missing.\n                            }\n                        </Select>\n                        {console.log('Disable project selection at render is:', this.state.disableProjSelect)}\n                    </FormControl>\n                    <TextField\n                        id=\"verId\"\n                        // REMEMBER, LIST IS FOR NAME BUT SAVES ID\n                        disabled\n                        className={classes.textField}\n                        label=\"Version ID\"\n                        value={this.state.verId}\n                        style={{ margin: 8 }}\n                        margin=\"normal\"\n                        InputLabelProps={{ shrink: true, }}\n                        onChange={this.handleFieldChange.bind(this)}\n                        variant=\"filled\"\n                    />\n                </div>\n                <Divider className={classes.divider} />\n\n                <div className={classes.grouping}>\n                    {/* <TextField // stopped responding?\n                        id=\"issueSubject\"\n                        required\n                        fullWidth\n                        label=\"Subject\"\n                        key='issueSubject'\n                        value={this.state.issueSubject}\n                        style={{ margin: 8 }}\n                        // placeholder=\"Placeholder\"\n                        // helperText=\"What seems to be the trouble?\"\n                        margin=\"normal\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        onChasnge={this.handleFieldChange.bind(this)}\n                        variant=\"outlined\"\n                    /> */}\n                    <TextField\n                        id=\"issueSubject\"\n                        fullWidth\n                        label=\"Subject\"\n                        // placeholder=\"Any thoughts?\"\n                        value={this.state.issueSubject}\n                        // className={classes.textField}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        onChange={this.handleFieldChange.bind(this)}\n                        style={{ margin: 8 }}\n                    />\n                    <TextField\n                        id=\"issueDescription\"\n                        required\n                        multiline\n                        fullWidth\n                        rows=\"4\"\n                        key=\"outlined-multiline-static\"\n                        label=\"Issue Description\"\n                        value={this.state.issueDescription}\n                        style={{ margin: 8 }}\n                        // placeholder=\"Placeholder\"\n                        // helperText=\"What seems to be the trouble?\"\n                        margin=\"normal\"\n                        onChange={this.handleFieldChange.bind(this)}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"outlined\"\n                    />\n                    <TextField\n                        id=\"issueType\"\n                        disabled\n                        label=\"Issue Type\"\n                        defaultValue={this.state.issueType}\n                        className={classes.textField}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        onChange={this.handleFieldChange.bind(this)}\n                    />\n                    <DateTimePicker\n                        selectedDate={this.state.selectedDate}\n                        handleDateChange={this.handleDateChange}\n                    />\n                    <TextField\n                        id=\"issueURL\"\n                        fullWidth\n                        label=\"URL\"\n                        // placeholder=\"Any thoughts?\"\n                        value={this.state.issueURL}\n                        // className={classes.textField}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        onChange={this.handleFieldChange.bind(this)}\n                        style={{ margin: 8 }}\n                    />\n                    <TextField\n                        id=\"issueComment\"\n                        fullWidth\n                        multiline\n                        label=\"Comment\"\n                        placeholder=\"Any thoughts?\"\n                        value={this.state.issueComment}\n                        // className={classes.textField}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        onChange={this.handleFieldChange.bind(this)}\n                        style={{ margin: 8 }}\n                    />\n\n                    <div className={classes.buttonGroup}>\n                        <Button\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            className={classes.button}\n                            endIcon={<RotateLeftIcon>Reset Form</RotateLeftIcon>}\n                            onClick={\n                                () => {\n                                    console.log('clicked reset while state is', this.state)\n                                    this.clearState()\n                                }\n                            }\n                        > Reset Form\n                        </Button>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.button}\n                            endIcon={<Icon>send</Icon>}\n                            onClick={\n                                // this.createIssue // invokes createComment\n                                this.handleSubmit\n\n                                // (async () => {\n                                //     await this.createIssue();\n                                //     // await this.createComment();\n                                // })()\n                            }\n                        > Submit\n                    </Button>\n                    </div>\n                </div>\n\n            </form>\n        )\n\n    }\n}\n\n// export default withRouter(SubmitIssue)\nexport default withRouter(withStyles(styles, { withTheme: true })(SubmitIssue))\n","//React\r\nimport React from 'react'\r\n\r\n// Material UI\r\n// import Button from '@material-ui/core/Button';\r\n// import Group from '@material-ui/icons/Group';\r\nimport Card from '@material-ui/core/Card';\r\n// import CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport {\r\n  // withStyles, \r\n  makeStyles,\r\n  // useTheme \r\n} from '@material-ui/core/styles';\r\n// import Link from '@material-ui/core/Link';\r\n\r\n// Other modules\r\n// import CountUp from 'react-countup'\r\n// import { injectIntl } from 'react-intl'\r\n// import { withFirebase } from 'firekit-provider'\r\n// import { Line, Bar, Doughnut } from 'react-chartjs-2'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  // const styles = makeStyles(theme => ({\r\n  // root: {\r\n  //   align: 'center',\r\n  //   display: 'flex',\r\n  // },\r\n  cardsContent: {\r\n    padding: 15,\r\n    paddingTop: '12vh',\r\n    // paddingLeft: 15,\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    flexWrap: 'wrap',\r\n    width: '80vw',\r\n\r\n    [theme.breakpoints.only('xs')]: {\r\n      width: '100%',\r\n      padding: 0,\r\n      // paddingTop: 15\r\n      paddingTop: 60,\r\n      paddingLeft: 0,\r\n\r\n    }\r\n  },\r\n  card: {\r\n    // minWidth: \"37vw\",\r\n    // maxWidth: 350,\r\n    width: \"35vw\",\r\n    margin: 15,\r\n    [theme.breakpoints.only('xs')]: {\r\n      minWidth: 275,\r\n      width: '100%',\r\n      margin: 0,\r\n      marginTop: 7\r\n    },\r\n    // \"&:last-child\": {\r\n    //   marginTop: 25,\r\n    // }\r\n  },\r\n  wideCard: {\r\n    // minWidth: \"90%\",\r\n    // maxWidth: 350,\r\n    // maxWidth: \"100vw\",\r\n    width: '100vw',\r\n    margin: 15,\r\n    [theme.breakpoints.only('xs')]: {\r\n      width: '100%',\r\n      margin: 0,\r\n      marginTop: 7\r\n    },\r\n  },\r\n  mouseEntered: {\r\n    color: \"red\",\r\n  },\r\n  mouseLeft: {\r\n    color: \"black\",\r\n  },\r\n  bullet: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(0.8)'\r\n  },\r\n  cardTitle: {\r\n    marginBottom: 16,\r\n    fontSize: 14\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n\r\n    // display: 'inline-block',\r\n  },\r\n}))\r\n\r\nfunction Dashboard(props) {\r\n  /*\r\n    let state = {\r\n      // This tells the AppBar which menu to highlight, maybe.\r\n      currentPage: \"\",\r\n  \r\n      // Submitted, In progress, Resolved, Closed...\r\n      counts: {\r\n        submitted: 5,\r\n        reviewed: 1,\r\n        resolved: 1,\r\n        closed: 3\r\n      },\r\n  \r\n      latestIssue: {},\r\n  \r\n      // Status updates in sentence form: MM/DD/YY hh:mm - ${assignee} ${action description} (Issue #${###-###-###-###})\r\n      // Give thoughts on the issue number structure.\r\n      notifications: []\r\n    };\r\n  */\r\n  const classes = useStyles();\r\n\r\n  const dates = [], times = [];\r\n\r\n  // immediately invoke\r\n  // function prettify() {\r\n  //   props.commentObjects.map(function (obj, ind) {\r\n  //     let timeInMs = Date.parse(obj.timestamps.created_at);\r\n  //     let prettyDate = new Date(timeInMs).toLocaleDateString;\r\n  //     let prettyTime = new Date(timeInMs).toLocaleTimeString;\r\n\r\n  //     dates.push(prettyDate);\r\n  //     times.push(prettyTime);\r\n  //   })\r\n  // }\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        props.commentObjects.map(function (obj, ind) {\r\n          let timeInMs = Date.parse(obj.timestamps.created_at);\r\n          let prettyDate = new Date(timeInMs).toLocaleDateString();\r\n          let prettyTime = new Date(timeInMs).toLocaleTimeString();\r\n\r\n          // console.log('time=', prettyTime)\r\n          // console.log('date=', prettyDate)\r\n          dates.push(prettyDate);\r\n          times.push(prettyTime);\r\n        })\r\n      }\r\n      <div className={classes.cardsContent}>\r\n        <Card className={classes.card}>\r\n          <CardContent>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              User Summary\r\n          </Typography>\r\n            <br />\r\n            <Typography className={classes.pos} color=\"textSecondary\">You are currently affiliated with:</Typography>\r\n            <br />\r\n            <Typography variant='h6'>\r\n              {props.orgCount} organizations <Typography variant='body1'>and</Typography> {props.projCount} projects.\r\n            </Typography>\r\n            {/* <br />\r\n            <Typography>\r\n              and\r\n              </Typography>\r\n            <br />\r\n            <Typography variant='h6'>\r\n              {props.projCount} projects.\r\n              {' '}</Typography> */}\r\n          </CardContent>\r\n          {/* <CardActions>\r\n            <Button\r\n              size=\"small\"\r\n              onClick={() => {\r\n                let win = window.open('https://github.com/danninemx/project-issue-manager', '_blank')\r\n                win.focus()\r\n              }}\r\n            >\r\n              Learn More\r\n          </Button>\r\n          </CardActions> */}\r\n        </Card>\r\n\r\n        <Card className={classes.card}>\r\n          <CardContent>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              Issue Summary\r\n          </Typography>\r\n            <br />\r\n            <Typography\r\n              // className={classes.pos} \r\n              color=\"textSecondary\">You currently have:</Typography>\r\n            <br />\r\n            <Typography variant='h6'>\r\n              {props.issueCount} issues from your connections.\r\n              {' '}\r\n            </Typography>\r\n          </CardContent>\r\n          {/* <CardActions>\r\n            <Button\r\n              size=\"small\"\r\n              onClick={() => {\r\n                let win = window.open('https://github.com/danninemx/project-issue-manager', '_blank')\r\n                win.focus()\r\n              }}\r\n            >\r\n              Learn More\r\n          </Button>\r\n          </CardActions> */}\r\n        </Card>\r\n\r\n\r\n        <Card className={classes.wideCard}>\r\n          <CardContent>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              Notifications\r\n          </Typography>\r\n            <br />\r\n            {/* <Link\r\n              component=\"button\"\r\n              variant=\"body1\"\r\n              color=\"textPrimary\"\r\n              onClick={() => {\r\n                console.log(\"Some accessibility message here...\")\r\n                let win = window.open('https://github.com/danninemx/project-issue-manager', '_blank')\r\n                win.focus()\r\n              }}\r\n            >\r\n              {'DISPLAY AUTOMATED MESSAGES HERE (e.g. Like this)'}\r\n            </Link> */}\r\n            <br />\r\n            {\r\n              props.commentObjects.map(function (obj, ind) {\r\n                // let timeInMs = Date.parse(obj.timestamps.created_at);\r\n                // let prettyDate = new Date(timeInMs).toLocaleDateString;\r\n                // let prettyTime = new Date(timeInMs).toLocaleTimeString;\r\n\r\n                return (\r\n                  <React.Fragment key={Math.random()}>\r\n                    <Divider></Divider>\r\n                    <br></br>\r\n                    <Typography\r\n                      className={classes.pos} color=\"textSecondary\"\r\n                    >\r\n                      {/* [ {dates[ind]}, {times[ind] }] - \"{props.orgNames[ind]}\"\" company / {props.projNames[ind]} project / issue \"{props.issueSubjects[ind]} */}\r\n                      [ {dates[ind]}, {times[ind]}] - Organization \"{obj.organizationName}\" / Project \"{obj.projectName}\" / Issue \"{obj.issueSubject}\"\r\n                      {/* {obj.issue} */}\r\n                      \":\r\n                      </Typography>\r\n\r\n                    <Typography>\r\n                      {obj.commenterName} {obj.actionDescription[0]}\r\n                    </Typography>\r\n\r\n                    <Typography>\"{obj.comment}\"</Typography>\r\n                    <br />\r\n                  </React.Fragment>\r\n                )\r\n              })\r\n            }\r\n          </CardContent>\r\n\r\n        </Card>\r\n\r\n        {/* End of cardsContent div */}\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\n\r\n// export default withStyles(styles)(Dashboard);\r\nexport default Dashboard;","import React, {\n    Component\n    // , useRef \n} from \"react\"\nimport { Redirect } from 'react-router-dom'\n\n// Firebase Authentication\nimport firebase from \"firebase\"\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\"\n// import config from '../../../../config' (CRA app cannot reach outside /src)\n\n// Material UI\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nimport API from '../../utils/API'\n\nrequire('dotenv').config();\n// If running in non-production environment, load .env variables\n// if (process.env.NODE_ENV !== 'production') {\n//     require('dotenv').config();\n// }\n\n// console.log(\"\\n Environment variables :\", process.env);\n// console.log(\"\\n Exported environment variables :\", config);\n\n// let API_Key = process.env.Firebase_apiKey;\n// console.log(\"\\n API_Key : \", config.API_KEY);\n\n// These credentials are necessary and safe to be exposed to the client, as true backend is provided by Firebase\nfirebase.initializeApp({\n    // Firebase Console > Project Settings > Your project > Web API Key\n    apiKey: \"AIzaSyCzm64_uz3vESpXIPdgcOeeSFouv-fT5Gw\",\n    // Firebase Console > Authentication > Authorized Domains\n    authDomain: \"project-issue-manager.firebaseapp.com\"\n\n})\n\nclass SigninPage extends Component {\n\n    constructor(props) {\n        super(props);\n\n        // Set default auth state of false\n        this.state = {\n            isSignedIn: false,\n        };\n\n        // this.routeChange = this.routeChange.bind(this); //testing\n    }\n\n    /*\n    routeChange() { // testing\n        // let path = `/`;\n        // this.props.history.push(path);\n        // this.props.history.push({\n        //     pathname: path,\n        //     state: {isAuthenticated: true}\n        // })\n        <App\n            isAuthenticated='true' />\n    }\n    */\n\n    // *** USE THIS SOMEWHERE TO INITIATE NEW USER PROTOCOL *** //\n    checkNewUser = (authEmail) => {\n        API.findOneUser(\n            // If an email was passed, use it. If not use state.\n            authEmail || this.state.email\n        )\n            .then(res => {\n                // If user is found, save id to state. \n                // If not, send user to user profile for user creation.\n                console.log('SigninPage is checking new user status.', res)\n                // res !== '' ? () => {\n                //     console.log('user found:', res.data)\n                //     // console.log('User found :', res.data[0]['_id']) // works\n                //     this.setState({ 'id': res.data[0]['_id'] })\n                // }\n                //     : () => {\n                //         console.log('User NOT found', res.data) // works\n                //         this.showUserProfile();\n                //     }\n            })\n            .catch(() =>\n                this.setState({\n                    message: \"No results. Please try another query.\"\n                })\n            );\n    }\n    // state = { isSignedIn: false }; // signed out by default\n\n    // Firebase UI signin configuration\n    uiConfig = {\n        signInFlow: \"popup\",\n        signInOptions: [\n            firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n            firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n            firebase.auth.GithubAuthProvider.PROVIDER_ID,\n            firebase.auth.EmailAuthProvider.PROVIDER_ID\n        ],\n        callbacks: {\n            // Return false means user-determined redirect, not auto-redirect.\n            signInSuccessWithAuthResult: () => {\n                // Determine here whether this is new user. \n                // If so, open details page.\n                // If not, proceed to appropriate data view.\n                return false;\n            }\n        }\n    }\n\n    //-------------------//\n    // Lifecycle Methods //\n    //-------------------//\n    componentDidMount = () => {\n        firebase.auth().onAuthStateChanged(user => {\n            this.setState({\n                // Coerce the value to be a boolean regardless of original type\n                isSignedIn: !!user\n            })\n        })\n    }\n\n    componentDidUpdate = () => {\n        // console.log('this.props.handler is :', this.props.handler)\n        // Consider adding \"keep me signed in\" checkbox which will enable this\n\n        // Change persistence from local storage to session storage\n        // Per https://firebase.google.com/docs/auth/web/auth-state-persistence\n        firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION)\n            .then(function () {\n                // Existing and future Auth states are now persisted in the current\n                // session only. Closing the window would clear any existing state even\n                // if a user forgets to sign out.\n                // ...\n                // New sign-in will be persisted with session persistence.}\n            })\n            .catch(function (error) {\n                // Handle Errors here.\n                // let errorCode = error.code;\n                // let errorMessage = error.message;\n                console.log(`\\n error code : ${error.code}`,\n                    `\\n error message : ${error.message}`)\n            })\n    }\n\n    render() {\n        return (\n            // <div className=\"App\">\n            <React.Fragment>\n                <CssBaseline />\n                <Container maxWidth=\"sm\"\n                    style={{\n                        backgroundColor: '#cfe8fc'\n                        , height: '100vh'\n                        , width: '100vw'\n                    }}>\n                    <Typography component=\"div\"\n                    // style={{\n                    //     backgroundColor: '#cfe8fc'\n                    // , height: '100vh' \n                    // }}\n                    >\n                        <h3>Please sign in to proceed.</h3>\n                        <h4>(If you do not have an account, one will be created for you.)</h4>\n                        {/* <Button onClick={this.props.handler}> */}\n                        {/*\n                    // this.routeChange\n                    \n                    // <Redirect\n                    //     to={{\n                    //         pathname: \"/\",\n                    //         state: {\n                    //             isAuthenticated: true,\n                    //             referrer: \"/signinpage\"\n                    //         }\n                    //     }}\n                    // />\n\n                    // this.props.history.push({\n                    //     pathname: '/',\n                    //     state: { isAuthenticated: true }\n                    // }); // redirect to LandingPage\n\n                    // console.log(this.props)\n\n                    // return <Redirect\n                    // to={{\n                    //     pathname: \"/\",\n                    //     state: {\n                    //         referrer: \"/signinpage\"\n                    //     }\n                    // }}\n                    // />\n                }>\n                */}\n                        {/* test button</Button> */}\n                        {/* If auth succeeded, render DeveloperView */}\n                        {this.state.isSignedIn ? (\n                            <Redirect\n                                to={{\n                                    pathname: \"/developerview\",\n                                    state: {\n                                        referrer: \"/signinpage\",\n                                        wasAuthenticated: true\n                                        // email: this.state.email\n                                    }\n                                }}\n                            />\n\n                            // <DeveloperView\n                            //     userName={firebase.auth().currentUser.displayName}\n                            //     signOutFunction={() => firebase.auth().signOut()}\n                            //     profileImgSrc={firebase.auth().currentUser.photoURL}\n                            // >\n                            // </DeveloperView>\n\n                        ) : (\n                                <StyledFirebaseAuth\n                                    uiConfig={this.uiConfig}\n                                    firebaseAuth={firebase.auth()}\n                                />\n                            )\n                        }\n                    </Typography>\n                </Container>\n            </React.Fragment> // </div>\n        )\n    }\n}\n\nexport default SigninPage;\n\n\n\n        // React and related libraries\n        // import React from 'react'\n// import {\n//     BrowserRouter as Router,\n//     Switch,\n//     Route,\n//     Link,\n//     Redirect,\n//     useHistory,\n//     useLocation\n// } from \"react-router-dom\";\n\n\n// function LoginPage() {\n//     let history = useHistory();\n//     let location = useLocation();\n\n//     let { from } = location.state || { from: { pathname: \"/\" } };\n//     let login = () => {\n//         authentication.authenticate(() => {\n//             history.replace(from);\n//         });\n//     };\n\n//     return (\n//         <div>\n//             <p>You must log in to view the page at {from.pathname}</p>\n//             <button onClick={login}>Log in</button>\n//         </div>\n//     );\n// }\n\n// export default LoginPage;\n// //   export default withRouter(withStyles(styles, { withTheme: true })(LoginPage))\n","// React\nimport React from 'react';\nimport clsx from 'clsx';\nimport {\n  // BrowserRouter as Router,\n  // Switch, Route, \n  // Redirect,\n  // useHistory, useLocation,\n  withRouter,\n  // Link\n} from \"react-router-dom\";\n\n\n// Material UI\nimport {\n  makeStyles, useTheme\n  // styled \n} from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\n// import InboxIcon from '@material-ui/icons/MoveToInbox';\n// import MailIcon from '@material-ui/icons/Mail';\n\nimport Tooltip from '@material-ui/core/Tooltip'\nimport LockIcon from '@material-ui/icons/Lock'\nimport GitHubIcon from '@material-ui/icons/GitHub';\n\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport CreateIcon from '@material-ui/icons/Create';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport AccountTreeIcon from '@material-ui/icons/AccountTree';\nimport FindInPageIcon from '@material-ui/icons/FindInPage';\n\n// Firebase\nimport firebase from \"firebase\"\n\n// Pages\n// import Dashboard from '../../pages/Dashboard';\n// import { ViewContext } from '../../utils/viewContext';\n\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexGrow: 1,\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  appBarHeading: {\n    flexGrow: 1,\n    // padding: theme.spacing(3),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    // whiteSpace: 'nowrap',\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerClose: {\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: 'hidden',\n    width: theme.spacing(7) + 1,\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9) + 1,\n    },\n  },\n  toolbar: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar,\n  },\n}));\n\nfunction Sidebar(props) {\n\n\n  // let user = {\n  //   name: '',\n  //   email: '',\n  //   photoUrl: '',\n  //   emailVerified: '',\n  //   uid: '', // The user's ID, unique to the Firebase project. Do NOT use\n  //   // this value to authenticate with your backend server, if\n  //   // you have one. Use User.getToken() instead.\n  //   idToken: ''\n  // }\n\n  // Get current user's info \n\n  // firebase.auth().onAuthStateChanged(function (currentUser) {\n  //   if (currentUser) {\n  //     // User is signed in.\n  //     console.log('\\n Sidebar sees user :', currentUser.displayName, currentUser.email, currentUser.photoURL, currentUser.emailVerified, currentUser.uid)\n  //     // user.name = currentUser.displayName;\n  //     // console.log('\\n Saved user name initial: ', user.name);\n  //     // user.name = currentUser.displayName;\n  //     // console.log('\\n Saved user name final: ', user.name);\n  //     // console.log(this.user.name); // this does not work\n\n  //     user.name = currentUser.displayName;\n  //     user.email = currentUser.email;\n  //     user.photoUrl = currentUser.photoURL;\n  //     user.emailVerified = currentUser.emailVerified;\n  //     user.idToken = currentUser.getIdToken();\n\n  //     console.log('\\n Saved user info: ', user);\n  //   } else {\n  //     // No user is signed in.\n  //     console.log('\\n There is no authenticated user right now.')\n  //   }\n  // })\n\n  // forcing synch\n  //     function setUserInfo () {\n  //       return new Promise(\n  //     )}\n\n  const classes = useStyles();\n  const theme = useTheme();\n\n  // const CustomLink = styled('link')({\n  //   textDecoration: NONAME,\n  //   color: 'primary',\n  // })\n\n  const [open, setOpen] = React.useState(false);\n\n  // Keep using this\n  // console.log(\"\\n Sidebar received these props : \", props); // Functional components use props, not this.props\n\n  // firebase.auth().onAuthStateChanged(currentUser => {currentUser.displayName} )\n\n  // console.log(' \\n Sidebar sees this user outside of the firebase function :', user)\n  // On load, save user info\n  // let testuser = firebase.auth().currentUser;  //This returns null even if sign in\n  // console.log(testuser);\n  // let name, email, photoUrl, uid, emailVerified, idToken;\n\n  // console.log('\\n current user: ', user)\n\n  // if (user != null) {\n  //   name = user.displayName;\n  //   email = user.email;\n  //   photoUrl = user.photoURL;\n  //   emailVerified = user.emailVerified;\n  //   uid = user.uid;  // The user's ID, unique to the Firebase project. Do NOT use\n  //   // this value to authenticate with your backend server, if\n  //   // you have one. Use User.getToken() instead.\n  //   idToken = user.getIdToken();\n  // }\n\n  // console.log('\\n Current user info: ', name, email, photoUrl, emailVerified, idToken)\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  // let routeChange = (newUrl) => {\n  //   this.history.push(newUrl);\n  // };\n  /*  \n    const handleClickEvent = (buttonText) => {\n      switch (buttonText) {\n        case 'Dashboard':\n          console.log('\\n You clicked ', buttonText);\n          console.log('Sidebar sees props.history : ', props.history);\n          break;\n        case 'Submit Issue':\n          console.log('\\n You clicked ', buttonText);\n          console.log('Sidebar sees props.history : ', props.history);\n  \n          // Per https://stackoverflow.com/questions/44121069/how-to-pass-params-with-history-push-link-redirect-in-react-router-v4\n          // props.history.push({\n          //   pathname: '/developerview',\n          //   state: { activeView: buttonText }\n          // }) \n          // This did not work.\n  \n          // Alternative suggestion\n          // <Link to={{\n          //   pathname: '/template',\n          //   search: '?query=abc',\n          //   state: { detail: response.data }\n          // }}> My Link </Link> \n  \n          // props.history.push(\"/developerview\");\n          break;\n        case 'Review Issues':\n          console.log('\\n You clicked ', buttonText);\n          console.log('Sidebar sees props.history : ', props.history);\n          break;\n        default:\n          console.log('What did you even click? ', buttonText);\n          console.log('Sidebar sees props.history : ', props.history);\n      }\n    }\n  */\n\n  // let testprint = 10000;\n  // console.log(props.context)\n  return (\n    // <ViewContext.Consumer>\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, {\n              [classes.hide]: open,\n            })}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.appBarHeading} noWrap>\n            {/* {props.name} */}\n            {props.activeView}\n          </Typography>\n\n          <Toolbar disableGutters>\n            <Typography variant=\"h6\" className={classes.title}>\n              {/* Issue Manager */}\n            </Typography>\n            <div style={{ flex: 1 }} />\n            <Tooltip id=\"tooltip-icon1\" title=\"Sign out\">\n              <IconButton\n                name=\"signout\"\n                aria-label=\"Sign In\"\n                color=\"inherit\"\n                onClick={() => {\n                  firebase.auth().signOut(); // sign out of user session\n                  props.history.push('/'); // redirect to LandingPage\n                }}\n                rel=\"noopener\"\n              >\n                <LockIcon />\n              </IconButton>\n            </Tooltip>\n            <Tooltip id=\"tooltip-icon2\" title=\"GitHub repository\">\n              <IconButton\n                name=\"github\"\n                aria-label=\"Open Github\"\n                color=\"inherit\"\n                href=\"https://github.com/danninemx/project-issue-manager\"\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                <GitHubIcon />\n              </IconButton>\n            </Tooltip>\n          </Toolbar>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        className={clsx(classes.drawer, {\n          [classes.drawerOpen]: open,\n          [classes.drawerClose]: !open,\n        })}\n        classes={{\n          paper: clsx({\n            [classes.drawerOpen]: open,\n            [classes.drawerClose]: !open,\n          }),\n        }}\n        open={open}\n      >\n        <div className={classes.toolbar}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n        <List aria-label='sidebar menu list'>\n\n          <ListItem button key='Dashboard'\n            onClick={props.showDashboard}>\n            <ListItemIcon>\n              <DashboardIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Dashboard\" />\n          </ListItem>\n\n          <ListItem button key='Submit Issue'\n            onClick={props.showSubmitIssue}>\n            <ListItemIcon>\n              <CreateIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Submit Issue\" />\n          </ListItem>\n\n          {/* conditional naming on userType */}\n          <ListItem button key={props.userType === 'Reporter' ? 'Track Issue' : 'Manage Issue'}\n            onClick={props.showManageIssue}>\n            <ListItemIcon>\n              <FindInPageIcon />\n            </ListItemIcon>\n            <ListItemText primary={props.userType === 'Reporter' ? 'Track Issue' : 'Manage Issue'} />\n          </ListItem>\n\n          <Divider />\n\n          <ListItem button key='User Profile'\n            onClick={props.showUserProfile}>\n            <ListItemIcon>\n              <AccountCircleIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"User Profile\" />\n          </ListItem>\n\n          {props.userType !== 'Reporter' && // Render latter for developer+\n            <>\n              <ListItem button key='Organization Profile'\n                onClick={props.showOrganizationProfile}>\n                <ListItemIcon>\n                  <BusinessIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Organization Profile\" />\n              </ListItem>\n\n              <ListItem button key='Project Profile'\n                onClick={props.showProjectProfile}>\n                <ListItemIcon>\n                  <AccountTreeIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Project Profile\" />\n              </ListItem>\n            </>\n          }\n\n        </List>\n\n\n        <Divider />\n\n        {/* \n          {['Dashboard', 'Submit Issue', 'User Profile', 'Organization Profile', 'Project Profile'].map((text, index) => (\n            <ListItem button key={text}\n              // onClick={props.someFunction // This works.\n              onClick={\n                () => {\n                  // text === 'Submit Issue' ? props.showSubmitIssue() : props.showDashboard()\n                  switch (text) {\n                    case 'Dashboard':\n                      props.showDashboard()\n                      break;\n\n                    case 'Submit Issue':\n                      props.showSubmitIssue()\n                      break;\n\n                    case 'User Profile':\n                      props.showUserProfile()\n                      break;\n\n                    case 'Organization Profile':\n                      props.showOrganizationProfile()\n                      break;\n\n                    case 'Project Profile':\n                      props.showProjectProfile()\n                      break;\n\n                    default:\n                      console.log('I am Error')\n                  }\n                }\n\n                // onClick={props.changeName // This works.\n                // onClick={props.determineView // meh\n\n                // console.log(`\\n Sidebar says you clicked ${text} `)\n                // text == 'Submit Issue' ? props.showSubmitIssue : alert('what?')\n\n                // let nextPath = '/' + text.split(' ').join('').trim().toLowerCase();\n                // console.log(`\\n Sidebar says you clicked ${nextPath} `)\n                // (nextPath === '/submitissue') ? props.showSubmitIssue : false\n                // props.determineView(nextPath);\n\n                // onClick={() => console.log(props)\n                // () => {\n                // let nextPath = '/' + text.split(' ').join('').toLowerCase();\n                // console.log(`\\n Sidebar says you clicked ${nextPath} `);\n\n                // props.history.push({\n                //   pathname: '/developerview',\n                //   state: { activeView: nextPath}\n                // });\n\n                // return <Redirect\n                //   to={{\n                //     pathname: \"/developerview\",\n                //     state: { activeView: nextPath }\n                //   }} />\n                // }\n              }\n            >\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))} */}\n        {/* </List> */}\n        <Divider />\n      </Drawer>\n\n      {/* <Link to={{\n          pathname: '/template',\n          search: '?query=abc',\n          state: { detail: response.data }\n        }}> My Link </Link>  */}\n\n      {props.children}\n    </div>\n    // </ViewContext.Consumer>\n  );\n}\n\n// withRouter allows routing out to LandingPage on signout\nexport default withRouter(Sidebar)\n","// React\nimport React\n, {\n    Component,\n    // useState\n}\n    from 'react';\nimport { withRouter } from 'react-router-dom';\n\n// Material UI\nimport {\n    // makeStyles, // used in functional component\n    // useStyles, // Stateful Components cannot use Hooks such as useStyles.\n    withStyles\n} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\n\nimport API from '../../utils/API';\n\nconst styles = theme => ({\n    // const styles = makeStyles(theme => ({\n    // const useStyles = makeStyles(theme => ({\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n\n        alignItems: 'center',\n        // justifyContent: 'flex-start',\n        // justifyContent: 'center',\n        padding: theme.spacing(0, 10),\n        ...theme.mixins.toolbar,\n\n        paddingTop: '12vh',\n        width: '60vw',\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: '48%',\n    },\n\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n\n    wrapper: {\n        position: 'relative',\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    grouping: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        // justifyContent: 'space-between',\n        // width: '80vw',\n        width: '100%',\n    },\n    buttonGroup: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'flex-end',\n        marginTop: theme.spacing(5),\n        marginBottom: theme.spacing(15),\n        width: 'inherit',\n    },\n})\n\nclass UserProfile extends Component {\n    // function SubmitIssue(props) {\n\n    constructor(props) {\n        super(props);\n        // State updater function to be passed down into the context provider per https://reactjs.org/docs/context.html\n        this.state = {\n            // name: this.props.name,\n            // email: this.props.email,\n            // type: 'Technical'\n        }\n    }\n\n    handleFieldChange = (event) => {\n        // for a regular input field, read field name and value from the event\n        const fieldId = event.target.id;\n        const fieldValue = event.target.value;\n        // this.props.onChange(fieldName, fieldValue); // could use if updating parent state\n        // this.state.onChange(fieldName, fieldValue);\n\n        // console.log(fieldId, fieldValue);\n        this.setState(\n            { [fieldId]: fieldValue }\n        ); // this works\n        // this.setState({ testObj: { [fieldId]: fieldValue } }); // not rly. keeps adding indexed\n\n        // this.setState({\n        //         testArr: [\n        //             // ...this.state.testArr, \n        //             {\n        //                 [fieldId]: fieldValue\n        //             }\n        //         ]\n\n        //     }\n\n        // }); // \n        // console.log('handle field change :', this.state); // this will be one step slower\n    }\n\n    clearState = () => {\n        this.setState({\n            ...this.state,\n            // required\n            userType: 'User',\n\n            // implement later for devs\n            organization: '',\n            project: '',\n            subject: '',\n            description: '',\n            owner: '',\n\n            // This is string here but DB stores it as array\n            comment: '',\n\n            // optional in current scope\n            url: '',\n            status: '',\n            resolved: '',\n            priority: '',\n            targetResolutionDate: '',\n            potentialImpact: '',\n            image: '',\n            partImpacted: ''\n        })\n    };\n    //  onChange = e => {\n    //     const { name, value } = e.target;\n    //     setState(prevState => ({ ...prevState, [name]: value }));\n    //   };\n\n    // handleReset = e => {\n    //     e.preventDefault();\n    //     signupUser().then(this.clearState);\n    // };\n\n    getUser = () => {\n\n        // ***** This is hitting controller's getUsers, not findOneUser. //\n        API.findOneUser(\n            this.props.email\n        )\n            .then(res => {\n                res.data ?\n                    console.log('returned :', res.data[0])\n                    // this.setState({\n                    //   books: res.data\n                    // })\n                    : console.log('no one!', res.data)\n            })\n            .catch(() =>\n                this.setState({\n                    message: \"No results. Please try another query.\"\n                })\n            );\n    }\n\n    // add UPDATE feature //\n    saveUser = () => {\n        API.createUser({\n            email: this.props.email,\n            displayName: this.props.name,\n            // first word in display name\n            firstName: this.props.name.split(' ')[0],\n            // last word in display name\n            lastName: this.props.name.split(' ')[this.props.name.split(' ').length - 1],\n            photoURL: this.props.photoURL,\n            userType: this.props.userType\n        }).then(() => this.getUser())\n\n\n    }\n\n    componentDidUpdate() {\n        console.log('component did update :', this.state);\n    }\n\n    render() {\n        this.getUser();\n        const { classes } = this.props;\n        return (\n            <form className={classes.container} noValidate autoComplete=\"off\" >\n                <Typography variant='body2'>Asterisk(*) denotes required fields.</Typography>\n                <div className={classes.grouping}>\n                    <br />\n                    {/* first and last name are computed, not entered */}\n                    <TextField\n                        id=\"name\"\n                        disabled\n                        label=\"Your Name\"\n                        placeholder=\"John Doe\"\n                        className={classes.textField}\n                        defaultValue={this.props.name}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                    />\n                    <TextField\n                        id=\"email\"\n                        disabled\n                        label=\"Your Email\"\n                        defaultValue={this.props.email}\n                        className={classes.textField}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                    />\n                </div>\n\n                <div className={classes.grouping}>\n                    <TextField\n                        id=\"userType\"\n                        required\n                        label=\"User / Developer\"\n                        defaultValue={this.props.userType}\n                        className={classes.textField}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        onChange={this.handleFieldChange.bind(this)}\n                    />\n                    <TextField\n                        id=\"photoURL\"\n                        label=\"Profile Photo (URL)\"\n                        value={this.props.photoURL}\n                        style={{\n                            margin: 8,\n                            width: '60vw',\n                        }}\n                        // placeholder=\"Placeholder\"\n                        // helperText=\"What seems to be the trouble?\"\n                        // fullWidth\n                        margin=\"normal\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"outlined\"\n                        onChange={this.handleFieldChange.bind(this)}\n                    />\n                </div>\n\n                <div className={classes.buttonGroup}>\n                    <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        className={classes.button}\n                        endIcon={<RotateLeftIcon>Reset Form</RotateLeftIcon>}\n                        onClick={\n                            // this.props.handleSubmitIssue(this.state.testArr) // causes loop SA\n                            () => {\n                                console.log('clicked reset while state is', this.state)\n                                // this.props.handleSubmitIssue()\n                                this.clearState()\n                            }\n                        }\n                    > Reset Form\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.button}\n                        endIcon={<Icon>send</Icon>}\n                        onClick={() => this.saveUser()\n                            // this.createIssue\n                            /*\n                            // this.props.handleSubmitIssue(this.state.testArr) // causes loop SA\n                            () => {\n                                console.log('clicked button', this.state)\n\n                                const keys = [\n                                    \"type\",\n                                    \"organization\",\n                                    \"project\",\n                                    \"subject\",\n                                    \"description\",\n                                    \"comment\",\n                                    \"owner\",\n\n                                    // optional in this version\n                                    \"url\",\n                                    \"status\",\n                                    \"resolved\",\n                                    \"priority\",\n                                    \"targetResolutionDate\",\n                                    \"potentialImpact\",\n                                    \"image\",\n                                    \"partImpacted\"\n                                ]\n\n                                // Loop through keys and get values\n                                // let values = keys.map(\n                                    // (key) => {\n                                for (let key of keys) {\n                                    // this.props.handleSubmitIssue(key, this.state[key]) // works\n\n                                }\n                                    // }\n                                    // console.log(this.state[key]) // works\n                                // )\n\n                                // this.props.handleSubmitIssue(values)\n\n\n                            }\n                            */\n                        }\n                    > Submit\n                    </Button>\n                    {/* End of button group */}\n                </div>\n\n            </form >\n        )\n\n    }\n}\n\n// export default withRouter(SubmitIssue)\nexport default withRouter(withStyles(styles, { withTheme: true })(UserProfile))\n","// React\nimport React\n, {\n    Component,\n    // useState\n}\n    from 'react';\nimport { withRouter } from 'react-router-dom';\n\n// Material UI\nimport {\n    // makeStyles, // used in functional component\n    // useStyles, // Stateful Components cannot use Hooks such as useStyles.\n    withStyles\n} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\n\nimport API from '../../utils/API';\n\nconst styles = theme => ({\n    // const styles = makeStyles(theme => ({\n    // const useStyles = makeStyles(theme => ({\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        padding: theme.spacing(0, 10),\n        ...theme.mixins.toolbar,\n        paddingTop: '12vh',\n        width: '60vw',\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: '48%',\n    },\n\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n\n    wrapper: {\n        position: 'relative',\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    grouping: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        // justifyContent: 'space-between',\n        // width: '80vw',\n        width: '100%',\n    },\n    buttonGroup: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'flex-end',\n        marginTop: theme.spacing(5),\n        marginBottom: theme.spacing(15),\n        width: 'inherit',\n    },\n})\n\nclass OrganizationProfile extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // name: this.props.name,\n            // email: this.props.email,\n            // type: 'Technical'\n        }\n    }\n\n    handleFieldChange = (event) => {\n        // for a regular input field, read field name and value from the event\n        const fieldId = event.target.id;\n        const fieldValue = event.target.value;\n        // this.props.onChange(fieldName, fieldValue); // could use if updating parent state\n        // this.state.onChange(fieldName, fieldValue);\n\n        // console.log(fieldId, fieldValue);\n        this.setState(\n            { [fieldId]: fieldValue }\n        ); // this works\n        // this.setState({ testObj: { [fieldId]: fieldValue } }); // not rly. keeps adding indexed\n\n        // this.setState({\n        //         testArr: [\n        //             // ...this.state.testArr, \n        //             {\n        //                 [fieldId]: fieldValue\n        //             }\n        //         ]\n\n        //     }\n\n        // }); // \n        // console.log('handle field change :', this.state); // this will be one step slower\n    }\n\n    clearState = () => {\n        this.setState({\n            ...this.state,\n            // required\n            orgName: '',\n            orgDescription: '',\n            orgUrl: '',\n            email: '',\n            member: [this.props.id]\n            // userType: 'User',\n            // implement later for devs\n            // project: '',\n            // subject: '',\n            // description: '',\n            // owner: '',\n\n            // This is string here but DB stores it as array\n            // comment: '',\n\n            // optional in current scope\n            // url: '',\n            // status: '',\n            // resolved: '',\n            // priority: '',\n            // targetResolutionDate: '',\n            // potentialImpact: '',\n            // image: '',\n            // partImpacted: ''\n        })\n    };\n\n    getAllOrgs = () => {\n        // console.log('do me')\n    }\n\n    getOneOrg = () => {\n        // API.findOneUser(\n        //     this.props.email\n        // )\n        //     .then(res => {\n        //         res.data ?\n        //             console.log('returned :', res.data[0])\n        //             // this.setState({\n        //             //   books: res.data\n        //             // })\n        //             : console.log('no one!', res.data)\n        //     })\n        //     .catch(() =>\n        //         this.setState({\n        //             message: \"No results. Please try another query.\"\n        //         })\n        //     );\n    }\n\n    saveOrg = () => {\n        API.createOrganization({\n            name: this.state.orgName,\n            description: this.state.orgDescription,\n            url: this.state.orgUrl,\n            member: [this.props.id]\n        }).then(() => console.log('Org saved.'))\n    }\n\n    componentDidUpdate() {\n        console.log('component did update :', this.state);\n    }\n\n    render() {\n        // this.getAllOrgs();\n        const { classes } = this.props;\n        return (\n            <form className={classes.container} noValidate autoComplete=\"off\" >\n                <Typography variant='body2' style={{ marginBottom: 8 }}>Asterisk(*) denotes required fields.</Typography>\n                <div className={classes.grouping}>\n                    <br />\n                    <TextField\n                        id=\"orgName\"\n                        required\n                        // fullWidth\n                        label=\"Provider Name\"\n                        value={this.state.orgName}\n                        className={classes.textField} // disable for full width\n                        // defaultValue={this.props.name}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        onChange={this.handleFieldChange.bind(this)}\n                        style={{ margin: 8 }}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n                    <TextField\n                        id=\"email\"\n                        // fullWidth\n                        label=\"Email\"\n                        value={this.state.email}\n                        className={classes.textField}\n                        style={{ margin: 8 }}\n                        placeholder=\"info@company.com\"\n                        // className={classes.textField} // adding this will break css\n                        // helperText=\"What seems to be the trouble?\"\n                        margin=\"normal\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"outlined\"\n                        onChange={this.handleFieldChange.bind(this)}\n                    />\n                    <TextField\n                        id=\"orgDescription\"\n                        // fullWidth\n                        label=\"Description\"\n                        value={this.state.orgDescription}\n                        style={{\n                            margin: 8,\n                            width: '100%'\n                        }}\n                        // placeholder=\"Placeholder\"\n                        // className={classes.textField} // adding this will break css\n                        // helperText=\"What seems to be the trouble?\"\n                        margin=\"normal\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"outlined\"\n                        onChange={this.handleFieldChange.bind(this)}\n                    />\n                    <TextField\n                        id=\"orgUrl\"\n                        // fullWidth\n                        label=\"URL\"\n                        value={this.state.orgUrl}\n                        style={{ margin: 8, width: '100%' }}\n                        // placeholder=\"Placeholder\"\n                        // className={classes.textField} // adding this will break css\n                        // helperText=\"What seems to be the trouble?\"\n                        margin=\"normal\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"outlined\"\n                        onChange={this.handleFieldChange.bind(this)}\n                    />\n                </div>\n                <div className={classes.buttonGroup}>\n                    <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        className={classes.button}\n                        endIcon={<RotateLeftIcon>Reset Form</RotateLeftIcon>}\n                        onClick={\n                            // this.props.handleSubmitIssue(this.state.testArr) // causes loop SA\n                            () => {\n                                console.log('clicked reset while state is', this.state)\n                                // this.props.handleSubmitIssue()\n                                this.clearState()\n                            }\n                        }\n                    > Reset Form\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.button}\n                        endIcon={<Icon>send</Icon>}\n                        onClick={this.saveOrg\n                            // console.log('clicked button', this.state)\n\n                        }\n                    > Submit\n                    </Button>\n                </div>\n\n            </form >\n        )\n\n    }\n}\n\n// export default withRouter(SubmitIssue)\nexport default withRouter(withStyles(styles, { withTheme: true })(OrganizationProfile))\n","// React\nimport React\n, {\n    Component,\n    // useState\n}\n    from 'react';\nimport { withRouter } from 'react-router-dom';\n\n// Material UI\nimport {\n    // makeStyles, // used in functional component\n    // useStyles, // Stateful Components cannot use Hooks such as useStyles.\n    withStyles\n} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\n// import FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n// import { SnackbarProvider, useSnackbar } from 'notistack'; // later for feedback msg\nimport Divider from '@material-ui/core/Divider';\n\nimport API from '../../utils/API';\n\nconst styles = theme => ({\n    // const styles = makeStyles(theme => ({\n    // const useStyles = makeStyles(theme => ({\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        padding: theme.spacing(0, 10),\n        ...theme.mixins.toolbar,\n        paddingTop: '12vh',\n        width: '60vw',\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: '40%', //default 200\n    },\n\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n\n    wrapper: {\n        position: 'relative',\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    // For Select\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: '55%',\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n\n    divider: {\n        margin: '20px 0 20px 0',\n        width: '100%',\n    },\n    grouping: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'space-between',\n        width: '100%',\n    },\n    buttonGroup: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'flex-end',\n        marginTop: theme.spacing(5),\n        marginBottom: theme.spacing(15),\n        width: 'inherit',\n    },\n})\n\n// Per https://material-ui.com/components/selects/ , needed for normal implement but can't use hooks..?\n// const inputLabel = React.useRef(null);\n// React.useEffect(() => {\n//     setLabelWidth(inputLabel.current.offsetWidth);\n// }, []);\n\n// var Hello = \n// });\n\nclass ProjectProfile extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // organization info\n            // orgId: '', // ObjectId of org. For now, do not force clear?\n            // orgId: 'unknown' // initializing orgId prevents selection from staying\n\n            // project info\n            projId: '', // ObjectId of project\n            projName: '', // unique\n            projDescription: '',\n\n            // version info\n            verId: '', // ObjectId of version\n            verName: '',\n            verDescription: '',\n            // Also needs project ObjectId as ref. Use id above\n\n            // cache\n            organizationList: [], // should not be reset unless query auto restarts\n            organizationNames: [],\n            organizationDesc: [],\n\n            projectList: [],\n            projectNames: [],\n            projectDesc: [],\n\n            versionList: [],\n            versionNames: [],\n            versionDesc: [],\n\n            disableProjSelect: true, // both data types seem to work\n            disableVerSelect: 'true'\n        }\n    }\n\n    //-------------------//\n    // Handler functions //\n    //-------------------//\n    handleFieldChange = (event) => {\n        // for a regular input field, read field name and value from the event\n        const fieldId = event.target.id;\n        const fieldValue = event.target.value;\n        // this.props.onChange(fieldName, fieldValue); // could use if updating parent state\n        // this.state.onChange(fieldName, fieldValue);\n\n        // console.log(fieldId, fieldValue);\n        this.setState({ [fieldId]: fieldValue }); // works\n        // this.setState({ testObj: { [fieldId]: fieldValue } }); // adds index\n    }\n\n    handleOrgSelect = event => {\n        console.log('selected org target: ', event.target)\n        // console.log(this.state.organizationNames.indexOf(event.target.value)) // check index by name\n        let ind = this.state.organizationNames.indexOf(event.target.value)\n        // console.log(this.state.organizationList[ind]) // shows the object at index\n        // this.setState({org: event.target.value})\n        // console.log(Object.keys(this.state.organizationList[ind])) // shows array containing keys from the object\n        // console.log(Object.keys(this.state.organizationList[ind])[0]) // first key (in ObjectId form) in a string\n\n        let selectedId = ''; // must initialize as string\n        // If index was found, get the key. If not, keep blank.\n        ind !== '' ? selectedId = Object.keys(this.state.organizationList[ind])[0] : selectedId = ''\n        console.log('selected org:', selectedId);\n        this.setState({\n            orgId: selectedId,\n\n            // If any proj is selected, remove it\n            projId: '',\n            projName: '',\n            projDescription: '',\n\n            // If any version is selected, remove it\n            verId: '',\n            verName: '',\n            verDescription: ''\n        }\n            , () => { this.getAllProj() } // on org select, query proj list\n        );\n    };\n\n    handleProjSelect = event => {\n        console.log('select proj target: ', event.target)\n        let ind = this.state.projectNames.indexOf(event.target.value) // index of selected item in array\n        // console.log('step1', this.state.projectList[ind]) // the object at index\n        // console.log('step2', Object.keys(this.state.projectList[ind])) // array containing the keys from the object\n        // console.log('step3', Object.keys(this.state.projectList[ind])[0]) // \"_id\", which is the first item on the array\n        // console.log('check :', this.state.projectList[ind]);\n\n        let selectedId = Object.keys(this.state.projectList[ind])[0]; // ObjectId from DB\n        let selectedName = this.state.projectNames[ind]; // Name from DB\n        let selectedDesc = this.state.projectDesc[ind]; // Description from DB\n        console.log('selected proj:', selectedId)\n        this.setState({\n            projId: selectedId,\n            projName: selectedName,\n            projDescription: selectedDesc,\n\n            // If any version is selected, remove it\n            verId: '',\n            verName: '',\n            verDescription: ''\n        }\n            , () => this.getAllVers()) // on proj select, query version list\n    };\n\n    handleVerSelect = event => {\n        console.log('select ver target: ', event.target)\n        let ind = this.state.versionNames.indexOf(event.target.value) // get the index of selected item from array\n        // console.log(this.state.versionList[ind]) // shows the object at index\n        // console.log(Object.keys(this.state.versionList[ind])) // shows array containing just the key from the object\n        // console.log(Object.keys(this.state.versionList[ind])[0]) // that in a string\n\n        let selectedId = '';\n        let selectedName = '';\n        let selectedDesc = '';\n        // If index was found, get the key, name and desc. For some reason not, keep blank.\n        ind !== -1 ? selectedId = Object.keys(this.state.versionList[ind])[0] : selectedId = ''\n        ind !== -1 ? selectedName = this.state.versionNames[ind] : selectedName = ''\n        ind !== -1 ? selectedDesc = this.state.versionDesc[ind] : selectedDesc = ''\n        ind !== -1 ? console.log('selected vers:', selectedId) : console.log('Version index not found.')\n\n        this.setState({\n            verId: selectedId,\n            verName: selectedName,\n            verDescription: selectedDesc\n        })\n    };\n\n    clearState = () => {\n        this.setState({\n            ...this.state,\n            // organization info\n            // orgId: '', // ObjectId of org. For now, do not force clear?\n\n            // project info\n            projId: '', // ObjectId of project\n            projName: '', // unique\n            projDescription: '',\n\n            // version info\n            verId: '', // ObjectId of version\n            verName: '',\n            verDescription: '',\n            // Also needs project ObjectId as ref. Use id above\n\n            // cache\n            organizationList: [], // should not be reset unless query auto restarts\n            organizationNames: [],\n            organizationDesc: [],\n\n            projectList: [],\n            projectNames: [],\n            projectDesc: [],\n\n            versionList: [],\n            versionNames: [],\n            versionDesc: [],\n\n            disableProjSelect: 'true',\n            disableVerSelect: 'true'\n        },\n            () => { // callback inside setState guarantees sync ops\n                this.getAllOrgs() // reset org list to all (applicable, eventually)\n                // this.getAllProj() // reset proj list to all. Called at end of getAllOrgs.\n                console.log('state cleared')\n            })\n    };\n\n    handleFormSubmit = (event) => {\n\n        // Check if org ID is missing.\n        this.state.orgId === ''\n            // If missing, org was not selected; warn user.\n            // ? this.enqueueSnackbar('You must choose an organiation first. \\n If you see none, visit org profile to create one.')\n            ? console.log('choose org first. Visit org profile for creation')\n\n            // If org Id was found, check if proj ID was found.\n            : (async () => {\n                this.state.projId !== ''// If proj ID is found, proj is in DB. Update it. Use ObjectId of org\n                    ? await this.updateProject(this.state.projId, {\n                        \"name\": this.state.projName,\n                        \"description\": this.state.projDescription,\n                        \"organization\": this.state.orgId\n                    })\n                    :\n                    // (async function e() { return 'e' })().then( res => console.log(res + 'f') )\n\n                    // If projId is missing...\n                    (async () => {\n                        await this.createProj();  // first create proj anew to DB. wait until done.\n                    })()\n            })()\n                .then( // After project process...\n                    // Check if version Id is missing.\n                    this.state.verId === ''\n                        ? this.createVer() // If verId is missing, create a new ver in DB.\n                        : // If found, version is in DB. Update it. Use ObjectId of proj\n                        this.updateVersion(this.state.verId, {\n                            \"name\": this.state.verName,\n                            \"description\": this.state.verDescription,\n                            \"project\": this.state.projId\n                        })\n                )\n                .then((() => this.props.showDashboard())) // Once updated, forward to main view\n                .catch(err => console.log(err))\n    }\n\n\n    //------------------------//\n    // Organization functions //\n    //------------------------//\n    getAllOrgs = () => {\n        API.getOrgs() // works if {} is omitted\n            .then(orgs => { // hits w no params for query\n                console.log('API getOrgs returned: ', orgs.data);\n                let objects = orgs.data.map(obj => {\n                    return { [obj._id]: obj.name } // orgId : orgName\n                })\n                let names = orgs.data.map(obj => {\n                    return obj.name // orgId : orgName\n                })\n                this.setState(\n                    {\n                        organizationList: objects,\n                        organizationNames: names\n                    }\n                    // ,\n                    // () => this.getAllProj() // cb\n\n                    // prevState test. did not work\n                    // (prevState) => { // general syntax for avoiding async prob\n                    //     console.log('prevState:', prevState) // initially prints nothing?\n                    //     return {\n                    //         organizationList: objects,\n                    //         organizationNames: names,\n                    //         prevSL: prevState.length // testing\n                    //     }\n                    // })\n                )\n            })\n            .then(() => console.log('state after getAllOrg & getAllProj:', this.state))\n        // .then(() => this.getAllProj()) // query matching projects on org select\n        // works but without parameters\n    }\n\n    // NEEDS DUPLICATION PREVENTION\n    saveOrg = () => {\n        API.createOrganization({\n            name: this.state.orgName,\n            description: this.state.orgDescription,\n            url: this.state.orgUrl,\n            member: [this.props.id] // user Id\n        }).then(() => console.log('Org saved.'))\n    }\n\n    //-------------------//\n    // Project functions //\n    //-------------------//\n\n    createProj = () => {  // works\n        console.log('creating new project')\n        API.createProject({\n            name: this.state.projName,\n            description: this.state.projDescription,\n            organization: [this.state.orgId] // user Id\n        })\n            .then((res) => console.log('Project saved.', res))\n            .catch(error => console.log(error))\n            .then(() => this.getAllProj()) // refresh proj list\n    }\n\n    updateProject = async (id, data) => { // works\n        console.log(`update proj w/ ${id} and this data:`, data)\n        await API.updateProject(id, data)\n            .then(result => {\n                console.log('updateProject returned data: ', result.data)\n                return result\n            })\n            .catch(error => console.log('error occurred!', error));\n    }\n\n    // Query projects matching selected organization\n    getAllProj = () => { // works w/o params\n        API.getProjects(\n            { // organization: this.state.orgId // non func\n            })\n            .then(projects => {\n                console.log('get all proj', projects);\n\n                let objects = [];\n                let names = [];\n                let descriptions = [];\n\n                for (let obj of projects.data) { // iterable array, so for-in does not work\n                    if (obj.organization === this.state.orgId) {\n                        objects.push({ [obj._id]: obj.name }) // projId : projName\n                        names.push(obj.name); // save names separately // works\n                        descriptions.push(obj.description); // save descriptions separately\n                    }\n                } // .map does not work since it may create \"undefined\" holes in output array\n                // .filter does not work since condition sits on same level as data to save\n\n                objects.includes(undefined) ? // no longer need to check undefineds due to change above, but will leave for now\n                    this.setState({\n                        projectList: [],\n                        projectNames: [],\n                        projectDesc: [],\n                        disableProjSelect: true // prevent proj pick\n                    },\n                        console.log('No relevant project. ', objects, names, descriptions)\n                        // console.log('No relevant project. ', o2, n2)\n                    ) :\n                    // If relevant projects are found, add list to state and enable project selection\n                    // objects.length > 0 && names.length > 0 ?\n                    this.setState({\n                        projectList: objects,\n                        projectNames: names,\n                        projectDesc: descriptions,\n                        disableProjSelect: false // enables project select\n                    }\n                        , console.log('Relevant projects found. Adding to state:', objects, names, descriptions)\n                        // , console.log('Relevant projects found. Adding to state:', o2, n2)\n                    )\n\n            })\n            .then(() => console.log('state after getAllProj, filtered :', this.state))\n            .then(this.getAllVers()) // query matching versions on proj select // works?\n            .catch(err => console.log(err));\n    }\n\n\n    //-------------------//\n    // Version functions //\n    //-------------------//\n    createVer = () => {\n        API.createVersion({\n            name: this.state.verName,\n            description: this.state.verDescription,\n            project: [this.state.projId] // project Id as ref\n        })\n            .then(res => console.log('Version saved.', res))\n            .catch(error => console.log(error))\n    }\n\n    updateVersion = async (id, data) => { // works\n        console.log(`update version w/ ${id} and this data:`, data)\n        await API.updateVersion(id, data)\n            .then(result => {\n                console.log('updateVersion returned data: ', result.data)\n                return result\n            })\n            .catch(error => console.log(error));\n    }\n\n    getAllVers = () => {\n        API.getVersions({\n            // project: this.state.projId // seems to work but below logic is for unfiltered data\n        })\n            .then(versions => {\n                console.log('get all vers', versions)\n                let objects = [];\n                let names = [];\n                let descriptions = [];\n\n                for (let obj of versions.data) { // iterable array, so for-in does not work\n                    if (obj.project === this.state.projId) {\n                        objects.push({ [obj._id]: obj.name }) // verId : verName\n                        names.push(obj.name); // save names separately\n                        descriptions.push(obj.description); // save descriptions separately\n                    }\n                } // .map does not work since it may create \"undefined\" holes in output array\n                // .filter does not work since condition sits on same level as data to save\n\n                // If blanks exist, this is remnant from relevant query\n                objects.includes(undefined) ?\n                    this.setState({\n                        versionList: [],\n                        versionNames: [],\n                        versionDesc: [],\n                        disableVerSelect: true // prevent select\n                    },\n                        console.log('No relevant version. ', objects, names, descriptions)\n                    ) :\n                    // If relevant result is found, add list to state and enable selection\n                    this.setState({\n                        versionList: objects,\n                        versionNames: names,\n                        versionDesc: descriptions,\n                        disableVerSelect: false // enables select\n                    }, console.log('Relevant versions found. Adding to state:', objects, names, descriptions)\n                    )\n            })\n    }\n\n    getOneVer = () => {\n        API.findOneVersion(this.state.verId)\n            .then(ver => console.log('get one ver', ver))\n    }\n\n\n    //--------------------//\n    //  Lifecyle Methods  //\n    //--------------------//\n    componentDidMount() {\n        this.getAllOrgs() // adds to state the list of org objects and array of org names\n    }\n\n    componentDidUpdate() {\n        console.log('component did update :', this.state);\n        // // prevState test did not work\n        // this.state.orgId !== prevState.orgId ?\n        //     () => {\n        //         console.log('new orgId detected:', this.state.orgId)\n        //         this.getAllProj()\n\n        //     }\n        //     : null // query matching projects on org select\n    }\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <form className={classes.container} noValidate autoComplete=\"off\" >\n                <Typography variant='body2'>Asterisk(*) denotes required fields.</Typography>\n                    <br />\n                    {/* Organization */}\n                <div className={classes.grouping}>\n                    <FormControl variant=\"outlined\" className={classes.formControl}>\n                        <InputLabel\n                            // ref={inputLabel} \n                            id=\"demo-simple-select-outlined-label-org\">\n                            Provider\n                            </InputLabel>\n                        <Select\n                            labelId=\"demo-simple-select-outlined-label-org\"\n                            // id={this.state.orgId || \"demo-simple-select-outlined\"}\n                            id={\"demo-simple-select-outlined\"}\n                            key={Date.now}\n                            placeholder='Provider Name'\n                            value={\n                                this.state.orgId !== '' ? this.state.orgId : '' // does not change display\n                                // collin tried: this.state.orgId\n                            }\n                            onChange={this.handleOrgSelect\n                                // this.handleFieldChange // not reading correctly?\n                                // this.setState({ event.target.value })\n                            }\n                        // labelWidth={'500px'}\n                        >\n                            {\n                                this.state.organizationNames ?\n                                    this.state.organizationNames.map((org, ind) => {\n                                        // console.log(Object.keys(this.state.organizationList[ind])[0])\n                                        // console.log(org)\n                                        // <option key={org.key} value={org.key}>{org.value}</option>\n                                        return < MenuItem\n                                            id={Object.keys(this.state.organizationList[ind])[0]}\n                                            // id={org} // collin tried\n                                            key={org}\n                                            name={org}\n                                            value={org} >\n                                            {/* error: you have provided an out-of-range value `undefined` for the select component. */}\n                                            {org}\n                                        </MenuItem>\n                                    })\n                                    : () => console.log('state during MenuItem render', this.state)\n                                // None should not be an option. Create org first if missing.\n                            }\n                        </Select>\n                    </FormControl>\n                    <TextField\n                        id=\"orgId\"\n                        // REMEMBER, LIST IS FOR NAME BUT SAVES ID\n                        disabled\n                        // fullWidth\n                        className={classes.textField}\n                        label=\"Provider ID\"\n                        value={this.state.orgId}\n                        style={{ margin: 8 }}\n                        margin=\"normal\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"filled\"\n                        onChange={this.handleFieldChange.bind(this)}\n                    />\n                    <Divider className={classes.divider} />\n                </div>\n\n                {/* project */}\n                <div className={classes.grouping}>\n                    <FormControl variant=\"outlined\"\n                        className={classes.formControl}\n                    // {this.state.projectList ? null : disabled}\n                    >\n                        <InputLabel\n                            // ref={inputLabel} \n                            id=\"demo-simple-select-outlined-label-proj\">\n                            Select Project\n                        </InputLabel>\n                        <Select\n                            labelId=\"demo-simple-select-outlined-label-proj\"\n                            // id={this.state.orgId || \"demo-simple-select-outlined\"}\n                            id={\"demo-simple-select-outlined-proj\"}\n                            key={Date.now}\n                            placeholder='Project Name'\n                            // value={this.state.orgName}\n                            onChange={\n                                // onOpen={ // doesn't work but unsure if due to choice\n                                // this.handleFieldChange // not reading correctly?\n                                // this.setState({ event.target.value })\n                                this.handleProjSelect\n                            }\n                        // labelWidth={'500px'}\n                        >\n                            {\n                                this.state.projectNames ?\n                                    this.state.projectNames.map((proj, i) => {\n                                        // this.state.projectList ? // unexpected\n                                        // Object.keys(this.state.projectList[i])[0]: \n                                        return <MenuItem\n                                            id={proj}\n                                            key={Date.now}\n                                            name={proj}\n                                            value={proj}\n                                            disabled={\n                                                this.state.disableProjSelect ? true : false\n                                                // this.state.orgId !== '' ? 'false' : 'true'\n                                            }\n                                        >\n                                            {proj}\n                                            {console.log('proj list at render:', this.state.projectList[i])}\n                                        </MenuItem>\n                                    }) : <br />\n                                // 'None' should not be an option. Create org first if missing.\n                            }\n                        </Select>\n                    </FormControl>\n                    <TextField\n                        id=\"projId\"\n                        // REMEMBER, LIST IS FOR NAME BUT SAVES ID\n                        disabled\n                        // fullWidth\n                        label=\"Project ID\"\n                        className={classes.textField}\n                        value={this.state.projId}\n                        style={{ margin: 8 }}\n                        margin=\"normal\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"filled\"\n                        onChange={this.handleFieldChange.bind(this)}\n                    />\n                    <TextField\n                        id=\"projName\"\n                        required\n                        fullWidth\n                        disabled={this.state.orgId === '' ? true : false}\n                        label=\"Project/Product Name\"\n                        value={this.state.projName}\n                        // className={classes.textField} // disabled for full width\n                        // defaultValue={this.props.name}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        onChange={this.handleFieldChange.bind(this)}\n                        style={{ margin: 8 }}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n                    <TextField\n                        id=\"projDescription\"\n                        fullWidth\n                        disabled={this.state.orgId === '' ? true : false}\n                        label=\"Description\"\n                        value={this.state.projDescription}\n                        style={{ margin: 8 }}\n                        // placeholder=\"Placeholder\"\n                        // className={classes.textField} // adding this will break css\n                        // helperText=\"What seems to be the trouble?\"\n                        margin=\"normal\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"outlined\"\n                        onChange={this.handleFieldChange.bind(this)}\n                    />\n                    <Divider className={classes.divider} />\n                </div>\n                {/* Version */}\n                <div className={classes.grouping}>\n                    <FormControl variant=\"outlined\" className={classes.formControl}>\n                        <InputLabel id=\"demo-simple-select-outlined-label-ver\">\n                            Select Version\n                        </InputLabel>\n                        <Select\n                            labelId=\"demo-simple-select-outlined-label-ver\"\n                            // id={this.state.orgId || \"demo-simple-select-outlined\"}\n                            id={\"demo-simple-select-outlined-ver\"}\n                            placeholder='Version / Specification'\n                            // value={this.state.verName}\n                            onChange={\n                                // onOpen={ // doesn't work but unsure if due to choice\n                                // this.handleFieldChange // not reading correctly?\n                                // this.setState({ event.target.value })\n                                this.handleVerSelect\n                            }\n                        // labelWidth={'500px'}\n                        >\n                            {\n                                this.state.versionNames ?\n                                    this.state.versionNames.map((ver, i) => {\n                                        // this.state.versionList ? // unexpected\n                                        // Object.keys(this.state.versionList[i])[0]: \n                                        return <MenuItem\n                                            id={ver}\n                                            key={ver}\n                                            name={ver}\n                                            value={ver}\n                                            disabled={\n                                                this.state.disableVerSelect ? true : false\n                                            }\n                                        >\n                                            {ver}\n                                            {console.log('ver list at render:', this.state.versionList[i])}\n                                        </MenuItem>\n                                    }) : <br />\n                                // 'None' should not be an option. Create org first if missing.\n                            }\n                        </Select>\n                        {console.log('Disable project selection at render is:', this.state.disableProjSelect)}\n                    </FormControl>\n\n                    <TextField\n                        id=\"verId\"\n                        // REMEMBER, LIST IS FOR NAME BUT SAVES ID\n                        disabled\n                        // fullWidth\n                        className={classes.textField}\n                        label=\"Version ID\"\n                        value={this.state.verId}\n                        style={{ margin: 8 }}\n                        margin=\"normal\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"filled\"\n                        onChange={this.handleFieldChange.bind(this)}\n                    />\n                    <TextField\n                        id=\"verName\"\n                        required\n                        fullWidth\n                        label=\"Version / Specification Name\"\n                        // className={classes.textField} // disabled for full width\n                        // value={this.state.verName || '(not applicable)'}\n                        value={this.state.verName}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        onChange={this.handleFieldChange.bind(this)}\n                        style={{ margin: 8 }}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n\n                    <TextField\n                        id=\"verDescription\"\n                        fullWidth\n                        label=\"Description\"\n                        value={this.state.verDescription}\n                        style={{ margin: 8 }}\n                        // placeholder=\"Placeholder\"\n                        // className={classes.textField} // adding this will break css\n                        // helperText=\"What seems to be the trouble?\"\n                        margin=\"normal\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"outlined\"\n                        onChange={this.handleFieldChange.bind(this)}\n                    />\n                    {/* <Divider className={classes.divider} /> */}\n                </div>\n                <div className={classes.buttonGroup}>\n                    <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        className={classes.button}\n                        endIcon={<RotateLeftIcon>Reset Form</RotateLeftIcon>}\n                        onClick={\n                            // this.props.handleSubmitIssue(this.state.testArr) // causes infinite loop\n                            () => {\n                                console.log('form reset while state is:', this.state)\n                                this.clearState()\n                            }\n                        }\n                    > Reset Form\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.button}\n                        endIcon={<Icon>send</Icon>}\n                        onClick={this.handleFormSubmit}\n                    > Submit\n                    </Button>\n                </div>\n\n            </form >\n        )\n\n    }\n}\n\n// export default withRouter(SubmitIssue)\nexport default withRouter(withStyles(styles, { withTheme: true })(ProjectProfile))\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\n// import CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\n// import CardMedia from '@material-ui/core/CardMedia';\n// import Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { Divider } from '@material-ui/core';\nimport Avatar from '@material-ui/core/Avatar';\n\nconst useStyles = makeStyles(theme => ({\n    // card\n    card: {\n        maxWidth: 500\n        // 345\n        ,\n        minWidth: '100%',\n        // marginLeft: 240,\n        marginTop: theme.spacing(1),\n    },\n    //   media: {\n    //     height: 140,\n    //   },\n\n    divider: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    // avatar (profile image)\n    avatarRoot: {\n        display: 'flex',\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n        alignItems: 'center',\n        justifyContent: 'space-between'\n    },\n    avatarBlock: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    avatar: {\n        display: 'inline-block',\n        marginRight: theme.spacing(2),\n    },\n    bigAvatar: {\n        width: 60,\n        height: 60,\n    },\n    target: {\n        fontWeight: 'bold',\n        color: 'red',\n    },\n\n    // texts: {\n    //     display: 'flex',\n    //     flexWrap: 'wrap',\n    // },\n}));\n\nexport default function CommentCard(props) {\n    const classes = useStyles();\n\n\n\n    return (\n        <Card className={classes.card}>\n            <CardActionArea>\n                {/* <CardMedia\n                className={classes.media}\n                image=\"/static/images/cards/contemplative-reptile.jpg\"\n                title=\"Contemplative Reptile\"\n                /> */}\n                <CardContent>\n                    <div className={classes.avatarRoot}>\n                        <div className={classes.avatarBlock}>\n                            <Avatar alt={props.displayName}\n                                src={props.photoURL}\n                                className={classes.avatar}\n                            >\n                                {props.displayName}\n                            </Avatar>\n                            <Typography gutterBottom variant=\"h6\" component=\"h2\" display='inline'>{props.displayName}</Typography>\n                        </div>\n                        <div>\n                            <Typography>{props.createdAt}</Typography>\n                        </div>\n                    </div>\n                    <Typography display='inline' variant=\"subtitle1\" color=\"textSecondary\" component=\"p\">\n                        {props.actionDesc}\n                        {/* Changed <span>XXXXXX</span> to <span className={classes.target}>YYYYYYY</span>. */}\n                    </Typography>\n                    {/* <Typography display='inline' variant=\"subtitle2\" color=\"textSecondary\" component=\"p\">{'\\xa0\\xa0'}(+3 other changes)</Typography> */}\n                    <Divider className={classes.divider} />\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\"\n                    // className={classes.texts}\n                    >\n                        {props.comment}\n                    </Typography>\n                </CardContent>\n            </CardActionArea>\n            {/* <CardActions>\n                        <Button size=\"small\" color=\"primary\">\n                            Share\n                </Button>\n                        <Button size=\"small\" color=\"primary\">\n                            Learn More\n                </Button>\n                    </CardActions> */}\n        </Card>\n\n\n    );\n}","// React\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\n// Material UI\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { Divider } from '@material-ui/core';\nimport 'date-fns';\n// import DateTimePicker from '../../components/DateTimePicker/DateTimePicker';\n\nimport CommentCard from '../../components/CommentCard'\nimport Paper from '@material-ui/core/Paper';\n\nimport API from '../../utils/API';\n// import { minHeight } from '@material-ui/system';\n\nconst styles = theme => ({\n    // const styles = makeStyles(theme => ({\n    // const useStyles = makeStyles(theme => ({\n    topContainer: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        height: '100vh',\n        alignItems: 'flex-start',\n    },\n\n    containerOne: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        padding: theme.spacing(0, 5),\n        ...theme.mixins.toolbar,\n        // paddingLeft: 240,\n        paddingTop: '10vh',\n        width: '55vw', // split left & right\n        height: '100%',\n    },\n    containerTwo: { // comments section\n        width: '35vw',\n        paddingTop: '10vh',\n        paddingLeft: '1vw',\n        paddingRight: '1vw',\n        backgroundColor: '#bbdefb',\n\n        // make scrollable\n        maxHeight: window.screen.availHeight,\n        overflow: 'auto',\n        // ADD MEDIA QUERY FOR SMALL VIEWPORT. MOVE TO BOTTOM or ADD BTN THAT OPENS MODAL\n        minHeight: window.screen.availHeight,\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: '40%',\n    },\n\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n\n    wrapper: {\n        position: 'relative',\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    // For Select\n    formControl: {\n        margin: theme.spacing(1),\n        // marginTop: theme.spacing(2), // lines up verically w textfields\n        minWidth: '55%',\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n\n    divider: {\n        margin: '20px 0 20px 0',\n    },\n\n    toolbar: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        padding: theme.spacing(0, 1),\n        ...theme.mixins.toolbar,\n    },\n    grouping: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'space-between',\n        width: '100%',\n    },\n})\n\nclass ManageIssue extends Component {\n    // function SubmitIssue(props) {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedDate: '-',\n            userId: '',\n\n            // organization info //\n            // orgId: '', // ObjectId of org. For now, do not force clear?\n            // orgId: 'unknown' // initializing orgId prevents selection from staying\n\n            // project info //\n            projId: '', // ObjectId of project\n            projName: '', // unique\n            // projDescription: '',\n\n            // version info //\n            verId: '', // ObjectId of version\n            verName: '',\n            // verDescription: '',\n            // Also needs project ObjectId as ref. Use id above\n\n            // cache //\n            organizationList: [], // should not be reset unless query auto restarts\n            organizationNames: [],\n            organizationDesc: [],\n\n            projectList: [],\n            projectNames: [],\n            projectDesc: [],\n\n            versionList: [],\n            versionNames: [],\n            versionDesc: [],\n\n            // issue query result\n            issueReporters: [],\n            issueOwners: [],\n            issueResolved: [],\n            issuePriorities: [],\n            issueTargetRes: [],\n\n            issueTypes: [],\n            issueStatus: [],\n            issueList: [], // objects (of objid-subject pairs?)\n            issueNames: [],\n            issueDesc: [],\n\n            issueDates: [],\n            issueURLs: [],\n            issueImageURLs: [],\n            issueCommentIds: [],\n            issueImpacts: [],\n\n            issueReporterNames: [],\n\n            issueObjectList: [],\n            // issue now has reporter name. use it?\n\n            // Toggle these to disable Select tag below un-selected higher category\n            disableProjSelect: true, // string data type seems to work as well\n            disableVerSelect: true,\n            disableIssueSelect: true,\n\n            // issue\n\n            issuePreState: {}, // GET query result\n            // issuePostState: {}, // updated on input change; used for POST req & for actionDesc array.\n            issueStatusChoices: ['Open', 'Investigating', 'Implementing', 'Escalated', 'Resolved', 'Closed'], // do not clear\n            issuePriorityChoices: ['Critical', 'High', 'Medium', 'Low', 'Future'],  // do not clear\n\n            issueAspects: [ // prioritized list used for Comment's actionDescription\n                'reporter', // basically immutable\n                'owner',\n                'resolved',\n\n                'priority',\n                'targetResolutionDate',\n                'type',\n\n                'status',\n                'subject',\n                'description',\n\n                'potentialImpact',\n                'timing',\n                'url',\n\n                'imageURL',\n                'organization',\n                'project',\n\n                'version',\n                'comments', // ObjectId array. \n                'reporterName'\n            ],\n\n            reporter: '', // basically immutable\n            owner: '',\n            resolved: false, // Boolean. Updated if status if Resolved/Closed.\n            priority: '', // one from issuePriorityChoices\n            targetResolutionDate: '',\n            type: 'Technical', // restricted in current scope\n            status: '',\n            subject: '', // equivalent to issue name\n            description: '', // only issue needs desc on this page\n            potentialImpact: '',\n            timing: '', // vs selectedDate?\n            url: '',\n            imageURL: '',\n            comment: '', // accept string & commit into Comment model's array\n            reporterName: '',\n\n            // also Id for org, proj & ver as ref\n\n            // comment creation info //\n\n            commentVisibilityChoices: [  // do not clear\n                // 'Everyone', \n                'Organization members and reporter' // locked in current scope\n                // 'Organization members only'\n                // 'Project members only'\n                // 'Project members and reporter', etc. in plans\n            ],\n\n            issue: '', // ObjectId. Issue ref\n            commenter: '', // ObjectId. User ref\n            actionDesc: [], // prioritized list of issue aspect changes in string format\n            // If issue status is Resolved/Closed, CAN take final item (or the final comment?) as Final Resolution.\n            visibility: '', // one from commentVisibilityChoices\n            image: '', // from User Profile\n            // timestamps\n            createdAt: '', // to be read from db only\n            updatedAt: '', // to be read from db only\n            commenterName: this.props.userName,\n\n            // comment query info //\n\n            commentOrgIds: [],\n            commentProjIds: [],\n            commentVerIds: [],\n            commentIssueIds: [],\n            commentCommenterIds: [],\n\n            commentActionsDescriptions: [],\n            commentTexts: [],\n            commentVisibilities: [],\n            commentPhotoURLs: [],\n            commentTimestamps: [],\n\n            commentFullObjects: [],\n\n            commentAuthors: [], // displayName\n            commentOrgNames: [],\n            commentProjNames: [],\n            commentVerNames: [],\n            commentIssueSubjects: []\n\n        }\n    }\n\n    //-------------------//\n    // Handler functions //\n    //-------------------//\n    handleFieldChange = event => {\n        // for a regular input field, read field name and value from the event\n        const fieldId = event.target.id;\n        const fieldValue = event.target.value;\n        // this.props.onChange(fieldName, fieldValue); // could use if updating parent state\n        // this.state.onChange(fieldName, fieldValue);\n\n        // console.log(fieldId, fieldValue);\n        this.setState(\n            { [fieldId]: fieldValue } // this works\n        );\n    }\n\n    handleDateChange = date => {\n        console.log('handleDateChange got date:', date)\n        this.setState({\n            ...this.state,\n            // timing: date\n            selectedDate: date\n        })\n    };\n\n    handleOrgSelect = event => {\n        console.log('selected org target: ', event.target)\n        // console.log(this.state.organizationNames.indexOf(event.target.value)) // check index by name\n        let ind = this.state.organizationNames.indexOf(event.target.value)\n        // console.log(this.state.organizationList[ind]) // shows the object at index\n        // this.setState({org: event.target.value})\n        // console.log(Object.keys(this.state.organizationList[ind])) // shows array containing keys from the object\n        // console.log(Object.keys(this.state.organizationList[ind])[0]) // first key (in ObjectId form) in a string\n\n        let selectedId = '', selectedOrgName = ''; // must initialize as string\n        // If index was found, get the key. If not, keep blank.\n        ind !== '' ? selectedId = Object.keys(this.state.organizationList[ind])[0] : selectedId = '';\n        ind !== '' ? selectedOrgName = this.state.organizationNames[ind] : selectedOrgName = '';\n        console.log('selected org:', selectedId);\n        this.setState({\n            ...this.state,\n            orgId: selectedId,\n            orgName: selectedOrgName,\n\n            // If any proj is selected, remove it\n            projId: '',\n            projName: '',\n            projDescription: '',\n\n            // If any version is selected, remove it\n            verId: '',\n            verName: '',\n            verDescription: '',\n\n            // If any issue is selected, remove it\n            reporter: '',\n            owner: '',\n            resolved: '',\n            priority: '',\n            targetResolutionDate: '',\n            type: 'Technical', // fixed in current scope\n            status: '',\n            subject: '',\n            description: '',\n            potentialImpact: '',\n            timing: '',\n            url: '',\n            imageURL: '',\n            comments: [], // ObjectIds of Comment\n\n            // If any comment data is there, remove it\n            issue: '',\n            commenter: '',\n            actionDesc: [],\n            visibility: '',\n            comment: '' // String on a Comment object\n\n            // CLEAR ISSUES AND COMMENTS INFO AS WELL //\n        }\n            , () => { this.getAllProj() } // on org select, query proj list\n        );\n    };\n\n    handleProjSelect = event => {\n        console.log('select proj target: ', event.target)\n        let ind = this.state.projectNames.indexOf(event.target.value) // index of selected item in array\n        let selectedId = Object.keys(this.state.projectList[ind])[0]; // ObjectId from DB\n        let selectedName = this.state.projectNames[ind]; // Name from DB\n        let selectedDesc = this.state.projectDesc[ind]; // Description from DB\n        console.log('selected proj:', selectedId)\n        this.setState({\n            ...this.state,\n            projId: selectedId,\n            projName: selectedName,\n            projDescription: selectedDesc,\n\n            // If any version is selected, remove it\n            verId: '',\n            verName: '',\n            verDescription: ''\n\n            // CLEAR ISSUES AND COMMENTS INFO AS WELL // \n        }\n            , () => this.getAllVers()) // on proj select, query version list\n    };\n\n    handleVerSelect = event => {\n        console.log('select ver target: ', event.target)\n        let ind = this.state.versionNames.indexOf(event.target.value) // get the index of selected item from array\n        let selectedId = '';\n        let selectedName = '';\n        let selectedDesc = '';\n        // If index was found, get the key, name and desc. For some reason not, keep blank.\n        ind !== -1 ? selectedId = Object.keys(this.state.versionList[ind])[0] : selectedId = ''\n        ind !== -1 ? selectedName = this.state.versionNames[ind] : selectedName = ''\n        ind !== -1 ? selectedDesc = this.state.versionDesc[ind] : selectedDesc = ''\n        ind !== -1 ? console.log('selected vers:', selectedId) : console.log('Version index not found.')\n\n        this.setState({\n            ...this.state,\n            verId: selectedId,\n            verName: selectedName,\n            verDescription: selectedDesc\n\n            // CLEAR ISSUES AND COMMENTS INFO AS WELL //\n        }\n            , () => this.getAllIssues()) // on ver select, query issue list\n    };\n\n    handleIssueSelect = event => {\n        console.log('select issue event.target: ', event.target)\n        let ind = this.state.issueNames.indexOf(event.target.value) // get the index of selected item from array\n        let id = '';\n        let name = ''; // subject\n        let desc = '';\n        let timing = '';\n        let URL = '';\n        let ImageURL = '';\n        let Comment = ''; // ObjectId in Comment schema\n        let Reporter = '';\n        let owner = '';\n        let resolved = false;\n        let priority = '';\n        let targetRes = '';\n        let type = '';\n        let status = '';\n        let impact = '',\n            reporterName = ''\n\n        // If index was found, get the key, name and desc. For some reason not, keep blank.\n        ind !== -1 ? id = Object.keys(this.state.issueList[ind])[0] : id = '';\n        ind !== -1 ? console.log('selected issue Id:', id) : console.log('Issue index not found.');\n\n        ind !== -1 ? Reporter = this.state.issueReporters[ind] : Reporter = '';\n        ind !== -1 ? owner = this.state.issueOwners[ind] : owner = '';\n        ind !== -1 ? resolved = this.state.issueResolved[ind] : resolved = '';\n        ind !== -1 ? priority = this.state.issuePriorities[ind] : priority = '';\n        ind !== -1 ? targetRes = this.state.issueTargetRes[ind] : targetRes = '';\n\n        ind !== -1 ? type = this.state.issueTypes[ind] : type = '';\n        ind !== -1 ? status = this.state.issueStatus[ind] : status = '';\n        ind !== -1 ? name = this.state.issueNames[ind] : name = '';\n        ind !== -1 ? desc = this.state.issueDesc[ind] : desc = '';\n        ind !== -1 ? timing = this.state.issueDates[ind]\n            // Date.parse\n            // new Date(this.state.issueDates[ind])  // convert string to Date object in ms unit\n            : timing = '';\n        ind !== -1 ? URL = this.state.issueURLs[ind] : URL = '';\n        ind !== -1 ? ImageURL = this.state.issueImageURLs[ind] : ImageURL = '';\n        ind !== -1 ? Comment = this.state.issueCommentIds[ind] : Comment = '';\n        ind !== -1 ? impact = this.state.issueImpacts[ind] : impact = '';\n        ind !== -1 ? reporterName = this.state.issueReporterNames[ind] : reporterName = '';\n\n        this.setState({\n            ...this.state,\n            issue: id,\n            subject: name,\n            description: desc,\n            // timing: timing,\n            selectedDate: timing,\n            url: URL,\n            imageURL: ImageURL,\n            comments: Comment,\n            reporter: Reporter,\n            owner: owner,\n            resolved: resolved,\n            priority: priority,\n            targetResolutionDate: targetRes,\n            type: type,\n            status: status,\n            potentialImpact: impact,\n            reporterName: reporterName\n\n            // CLEAR COMMENTS INFO AS WELL //\n        },\n            () => this.getAllComments())\n    };\n\n    // handleSubmit = () => {\n    //     await \n    // }\n\n    clearState = () => {\n        this.setState({\n            ...this.state,\n            // selectedDate: '',\n\n            // organization info //\n            // orgId: '', // ObjectId of org. For now, do not force clear?\n            // orgId: 'unknown' // initializing orgId prevents selection from staying\n\n            // project info //\n            projId: '', // ObjectId of project\n            projName: '', // unique\n            // projDescription: '',\n\n            // version info //\n            verId: '', // ObjectId of version\n            verName: '',\n            // verDescription: '',\n            // Also needs project ObjectId as ref. Use id above\n\n            // cache //\n            // organizationList: [], // should not be reset unless query auto restarts\n            // organizationNames: [],\n            // organizationDesc: [],\n\n            projectList: [],\n            projectNames: [],\n            projectDesc: [],\n\n            versionList: [],\n            versionNames: [],\n            versionDesc: [],\n\n            // issue info\n            issueList: [],\n            issueNames: [],\n            issueDesc: [],\n\n            issueObjectList: [],\n\n            // Toggle these to disable Select tag below un-selected higher category\n            disableProjSelect: true, // string data type seems to work as well\n            disableVerSelect: true,\n            disableIssueSelect: true,\n\n            issuePreState: {}, // GET query result\n            // issuePostState: {}, // updated on input change; used for POST req & for actionDesc array. (useful?)\n\n            issueAspects: [ // prioritized list used for Comment's actionDescription\n                'reporter', // basically immutable\n                'owner',\n                'resolved',\n                'priority',\n                'targetResolutionDate',\n                'type',\n                'status',\n                'subject',\n                'description',\n                'potentialImpact',\n                'timing',\n                'url',\n                'imageURL',\n                'comments' // ObjectId array. \n            ],\n\n            reporter: '', // basically immutable\n            owner: '',\n            resolved: '', // \n            priority: '',\n            targetResolutionDate: '',\n            type: 'Technical', // fixed in current scope\n            status: '',\n            subject: '',\n            description: '',\n            potentialImpact: '',\n            timing: '',\n            url: '',\n            imageURL: '',\n            comment: [], // accept string & commit into Comment model's array\n            // also Id for org, proj & ver as ref\n\n            // comment creation info //\n\n            issue: '', // ObjectId. Issue ref\n            commenter: '', // ObjectId. User ref\n            actionDesc: [], // prioritized list of issue aspect changes in string format\n            // If issue status is Resolved/Closed, CAN take final item (or the final comment?) as Final Resolution.\n            visibility: '', // all, organization, project\n            image: '', // from User Profile\n\n            // timestamps\n            createdAt: '', // read from db only\n            updatedAt: '', // read from db only\n\n            // comment query info //\n\n            commentOrgIds: [],\n            commentProjIds: [],\n            commentVerIds: [],\n            commentIssueIds: [],\n            commentCommenterIds: [],\n\n            commentActionsDescriptions: [],\n            commentTexts: [],\n            commentVisibilities: [],\n            commentPhotoURLs: [],\n            commentTimestamps: [],\n\n            commentFullObjects: [],\n            commentAuthors: []\n        })\n    };\n\n    //------------------------//\n    // Organization functions //\n    //------------------------//\n    getAllOrgs = () => {\n        API.getOrgs() // works if {} is omitted\n            .then(orgs => { // hits w no params for query\n                // console.log('API getOrgs returned: ', orgs.data);\n                let objects = orgs.data.map(obj => {\n                    return { [obj._id]: obj.name } // orgId : orgName\n                })\n                let names = orgs.data.map(obj => {\n                    return obj.name // orgId : orgName\n                })\n                this.setState({\n                    organizationList: objects,\n                    organizationNames: names\n                })\n            })\n        // .then(() => console.log('state after getAllOrg:', this.state))\n    }\n\n    // NEEDS DUPLICATION PREVENTION\n    saveOrg = () => {\n        API.createOrganization({\n            name: this.state.orgName,\n            description: this.state.orgDescription,\n            url: this.state.orgUrl,\n            member: [this.props.id] // user Id\n        }).then(() => console.log('Org saved.'))\n    }\n\n    //-------------------//\n    // Project functions //\n    //-------------------//\n\n    createProj = () => {  // works\n        console.log('creating new project')\n        API.createProject({\n            name: this.state.projName,\n            description: this.state.projDescription,\n            organization: [this.state.orgId] // user Id\n        })\n            .then((res) => console.log('Project saved.', res))\n            .catch(error => console.log(error))\n            .then(() => this.getAllProj()) // refresh proj list\n    }\n\n    updateProject = async (id, data) => { // works\n        console.log(`update proj w/ ${id} and this data:`, data)\n        await API.updateProject(id, data)\n            .then(result => {\n                console.log('updateProject returned data: ', result.data)\n                return result\n            })\n            .catch(error => console.log('error occurred!', error));\n    }\n\n    // Query projects matching selected organization\n    getAllProj = () => { // works w/o params\n        API.getProjects(\n            { // organization: this.state.orgId // non func\n            })\n            .then(projects => {\n                // console.log('get all proj', projects);\n\n                let objects = [];\n                let names = [];\n                let descriptions = [];\n\n                for (let obj of projects.data) { // iterable array, so for-in does not work\n                    if (obj.organization === this.state.orgId) {\n                        objects.push({ [obj._id]: obj.name }) // projId : projName\n                        names.push(obj.name); // save names separately // works\n                        descriptions.push(obj.description); // save descriptions separately\n                    }\n                } // .map does not work since it may create \"undefined\" holes in output array\n                // .filter does not work since condition sits on same level as data to save\n\n                objects.includes(undefined) ? // no longer need to check undefineds due to change above, but will leave for now\n                    this.setState({\n                        ...this.state,\n                        projectList: [],\n                        projectNames: [],\n                        projectDesc: [],\n                        disableProjSelect: true // prevent proj pick due to lack of valid choice\n                    },\n                        console.log('No relevant project. ', objects, names, descriptions)\n                        // console.log('No relevant project. ', o2, n2)\n                    ) :\n                    // If relevant projects are found, add list to state and enable project selection\n                    // objects.length > 0 && names.length > 0 ?\n                    this.setState({\n                        ...this.state,\n                        projectList: objects,\n                        projectNames: names,\n                        projectDesc: descriptions,\n                        disableProjSelect: false // enables project select\n                    }\n                        , console.log('Relevant projects found. Adding to state:', objects, names, descriptions)\n                        // , console.log('Relevant projects found. Adding to state:', o2, n2)\n                    )\n\n            })\n            // .then(() => console.log('state after getAllProj, filtered :', this.state))\n            .then(this.getAllVers()) // query matching versions on proj select // works?\n            .catch(err => console.log(err));\n    }\n\n\n    //-------------------//\n    // Version functions //\n    //-------------------//\n    createVer = () => {\n        API.createVersion({\n            name: this.state.verName,\n            description: this.state.verDescription,\n            project: [this.state.projId] // project Id as ref\n        })\n            // .then(res => console.log('Version saved.', res))\n            .catch(error => console.log(error))\n    }\n\n    updateVersion = async (id, data) => { // works\n        console.log(`update version w/ ${id} and this data:`, data)\n        await API.updateVersion(id, data)\n            .then(result => {\n                console.log('updateVersion returned data: ', result.data)\n                return result\n            })\n            .catch(error => console.log(error));\n    }\n\n    getAllVers = () => {\n        API.getVersions({\n            // project: this.state.projId // seems to work but below logic is for unfiltered data\n        })\n            .then(versions => {\n                // console.log('get all vers', versions)\n                let objects = [];\n                let names = [];\n                let descriptions = [];\n\n                for (let obj of versions.data) { // iterable array, so for-in does not work\n                    if (obj.project === this.state.projId) {\n                        objects.push({ [obj._id]: obj.name }) // verId : verName\n                        names.push(obj.name); // save names separately\n                        descriptions.push(obj.description); // save descriptions separately\n                    }\n                } // .map does not work since it may create \"undefined\" holes in output array\n                // .filter does not work since condition sits on same level as data to save\n\n                // If blanks exist, this is remnant from relevant query\n                objects.includes(undefined) ?\n                    this.setState({\n                        versionList: [],\n                        versionNames: [],\n                        versionDesc: [],\n                        disableVerSelect: true // prevent select due to lack of valid choice\n                    },\n                        console.log('No relevant version. ', objects, names, descriptions)\n                    ) :\n                    // If relevant result is found, add list to state and enable selection\n                    this.setState({\n                        versionList: objects,\n                        versionNames: names,\n                        versionDesc: descriptions,\n                        disableVerSelect: false // enables select\n                    }, console.log('Relevant versions found. Adding to state:', objects, names, descriptions)\n                    )\n            })\n    }\n\n    getOneVer = () => {\n        API.findOneVersion(this.state.verId)\n            .then(ver => console.log('get one ver', ver))\n    }\n\n    //-----------------//\n    // Issue functions //\n    //-----------------//\n\n    // *** add dev fields as well? *** //\n    getAllIssues = () => {\n        API.getIssues({\n            // project: this.state.projId // may work but below logic is for unfiltered data\n        })\n            .then(issues => {\n                console.log('get all issues:', issues)\n                let reporters = []\n                    , owners = []\n                    , resolved = []\n                    , priority = []\n                    , targetResolutionDate = []\n\n                    , type = []\n                    , status = []\n                    , subject = []\n                    , description = []\n                    , potentialImpact = []\n\n                    , timing = []\n                    , url = []\n                    , imageURL = []\n                    , comments = [] // ObjectId array.\n                    , reporterNames = []\n\n                let objects = []; // ObjId-Subject pair?\n\n                let fullObjects = []; // useful?\n                // let names = [];\n                // let descriptions = [];\n                // let dates = [];\n                // let URLs = [];\n                // let imageURLs = [];\n                // let comments = []; // ObjectIds from Comment schema\n\n                for (let obj of issues.data) { // iterable array, so for-in does not work\n                    if (obj.version === this.state.verId) {\n                        console.log('pushing object to State issue arrays', obj);\n                        reporters.push(obj.reporter);\n                        owners.push(obj.owner);\n                        resolved.push(obj.resolved);\n                        priority.push(obj.priority);\n                        targetResolutionDate.push(obj.targetResolutionDate);\n\n                        type.push(obj.type);\n                        status.push(obj.status);\n                        subject.push(obj.subject);\n                        // alert(subject + ' was pushed as subject');\n                        description.push(obj.description);\n                        potentialImpact.push(obj.potentialImpact);\n\n                        timing.push(obj.timing);\n                        url.push(obj.url);\n                        imageURL.push(obj.imageURL);\n                        comments.push(obj.comments);\n                        reporterNames.push(obj.reporterName); // displayNames\n\n                        objects.push({ [obj._id]: obj.subject })\n                        console.log('issue object is now == ', objects) // key is issue ObjectId : value is issue subject\n                        fullObjects.push(obj); // full issue object\n\n                        // names.push(obj.subject); // save subjects separately\n                        // descriptions.push(obj.description); // save descriptions separately\n                        // dates.push(obj.timing); // save dates(timing) separately\n                        // URLs.push(obj.url);\n                        // imageURLs.push(obj.imageURL);\n                        // comments.push(obj.comments); // makes array of arrays\n                    }\n                } // .map does not work since it may create \"undefined\" holes in output array\n                // .filter does not work since condition sits on same level as data to save\n\n                // If blanks exist, this is remnant from relevant query\n                objects.includes(undefined) ?\n                    this.setState({\n\n                        issueReporters: [],\n                        issueOwners: [],\n                        issueResolved: [],\n                        issuePriorities: [],\n                        issueTargetRes: [],\n\n                        issueTypes: [],\n                        issueStatus: [],\n                        issueList: [], // objects (of objid-subject pairs?)\n                        issueNames: [], // subjects\n                        issueDesc: [],\n\n                        issueDates: [],\n                        issueURLs: [],\n                        issueImageURLs: [],\n                        issueCommentIds: [],\n                        issueImpacts: [],\n\n                        issueObjectList: [],\n                        issueReporterNames: [],\n\n                        disableIssueSelect: true // prevent select due to lack of valid choice\n                    },\n                        console.log('No relevant issues.'\n                            // , objects, names, descriptions, dates, URLs, comments, fullObjects\n                        )\n                    ) :\n                    // If relevant result is found, add list to state and enable selection\n                    this.setState({\n                        issueReporters: reporters,\n                        issueOwners: owners,\n                        issueResolved: resolved,\n                        issuePriorities: priority,\n                        issueTargetRes: targetResolutionDate,\n\n                        issueTypes: type,\n                        issueStatus: status,\n                        issueList: objects, // objects (of objid-subject pairs?)\n                        issueNames: subject, // subjects\n                        issueDesc: description,\n\n                        issueDates: timing,\n                        issueURLs: url,\n                        issueImageURLs: imageURL,\n                        issueCommentIds: comments,\n                        issueImpacts: potentialImpact,\n\n                        issueObjectList: fullObjects,\n                        issueReporterNames: reporterNames,\n\n                        disableIssueSelect: false // enables select\n\n                        // issueDesc: descriptions,\n                        // issueDates: dates,\n                        // issueURLs: URLs,\n                        // issueImageURLs: imageURLs,\n                        // issueCommentIds: comments,\n\n\n                    }, console.log('Relevant issues found. Adding to state.'\n                        // , objects, names, descriptions, dates, URLs, comments, fullObjects\n                    )\n                    )\n            })\n    }\n\n    updateIssue = async () => {\n        await API.updateIssue(this.state.issue, {\n            reporter: this.props.userId, // ObjectId\n            type: this.state.issueType,\n            timing: this.state.selectedDate,\n\n            organization: this.state.orgId, // ObjectId\n            project: this.state.projId, // ObjectId\n            version: this.state.verId, // ObjectId\n\n            subject: this.state.subject,\n            description: this.state.description,\n            url: this.state.url,\n\n            status: this.state.status,\n            resolved: this.state.resolved,\n            owner: this.state.owner, // ObjectId\n\n            priority: this.state.priority,\n            targetResolutionDate: this.state.targetResolutionDate,\n            potentialImpact: this.state.potentialImpact,\n\n            imageURL: this.state.imageURL,\n            partImpacted: this.state.partImpacted\n\n            // comment should be added separately.\n            // findOneAndUpdate does not remove omitted prop\n            // displayNames(reporterName) does not change.\n\n        }).then((res) => {\n            // this.setState({\n            //     ...this.state,\n            //     issueId: res.data._id})\n            console.log('updateIssue has run.', res);\n        })\n\n        await this.createComment();\n    }\n\n    //-------------------//\n    // Comment functions //\n    //-------------------//\n\n\n    findCommenter = async (id) => {\n        await API.findUserById(id)\n            .then(res => {\n                console.log('findCommenter returned :', res.data)\n                return res.data.displayName\n                // let tempCommenters = this.state.commentAuthors;\n                // tempCommenters.push(res.data.displayName);\n                // res.data // If user data was returned, add to state.\n                //     ? this.setState({\n                //         ...this.state,\n                //         commentAuthors: tempCommenters // Note that filter will be needed if later auto-generating Organization User Account for Orgs.\n                //     })\n                //     : console.log('Id not found in DB!', res.data)\n            })\n            .catch((err) => console.log(err)\n                // this.setState({\n                //     message: \"No results. Please try another query.\"\n                // })\n            );\n    }\n\n    findCommenterNames = () => {\n\n    }\n\n    getAllComments = async () => {\n        await API.getComments({\n            // project: this.state.projId // may work but below logic is for unfiltered data\n        })\n            .then(comments => {\n                console.log('get all comments:', comments)\n\n                let orgIds = [], projIds = [], verIds = [], // issueIds is above\n                    issueIds = [], // ObjectIds from Comment schema\n                    commenterIds = [], // ObjectIds from User\n\n                    actions = [], // contains arrays of string\n                    commentTexts = [], // string\n                    visibilities = [], // string\n                    photoURLs = [], // string\n                    timestamps = [], // obj\n\n                    fullObjects = [],\n                    commenterNames = [],\n                    objects = []; // key-val pairs\n\n                // let prettyDate = {};\n\n                (async () => {\n                    for (let obj of comments.data) { // iterable array, so for-in does not work\n                        if (obj.issue === this.state.issue) { // match issue Id\n                            orgIds.push(obj.organization);\n                            projIds.push(obj.project);\n                            verIds.push(obj.version);\n                            issueIds.push(obj.issue);\n                            await commenterIds.push(obj.commenter);\n                            console.log('commenterIds:', commenterIds)\n\n                            actions.push(obj.actionDescription);\n                            commentTexts.push(obj.comment);\n                            visibilities.push(obj.visibility);\n                            photoURLs.push(obj.avatar);\n\n                            // let tempTime = Date.parse(obj.timestamps.created_at); // convert to ms\n                            // console.log(typeof tempTime, tempTime)\n                            // prettyDate = new Date(tempTime); // convert to Date obj\n                            // console.log('pretty date :', prettyDate);\n                            // timestamps.push(prettyDate);\n                            timestamps.push(obj.timestamps);\n\n                            fullObjects.push(obj); // full issue object\n                            // commenterNames.push()\n\n                            objects.push({ [obj._id]: obj.subject }) // key is comment ObjectId : value is comment subject\n                            // Just for undefined checker\n                            commenterNames.push(obj.commenterName);\n\n\n                        }\n                    } // .map does not work since it may create \"undefined\" holes in output array\n                    // .filter does not work since condition sits on same level as data to save\n\n                    console.log('commenterIds after:', commenterIds);\n\n                    // for (let id of commenterIds) {\n                    //     let val = this.findCommenter(id);\n\n                    //     await commenterNames.push(val);\n                    // }\n\n                    await console.log('commenterNames was filled!', commenterNames)\n                    // commenterNames = await commenterIds.map(function (commenterId) {\n                    //     this.findCommenter(commenterId)\n                    // })\n\n                    fullObjects.reverse(); // latest first. changes original array\n\n                    // let tempAuthors = this.state.commentAuthors;\n                    // tempAuthors.push(res.data.displayName);\n                    // this.setState({\n                    //     ...this.state,\n                    //     commentAuthors: tempAuthors\n                    // })\n\n                    // If blanks exist, this is remnant from relevant query\n                    objects.includes(undefined) ?\n                        await this.setState({\n                            commentOrgIds: [],\n                            commentprojIds: [],\n                            commentverIds: [],\n                            commentIssueIds: [],\n                            commentCommenterIds: [],\n\n                            commentActionsDescriptions: [],\n                            commentTexts: [],\n                            commentVisibilities: [],\n                            commentPhotoURLs: [],\n                            commentTimestamps: [],\n\n                            commentAuthors: [],\n                            commentfullObjects: []\n                        },\n                            console.log('No relevant comments.', fullObjects)\n                        ) :\n                        // If relevant result is found, add list to state and enable selection\n                        await this.setState({\n                            commentOrgIds: orgIds,\n                            commentProjIds: projIds,\n                            commentVerIds: verIds,\n                            commentIssueIds: issueIds,\n                            commentCommenterIds: commenterIds,\n\n                            commentActionsDescriptions: actions,\n                            commentTexts: commentTexts,\n                            commentVisibilities: visibilities,\n                            commentPhotoURLs: photoURLs,\n                            commentTimestamps: timestamps,\n\n                            commentAuthors: commenterNames,\n                            commentFullObjects: fullObjects // the only one that matters\n                        },\n                            () => {\n                                this.state.commentFullObjects.length > 0\n                                    ? console.log('Relevant comments found and added to state:', fullObjects)\n                                    : console.log('No comments found.')\n                            }\n                        )\n                })()\n\n            })\n    }  // End of getAllComments function\n\n    // UPDATE THIS\n    createComment = async () => { // works\n        // (async () => {\n        //     await alert('hi')\n        //     await alert('2')\n        // })()\n\n        await API.createComment({\n            organization: this.state.orgId, // ObjectId\n            project: this.state.projId, // ObjectId\n            version: this.state.verId, // ObjectId\n            issue: this.state.issue, // ObjectId\n            commenter: this.props.userId, // ObjectId\n\n            actionDescription: ['Commented'], // EXPAND ON THIS W PRE STATE //\n            comment: this.state.comment,\n            visibility: 'Organization members and reporter',\n            avatar: this.props.photoURL,\n\n            timestamps: { updated_at: this.state.selectedDate },\n            commenterName: this.props.userName,\n\n            organizationName: this.state.orgName,\n            projectName: this.state.projName,\n            versionName: this.state.verName,\n            issueSubject: this.state.subject\n\n            // ADD ISSUE ID TO REFS IN USER AND ISSUE?\n\n        })\n            .then((res) => {\n                console.log('createComment has run.', res);\n                this.getAllComments();\n                // Query relevant comments & display.\n                // await API.getComments()\n                // this.clearState(); \n            })\n\n        // for (let id of this.state.commentCommenterIds) {\n        //     await this.findCommenter(id);\n        // }\n        // console.log('renderComments collected commenter names:', this.state.commentAuthors);\n\n\n        // let x = await this.state.commentFullObjects.map(function (commentObj, index) {\n        // this.findCommenter(commentObj.commenter)\n    }\n    // this.props.showDashboard // forward to main view\n\n\n    updateComment = async (id, data) => {\n        console.log(`update proj w/ ${id} and this data:`, data)\n        await API.updateComment(id, data)\n            .then(result => {\n                console.log('updateComment returned data: ', result.data)\n                return result\n            })\n            .catch(error => console.log('error occurred!', error));\n    }\n\n    // renderComments = async () => {\n    //     // for (let i of this.state.commentFullObjects) {\n    //     //     console.log('RENDERING:', i)\n    //     //     return <CommentCard\n    //     //         displayName={this.findCommenter(i.commenter)}\n    //     //         photoURL={i.avatar}\n    //     //         createdAt={i.timestamps.created_at}\n    //     //         actionDesc={i[0]} // for now, just 1st action //\n    //     //         comment={i.comment}\n    //     //     />\n    //     // }\n\n    //     this.state.commentFullObjects.map(function (commentObj, index) {\n    //         console.log('RENDERING:', commentObj)\n    //         return <CommentCard\n    //             key={index}\n    //             displayName=\"test name\"\n    //             // {this.state.commentCommenterIds[0]} // need names, not id\n    //             photoURL={commentObj.avatar}\n    //             createdAt={commentObj.timestamps.created_at}\n    //             actionDesc={commentObj.actionDescription[0]} // for now, just 1st action //\n    //             comment={commentObj.comment}\n    //         />\n    //     })\n    // }\n\n    //--------------------//\n    //  Lifecyle Methods  //\n    //--------------------//\n    componentDidMount() {\n        // this.setState({\n        //     ...this.state,\n        //     userId: this.props.userId\n        // }, \n        console.log('component did mount :', this.state)\n        // )\n        this.getAllOrgs() // adds to state the list of org objects and array of org names\n    }\n\n    componentDidUpdate() {\n        console.log('component did update :', this.state\n            // 'typeof this.state.selectedDate:', typeof this.state.selectedDate,\n            // 'typeof this.state.timing:', typeof this.state.timing,\n        );\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <Paper className={classes.topContainer}>\n                <form className={classes.containerOne} noValidate autoComplete=\"off\" >\n                    <div className={classes.grouping}>\n                        <Typography variant='body2' className={classes.textField}>Asterisk(*) denotes required fields.</Typography>\n                    </div>\n                    <Divider className={classes.divider} />\n\n                    {/* Organization */}\n                    <div className={classes.grouping}>\n                        <FormControl variant=\"outlined\" className={classes.formControl}>\n                            <InputLabel\n                                // ref={inputLabel} \n                                id=\"demo-simple-select-outlined-label-org\"\n                                required>\n                                Provider\n                            </InputLabel>\n                            <Select\n                                labelId=\"demo-simple-select-outlined-label-org-ManageIssue\"\n                                id={\"demo-simple-select-outlined-ManageIssue\"}\n                                key={'demo-simple-select-outlined-ManageIssue'}\n                                placeholder='Provider Name'\n                                value={\n                                    this.state.orgId !== '' ? this.state.orgId : '' // does not change display\n                                    // collin tried: this.state.orgId\n                                }\n                                onChange={this.handleOrgSelect\n                                    // this.handleFieldChange // not reading correctly\n                                }\n                            >\n                                {\n                                    this.state.organizationNames ?\n                                        this.state.organizationNames.map((org, ind) => {\n                                            // console.log(Object.keys(this.state.organizationList[ind])[0])\n                                            // console.log(org)\n                                            // <option key={org.key} value={org.key}>{org.value}</option>\n                                            return < MenuItem\n                                                id={Object.keys(this.state.organizationList[ind])[0]}\n                                                // id={org} // collin tried\n                                                key={org}\n                                                name={org}\n                                                value={org} >\n                                                {/* error: you have provided an out-of-range value `undefined` for the select component. */}\n                                                {org}\n                                            </MenuItem>\n                                        })\n                                        : () => console.log('state during MenuItem render', this.state)\n                                    // None should not be an option. Create org first if missing.\n                                }\n                            </Select>\n                        </FormControl>\n                        <TextField\n                            id=\"orgId\"\n                            // REMEMBER, LIST IS FOR NAME BUT SAVES ID\n                            disabled\n                            // fullWidth\n                            className={classes.textField}\n                            label=\"Provider ID\"\n                            value={this.state.orgId}\n                            style={{ margin: 8 }}\n                            margin=\"normal\"\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            variant=\"filled\"\n                            onChange={this.handleFieldChange.bind(this)}\n                        />\n                    </div>\n\n\n                    {/* Project */}\n                    <div className={classes.grouping}>\n                        <FormControl variant=\"outlined\"\n                            className={classes.formControl}\n                        // {this.state.projectList ? null : disabled}\n                        >\n                            <InputLabel\n                                // ref={inputLabel} \n                                id=\"demo-simple-select-outlined-label-proj-ManageIssue\"\n                                required>\n                                Project/Product\n                        </InputLabel>\n                            <Select\n                                labelId=\"demo-simple-select-outlined-label-proj-ManageIssue\"\n                                // id={this.state.orgId || \"demo-simple-select-outlined\"}\n                                id={\"demo-simple-select-outlined-proj-ManageIssue\"}\n                                key={'demo-simple-select-outlined-proj-ManageIssue'}\n                                placeholder='Project Name'\n                                // value={this.state.orgName}\n                                onChange={\n                                    // onOpen={ // doesn't work but unsure if due to choice\n                                    // this.handleFieldChange // not reading correctly?\n                                    // this.setState({ event.target.value })\n                                    this.handleProjSelect\n                                }\n                            // labelWidth={'500px'}\n                            >\n                                {\n                                    this.state.projectNames ?\n                                        this.state.projectNames.map((proj, i) => {\n                                            // this.state.projectList ? // unexpected\n                                            // Object.keys(this.state.projectList[i])[0]: \n                                            return <MenuItem\n                                                id={proj}\n                                                key={`MI-proj-select-${i}`}\n                                                name={proj}\n                                                value={proj}\n                                                disabled={\n                                                    this.state.disableProjSelect ? true : false\n                                                    // this.state.orgId !== '' ? 'false' : 'true'\n                                                }\n                                            >\n                                                {proj}\n                                                {/* {console.log('proj list at render:', this.state.projectList[i])} */}\n                                            </MenuItem>\n                                        }) : <br />\n                                    // 'None' should not be an option. Create org first if missing.\n                                }\n                            </Select>\n                            {/* {console.log('Disable project selection at render is:', this.state.disableProjSelect)} */}\n                        </FormControl>\n                        <TextField\n                            id=\"projId\"\n                            // REMEMBER, LIST IS FOR NAME BUT SAVES ID\n                            disabled\n                            // fullWidth\n                            label=\"Project ID\"\n                            className={classes.textField}\n                            value={this.state.projId}\n                            style={{ margin: 8 }}\n                            margin=\"normal\"\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            variant=\"filled\"\n                            onChange={this.handleFieldChange.bind(this)}\n                        />\n                    </div>\n\n                    {/* Version */}\n                    <div className={classes.grouping}>\n                        <FormControl variant=\"outlined\" className={classes.formControl}>\n                            <InputLabel id=\"demo-simple-select-outlined-label-ver\" required>\n                                Version/Specification\n                        </InputLabel>\n                            <Select\n                                labelId=\"demo-simple-select-outlined-label-ver\"\n                                id={\"demo-simple-select-outlined-ver\"}\n                                placeholder='Version / Specification'\n                                // value={this.state.verName}\n                                onChange={\n                                    this.handleVerSelect\n                                }\n                            >\n                                {\n                                    this.state.versionNames ?\n                                        this.state.versionNames.map((ver, i) => {\n                                            return <MenuItem\n                                                id={ver}\n                                                key={Math.random()}\n                                                name={ver}\n                                                value={ver}\n                                                disabled={\n                                                    this.state.disableVerSelect ? true : false\n                                                }\n                                            >\n                                                {ver}\n                                                {/* {console.log('ver list at render:', this.state.versionList[i])} */}\n                                            </MenuItem>\n                                        }) : <br />\n                                    // 'None' should not be an option. Create org first if missing.\n                                }\n                            </Select>\n                            {/* {console.log('Disable version selection at render is:', this.state.disableVerSelect)} */}\n                        </FormControl>\n                        <TextField\n                            id=\"verId\"\n                            disabled\n                            className={classes.textField}\n                            label=\"Version ID\"\n                            value={this.state.verId}\n                            style={{ margin: 8 }}\n                            margin=\"normal\"\n                            InputLabelProps={{ shrink: true, }}\n                            onChange={this.handleFieldChange.bind(this)}\n                            variant=\"filled\"\n                        />\n                    </div>\n                    <Divider className={classes.divider} />\n\n                    {/* Issue */}\n                    <div className={classes.grouping}>\n                        <FormControl variant=\"outlined\" className={classes.formControl}>\n                            <InputLabel id=\"demo-simple-select-outlined-label-issue\" required>\n                                Issue\n                            </InputLabel>\n                            <Select\n                                labelId=\"demo-simple-select-outlined-label-issue\"\n                                id={\"demo-simple-select-outlined-issue\"}\n                                placeholder='Issue'\n                                onChange={\n                                    this.handleIssueSelect\n                                }\n                            // labelWidth={'500px'}\n                            >\n                                {\n                                    this.state.issueNames ?\n                                        this.state.issueNames.map((iss, i) => {\n                                            return <MenuItem\n                                                id={iss}\n                                                key={Math.random()}\n                                                name={iss}\n                                                value={iss}\n                                                disabled={\n                                                    this.state.disableIssueSelect ? true : false\n                                                }\n                                            >\n                                                {iss}\n                                                {/* {console.log('issue list at render:', this.state.issueList[i])} */}\n                                            </MenuItem>\n                                        }) : <br />\n                                    // 'None' should not be an option. Create org first if missing.\n                                }\n                            </Select>\n                            {/* {console.log('Disable issue selection at render is:', this.state.disableIssueSelect)} */}\n                        </FormControl>\n                        <TextField\n                            id=\"issue\"\n                            disabled\n                            label=\"Issue ID\"\n                            className={classes.textField}\n                            value={this.state.issue}\n                            style={{ margin: 8 }}\n                            margin=\"normal\"\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            variant=\"filled\"\n                        />\n                    </div>\n                    <div className={classes.grouping}>\n                        <TextField\n                            id=\"subject\"\n                            // Enable update for developer+\n                            disabled={this.props.userType === 'Reporter' ? true : false}\n                            fullWidth\n                            multiline\n                            label=\"Issue Subject\"\n                            // placeholder=\"Any thoughts?\"\n                            value={this.state.subject}\n                            // className={classes.textField}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            onChange={this.handleFieldChange.bind(this)}\n                            style={{ margin: 8 }}\n                        />\n                        <TextField\n                            id=\"description\"\n                            required\n                            multiline\n                            fullWidth\n                            rows=\"4\"\n                            key=\"outlined-multiline-static\"\n                            label=\"Issue Description\"\n                            value={this.state.description}\n                            style={{ margin: 8 }}\n                            margin=\"normal\"\n                            onChange={this.handleFieldChange.bind(this)}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            variant=\"outlined\"\n                        />\n                        <TextField\n                            id=\"type\"\n                            disabled\n                            label=\"Issue Type\"\n                            defaultValue={this.state.type}\n                            className={classes.textField}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            onChange={this.handleFieldChange.bind(this)}\n                        />\n                        <TextField\n                            id=\"timing\"\n                            disabled\n                            label=\"Timing\"\n                            value={this.state.selectedDate}\n                            className={classes.textField}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            onChange={this.handleFieldChange.bind(this)}\n                        />\n                        {/* <Typography>Timing:  {this.state.selectedDate}</Typography> */}\n                        {/* <DateTimePicker\n                        selectedDate=\n                        {this.state.selectedDate}\n                        // {this.state.timing} // naming seems to interfere. debug\n                        handleDateChange={this.handleDateChange}\n                    /> */}\n                        <TextField\n                            id=\"url\"\n                            fullWidth\n                            label=\"URL\"\n                            // placeholder=\"Any thoughts?\"\n                            value={this.state.url}\n                            // className={classes.textField}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            onChange={this.handleFieldChange.bind(this)}\n                            style={{ margin: 8 }}\n                        />\n                        {/* <TextField\n                        id=\"imageURL\" // excess separation?\n                        fullWidth\n                        label=\"Image URL\"\n                        // placeholder=\"Any thoughts?\"\n                        value={this.state.imageURL}\n                        // className={classes.textField}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        onChange={this.handleFieldChange.bind(this)}\n                    /> */}\n                        <TextField\n                            id=\"comment\"\n                            fullWidth\n                            multiline\n                            label=\"Comment\"\n                            placeholder=\"Any thoughts?\"\n                            value={this.state.comment}\n                            // className={classes.textField}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            onChange={this.handleFieldChange.bind(this)}\n                            style={{ margin: 8 }}\n                        />\n                        <div className='button-group'>\n                            <Button\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                className={classes.button}\n                                endIcon={<RotateLeftIcon>Reset Form</RotateLeftIcon>}\n                                onClick={\n                                    () => {\n                                        console.log('clicked reset while state is', this.state)\n                                        this.clearState()\n                                    }\n                                }\n                            > Reset Form\n                    </Button>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                className={classes.button}\n                                endIcon={<Icon>send</Icon>}\n                                onClick={\n                                    () => {\n                                        this.updateIssue();\n                                    }\n                                }\n                            > Submit\n                                    </Button>\n                        </div>\n                        {/* end of button-group */}\n                    </div>\n\n                    {/* End of containerOne */}\n                </form>\n\n                <div width='1vw'>\n                    <Divider orientation=\"vertical\" />\n                </div>\n\n                <div className={classes.containerTwo}>\n                    {this.state.commentAuthors.length > 0\n                        ? this.state.commentFullObjects.map(function (commentObj, index) {\n                            // console.log('RENDERING:', commentObj)\n                            return <CommentCard\n                                key={index}\n                                displayName={commentObj.commenterName\n                                    // this.state.commentAuthors.reverse()[index]\n                                }\n                                photoURL={commentObj.avatar}\n                                createdAt={commentObj.timestamps.created_at}\n                                actionDesc={commentObj.actionDescription[0]} // for now, just 1st action //\n                                comment={commentObj.comment}\n                            />\n                        })\n\n                        // ()=>this.renderComments()\n                        : <Typography>(No Comments to Display.)</Typography>\n                    }\n\n                </div>\n            </Paper>\n        )\n\n    }\n}\n\n// export default withRouter(SubmitIssue)\nexport default withRouter(withStyles(styles, { withTheme: true })(ManageIssue))\n","import React, { Component } from 'react';\nimport {\n    // BrowserRouter as Router, Switch, Route,\n    // Redirect\n    // , useHistory, useLocation, withRouter, Link\n} from \"react-router-dom\";\n\n// Material UI\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\n// import { SnackbarProvider, useSnackbar } from 'notistack'; // later for feedback msg\n\n// Pages\nimport Sidebar from '../../components/Sidebar';\nimport Dashboard from '../Dashboard';\nimport SubmitIssue from '../SubmitIssue';\nimport UserProfile from '../UserProfile';\nimport OrganizationProfile from '../OrganizationProfile';\nimport ProjectProfile from '../ProjectProfile';\nimport ManageIssue from '../ManageIssue';\n\n// Auth\nimport firebase from \"firebase\";\n\nimport API from '../../utils/API'\n// import isSignedIn from '../../utils/isSignedIn';\n\n\nconst styles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n}))\n\nclass DeveloperView extends Component {\n\n    constructor(props) {\n        super(props);\n        // State updater function to be passed down into the context provider per https://reactjs.org/docs/context.html\n        this.toggleTheme = () => {\n            this.setState(state => ({\n                // \n            }));\n        }\n\n        // this.routeChange = this.routeChange.bind(this); // if you have a func outside of state, you can make it part of state by doing this\n\n        // Set default auth state of false\n        this.state = {\n            activeView: 'Dashboard',\n            isSignedIn: false,\n\n            // user info\n            id: \"\",\n            email: \"\",\n            name: \"\", // Separate first and last name later\n            userType: 'Developer', // default should be Reporter\n            // Case Sensitive\n\n            // photoURL: '',\n\n            // issue: {} or []?\n            // required\n\n            type: 'Technical', // issue type, not user\n            organization: '',\n            project: '',\n            subject: '',\n            description: '',\n            comment: [],\n            owner: '',\n\n            // optional in this version\n            url: '',\n            status: '',\n            resolved: '',\n            priority: '',\n            targetResolutionDate: '',\n            potentialImpact: '',\n            image: '',\n            partImpacted: '',\n\n            // for dashboard\n            //affiliatedOrgCount: 0,\n            affiliatedOrgIds: [],\n            affiliatedProjIds: [],\n            relatedIssueIds: [],\n\n            affiliatedOrgNames: [],\n            affiliatedProjNames: [],\n            relatedIssueNames: [],\n\n            relatedCommentObjects: []\n        }\n\n        // This allows the functions to be passed via props.\n        this.getUser = this.getUser.bind(this);\n        this.determineView = this.determineView.bind(this);\n        this.showSubmitIssue = this.showSubmitIssue.bind(this);\n        this.showDashboard = this.showDashboard.bind(this);\n        this.handleSubmitIssue = this.handleSubmitIssue.bind(this);\n    };\n\n    //-----------//\n    // Functions //\n    //-----------//\n\n    // test only\n    changeName = () => {\n        this.setState({ name: 'Super Dan' })\n        alert('name changed!')\n    }\n\n    getUser = () => {\n        API.findOneUser(\n            this.props.email || this.state.email\n        )\n            .then(res => {\n                console.log('getUser returned :', res.data)\n                res.data // If user data was returned, add to state.\n                    ? this.setState({\n                        ...this.state,\n                        id: res.data[0]._id // Note that filter will be needed if later auto-generating Organization User Account for Orgs.\n                    },\n                        this.getUserOrgs() // use the id to get affiliated orgs\n                    )\n                    : console.log('Email not found in DB!', res.data)\n            })\n            .catch(() =>\n                this.setState({\n                    message: \"No results. Please try another query.\"\n                })\n            );\n    }\n\n    showDashboard = () => {\n        this.setState({ activeView: 'Dashboard' }\n            , this.authenticate())\n    }\n\n    showSubmitIssue = () => {\n        this.setState({ activeView: 'Submit Issue' })\n    }\n\n    showUserProfile = () => {\n        this.setState({ activeView: 'User Profile' })\n    }\n\n    showOrganizationProfile = () => {\n        this.setState({ activeView: 'Organization Profile' })\n    }\n\n    showProjectProfile = () => {\n        this.setState({ activeView: 'Project Profile' })\n    }\n\n    showManageIssue = () => {\n        this.setState({ activeView: 'Manage Issue' })\n    }\n\n    handldIssueChange = (event) => {\n        this.setState({ value: event.target.value });\n    }\n\n    handleSubmitIssue = (key, val) => {\n        /*\n        let issue = {};\n        tempIssue = { ...this.state.issue }; // copy issue to prevent direct state update\n        console.log('copied state issue:', tempIssue)\n        if (this.state.issue.length) {\n            let keys = Object.keys(this.state.issue) // get array of keys in object\n            console.log(\"this issue's keys are \", keys) // array of strings            \n\n            // for (let ea in this.state.issue) { // iterate over key-value pairs in object and give value\n            // console.log('ea: ', ea) // object of key-val pairs\n            // this.handleUserSave(ea); // SAVE FULL OBJECT TO DB\n\n            for (let key in keys) { // iterate over key-value pairs in object and give value\n                // 'key' comes out ot be index num\n                console.log('For key ' + keys[key] + ', value is ', this.state.issue[keys[key]])\n                // console.log('ea[key]: ', ea[key])\n            }\n        }\n        */\n        // const keys = [\n        //     \"type\",\n        //     \"organization\",\n        //     \"project\",\n        //     \"subject\",\n        //     \"description\",\n        //     \"comment\",\n        //     \"owner\",\n\n        //     // optional in this version\n        //     \"url\",\n        //     \"status\",\n        //     \"resolved\",\n        //     \"priority\",\n        //     \"targetResolutionDate\",\n        //     \"potentialImpact\",\n        //     \"image\",\n        //     \"partImpacted\"\n        // ]\n\n        this.setState({ [key]: val })\n        //Object.keys(this.state) // may not secure sequence\n\n        // this.setState({ arr }) // update state of \"issue\" with new variable \"issue\"\n        // this.setState({ comment: [1, 2, \"3\"] }) // works\n        // this.setState({ [key]: value })\n        // this.setState({testArr: arr})\n\n    }\n\n    // can write promise this way\n    // function signupUser() {\n    //     return new Promise(resolve => {\n    //       setTimeout(resolve, 1000);\n    //     });\n    //   }\n    //   const handleSubmit = e => {\n    //     e.preventDefault();\n    //     signupUser().then(clearState);\n    //   };\n\n    determineView = (text) => {\n        // console.log(`\\n dev view got back `, text)\n        // this.setState({ received: text })\n        // if (this.props.activeView) {\n        //     // console.log('\\n DeveloperView sees this.props.activeView :', this.props.activeView);\n        // }\n        // let nextView;\n\n        // switch (this.props.activeView) {\n        //     case '/submitissue':\n        //         nextView = <SubmitIssue />\n        //         console.log(' nextView is: ', nextView);\n        //         this.setState({ activeView: 'Submit Issue' })\n        //         break;\n        //     default:\n        //         console.log('hitting default');\n        //         this.setState({ activeView: 'Dashboard' })\n        //         nextView = <Dashboard />\n        // }\n        // return nextView;\n    }\n\n    // Call this to run API method saveUser\n    handleUserSave = (user) => {\n        API.createUser({\n            // \"email\": user[Object.keys(user)[0]],\n            // \"firstName\": user[Object.keys(user)[1]],\n            // \"lastName\": user[Object.keys(user)[2]],\n            // \"photoURL\": user[Object.keys(user)[3]],\n            // \"submittedIssues\": user[Object.keys(user)[4]],\n            // \"userType\": user[Object.keys(user)[5]],\n            // \"affiliatedOrganization\": user[Object.keys(user)[6]],\n            // \"affiliatedProject\": user[Object.keys(user)[7]]\n        })\n        // .then(() => this.getBooks());\n\n        // WILL NEED QUALIFIER LATER\n        // const user = this.state.users.find(user => user.email === email);\n\n        // console.log(user[Object.keys(user)[0]]);\n        //     console.log(user[Object.keys(user)[1]]);\n        //     console.log(user[Object.keys(user)[2]]);\n        //     console.log(user[Object.keys(user)[3]]);\n        //     console.log(user[Object.keys(user)[4]]);\n        //     console.log(user[Object.keys(user)[5]]);\n        //     console.log(user[Object.keys(user)[6]]);\n        //     console.log(user[Object.keys(user)[7]])\n\n    };\n\n    checkNewUser = (authEmail) => {\n        API.findOneUser(\n            // If an email was passed, use it. If not use state.\n            authEmail || this.state.email\n        )\n            .then(res =>\n                // If user is found, save id to state. \n                // If not, send user to user profile for user creation.\n                // console.log('checking new user status.', res)\n                res !== ''\n                    ? this.setState({ 'id': res.data[0]['_id'] }, console.log('user found:', res.data))\n                    // console.log('User found :', res.data[0]['_id']) // works\n                    : () => {\n                        console.log('User NOT found', res.data) // works\n                        this.showUserProfile();\n                    }\n            )\n            .catch(() =>\n                this.setState({\n                    message: \"No results. Please try another query.\"\n                })\n            );\n    }\n\n    authenticate = () => {\n        firebase.auth().onAuthStateChanged(user => {\n            // console.log('\\n DeveloperView sees user :', user.displayName, user.email, user.photoURL, user.emailVerified, user.uid)\n\n            // Save signin data to state\n            this.setState({\n                isSignedIn: !!user, // Coerce the value to be a boolean regardless of original type\n                name: user.displayName,\n                email: user.email,\n                photoURL: user.photoURL,\n                emailVerified: user.emailVerified,\n                idToken: user.getIdToken()\n            },\n                () => {\n                    console.log('Authentication complete. Calling getUser...')\n                    this.getUser()\n                }\n            )\n        });\n    }\n    //--------------------------//\n    // End of handler functions //\n    //--------------------------//\n\n    //------------------------//\n    // Organization functions //\n    //------------------------//\n    getUserOrgs = () => {\n        API.getOrgs() // works if {} is omitted\n            .then(orgs => { // hits w no params for query\n                // console.log('API getOrgs returned: ', orgs.data);\n                let userOrgList = [], userOrgNames = [];\n                for (let org of orgs.data) {\n                    console.log('each:', org);\n\n                    if (org.member.includes(this.state.id)) {\n                        userOrgList.push(org._id);\n                        userOrgNames.push(org.name)\n                    }\n                }\n                this.setState({\n                    ...this.state,\n                    affiliatedOrgIds: userOrgList.reverse(),\n                    affiliatedOrgNames: userOrgNames.reverse()\n                }\n                    , () => this.getAllProj()\n                )\n            })\n        // .then(() => console.log('state after getAllOrg:', this.state))\n    }\n\n    //-------------------//\n    // Project functions //\n    //-------------------//\n    getAllProj = () => { // works w/o params\n        API.getProjects(\n            { // organization: this.state.orgId // non func\n            })\n            .then(projects => {\n                // console.log('get all proj', projects);\n\n                let objects = [], names = [], descriptions = [], affiliatedProjIds = [], affiliatedProjNames = [];\n\n                console.log('proj query:', projects.data)\n                for (let obj of projects.data) { // iterable array, so for-in does not work\n\n                    for (let orgId of this.state.affiliatedOrgIds) {\n                        // orgIds.includes(orgId) \n                        console.log('obj shows:', obj.organization)\n                        if (orgId === obj.organization) {\n                            affiliatedProjIds.push(obj._id);\n                            affiliatedProjNames.push(obj.name);\n\n                        }\n                    }\n\n                    // if (obj.organization === this.state.orgId) {\n                    //     objects.push({ [obj._id]: obj.name }) // projId : projName\n                    //     names.push(obj.name); // save names separately // works\n                    //     descriptions.push(obj.description); // save descriptions separately\n\n                    //     // orgIds.push(obj.organization);\n                    // }\n                } // .map does not work since it may create \"undefined\" holes in output array\n                // .filter does not work since condition sits on same level as data to save\n\n\n\n                objects.includes(undefined) ? // no longer need to check undefineds due to change above, but will leave for now\n                    this.setState({\n                        ...this.state,\n                        projectList: [],\n                        projectNames: [],\n                        projectDesc: [],\n                        affiliatedProjIds: [],\n                        affiliatedProjNames: []\n                        // disableProjSelect: true // prevent proj pick due to lack of valid choice\n                    },\n                        console.log('No relevant project. ', objects, names, descriptions)\n                        // console.log('No relevant project. ', o2, n2)\n                    ) :\n                    // If relevant projects are found, add list to state and enable project selection\n                    // objects.length > 0 && names.length > 0 ?\n                    this.setState({\n                        ...this.state,\n                        projectList: objects,\n                        projectNames: names,\n                        projectDesc: descriptions,\n\n                        affiliatedProjIds: affiliatedProjIds.reverse(),\n                        affiliatedProjNames: affiliatedProjNames.reverse()\n\n                        // disableProjSelect: false // enables project select\n                    }\n                        // , console.log('Relevant projects found. Adding to state:', objects, names, descriptions)\n                        // , console.log('Relevant projects found. Adding to state:', o2, n2)\n                        , () => this.getAllIssues()\n                    )\n\n            })\n            .catch(err => console.log(err));\n    }\n\n    //-----------------//\n    // Issue functions //\n    //-----------------//\n    getAllIssues = () => {\n        API.getIssues({\n            // project: this.state.projId // may work but below logic is for unfiltered data\n        })\n            .then(issues => {\n                // console.log('get all issues:', issues)\n\n                let objects = []; // ObjId-Subject pair?\n\n                let relatedIssueIds = [], relatedIssueNames = [];\n                for (let obj of issues.data) { // iterable array, so for-in does not work\n                    if (this.state.affiliatedOrgIds.includes(obj.organization)) {\n                        relatedIssueIds.push(obj._id);\n                        relatedIssueNames.push(obj.subject);\n                    }\n\n                } // .map does not work since it may create \"undefined\" holes in output array\n                // .filter does not work since condition sits on same level as data to save\n\n                // If blanks exist, this is remnant from relevant query\n                objects.includes(undefined) ?\n                    this.setState({\n                    },\n                        console.log('No relevant issues.'\n                        )\n                    ) :\n                    this.setState({\n                        ...this.state,\n                        relatedIssueIds: relatedIssueIds.reverse(),\n                        relatedIssueNames: relatedIssueNames.reverse()\n\n                    },\n                        () => {\n                            console.log('Relevant issues found. Adding to state.');\n                            this.getAllComments();\n                        }\n                    )\n            })\n    }\n\n    //--------------------//\n    // Comments functions //\n    //--------------------//\n    getAllComments = async () => {\n        await API.getComments({\n            // project: this.state.projId // may work but below logic is for unfiltered data\n        })\n            // .sort({ _id: -1 }) // descending order.\n            .then(comments => {\n                console.log('get all comments:', comments);\n                let commentObjects = []\n                for (let comment of comments.data) {\n                    if (this.state.affiliatedOrgIds.includes(comment.organization)) {\n                        commentObjects.push(comment)\n                    }\n                }\n\n                // commentObjects.reverse();\n                // commentObjects.length <= 10 ? \n                this.setState({\n                    ...this.state,\n                    relatedCommentObjects: commentObjects.reverse()\n                })\n            })\n    }  // End of getAllComments function\n\n    //-------------------//\n    // Lifecycle methods //\n    //-------------------//\n\n    componentDidMount(props) {\n        // check auth\n        this.authenticate();\n        console.log('Did Mount. State =', this.state)\n\n        /*\n          let arr = new Array(10).fill(undefined).map((val, idx) => {\n            let user = {\n              firstName: Faker.name.firstName(),\n              lastName: Faker.name.lastName(),\n              profilePicture: Faker.image.avatar(),\n              lastSignedIn: moment(Faker.date.recent(45)).fromNow(),\n              latestPost: Faker.lorem.paragraphs(2, \" \")\n            };\n            return user;\n          });\n          this.setState({ users: arr });\n        */\n\n        // QUERY DB FOR USER'S RECORDS //\n\n        // FUNC SIFTS FOR ISSUES SUMMARY STATS //\n        //   {this.state.users.map(user => {\n        //     return <Card key={user.profilePicture} user={user} />;\n        //   })}\n    }\n\n    componentDidUpdate() {\n        // Keep using\n        console.log('Did Update. State has :', this.state);\n\n        // console.log('Router passed these props :', this.props.location.state)\n        // this.state.isSignedIn\n        // ? () => { // If signed in, show state and proceed\n        //     console.log('checking router state', this.props.location.state)\n        //     console.log('main view ran auth. State:', this.state)\n        //     // this.checkNewUser(user.email) // Process new user\n        // }\n        // : () => {\n        //     console.log('You are NOT signed in.')\n        //     this.props.history.push({\n        //         pathname: '/',\n        //         state: { isSignedIn: false }\n        //     }); // redirect to LandingPage\n        // }\n    }\n\n    render() {\n        // const { classes } = this.props;\n        const newView = this.state.activeView;\n        let view;\n\n        if (newView === 'Dashboard') {\n            view = <Dashboard\n                orgCount={this.state.affiliatedOrgIds.length}\n                projCount={this.state.affiliatedProjIds.length}\n                issueCount={this.state.relatedIssueIds.length}\n                commentObjects={this.state.relatedCommentObjects}\n\n                orgNames={this.state.affiliatedOrgNames}\n                projNames={this.state.affiliatedProjNames}\n                issueSubjects={this.state.relatedIssueNames}\n\n            />\n        } else if (newView === 'Submit Issue') {\n            view = <SubmitIssue\n                style={[styles.content]}\n\n                name={this.state.name}\n                email={this.state.email}\n                type={this.state.type}\n                userId={this.state.id} // ObjectId of user\n                photoURL={this.state.photoURL}\n                isSignedIn={this.state.isSignedIn}\n                handleSubmitIssue={this.handleSubmitIssue}\n                showDashboard={this.showDashboard}\n            />\n        }\n        else if (newView === 'User Profile') {\n            view = <UserProfile\n                id={this.state.id}\n                name={this.state.name}\n                email={this.state.email}\n                userType={this.state.userType}\n                photoURL={this.state.photoURL}\n                isSignedIn={this.state.isSignedIn}\n            />\n        }\n        else if (newView === 'Organization Profile') {\n            view = <OrganizationProfile\n                id={this.state.id}\n                name={this.state.name}\n                email={this.state.email}\n                userType={this.state.userType}\n                isSignedIn={this.state.isSignedIn}\n            />\n        }\n        else if (newView === 'Project Profile') {\n            view = <ProjectProfile\n                id={this.state.id}\n                isSignedIn={this.state.isSignedIn}\n                showDashboard={this.showDashboard}\n            />\n        }\n        else if (newView === 'Manage Issue') {\n            view = <ManageIssue\n                userId={this.state.id}\n                userName={this.state.name}\n                photoURL={this.state.photoURL}\n                isSignedIn={this.state.isSignedIn}\n                showDashboard={this.showDashboard}\n            />\n        }\n\n        return (\n            <div>\n                {}\n                <React.Fragment>\n                    {console.log('state in render', this.state)}\n                    {/* {this.seed()}  // this works but wont use now */}\n                    <Sidebar\n                        activeView={this.state.activeView}\n                        name={this.state.name}\n                        userType={this.state.userType}\n                        changeName={this.changeName}\n                        determineView={this.determineView}\n                        showDashboard={this.showDashboard}\n                        showSubmitIssue={this.showSubmitIssue}\n                        showUserProfile={this.showUserProfile}\n                        showOrganizationProfile={this.showOrganizationProfile}\n                        showProjectProfile={this.showProjectProfile}\n                        showManageIssue={this.showManageIssue}\n                    >\n                        {/* {this.props.children} // this works, kinda. */}\n                        {/* {this.determineView(this.props)} // doesn't work? */}\n                        {view}\n                    </Sidebar>\n                </React.Fragment>\n            </div>\n        );\n    }\n}\n\n// Stateful Components (Class) cannot use Hooks such as useStyle.\nexport default withStyles(styles)(DeveloperView);\n","import React, { Component, useEffect } from \"react\";\nimport {\n  BrowserRouter as Router, Switch, Route,\n  // Link, \n  // Redirect, \n  useHistory\n  // useLocation, withRouter \n} from \"react-router-dom\";\n// import PropTypes from 'prop-types';\n\n// import { Helmet } from 'react-helmet' // manages document head\n\n// Pages\n// import LandingPage from \"./pages/LandingPage\"; // absorbed it here\nimport SubmitIssue from \"./pages/SubmitIssue\";\nimport Dashboard from \"./pages/Dashboard\";\n// import NoMatch from \"./pages/NoMatch\";\n\n// Material-UI\nimport AppBar from '@material-ui/core/AppBar'\nimport Button from '@material-ui/core/Button'\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport IconButton from '@material-ui/core/IconButton'\nimport LockIcon from '@material-ui/icons/Lock'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport Typography from '@material-ui/core/Typography'\n// import { withStyles } from '@material-ui/core/styles'\nimport { makeStyles } from '@material-ui/core/styles'\nimport BugReportTwoToneIcon from '@material-ui/icons/BugReportTwoTone';\n\n// Styling\nimport \"./App.css\";\n\n// import session from 'express-session';\n\n// // Hashing. Later when I have to register a new user.\n// import bcrypt from 'bcrypt';\n// const saltRounds =10;\n\n// import Sidebar from \"./components/Sidebar\";\n// import LoginPage from \"./pages/LoginPage\";\nimport SigninPage from \"./pages/SigninPage\";\nimport DeveloperView from \"./pages/DeveloperView\";\n\n// Default style settings for Material UI\n// const styles = theme => ({ // This will cause error possibly because the outcome is not being exported anywhere using withStyles.\nconst useStyles = makeStyles(theme => ({\n  main: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  root: {\n    flexGrow: 1,\n    flex: '1 0 100%'\n    // height: '100%',\n    // overflow: 'hidden'\n  },\n  hero: {\n    height: '100%',\n    // minHeight: '80vh',\n    flex: '0 0 auto',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: theme.palette.background.paper,\n    color: theme.palette.type === 'light' ? theme.palette.primary.dark : theme.palette.primary.main\n  },\n  text: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    // letterSpacing: '.7rem',\n    textIndent: '.7rem',\n    fontWeight: theme.typography.fontWeightBold,\n    [theme.breakpoints.only('xs')]: {\n      fontSize: 24,\n      letterSpacing: '.1em',\n      textIndent: '.1rem'\n    },\n    whiteSpace: 'nowrap'\n  },\n  h5: {\n    paddingLeft: theme.spacing(1) * 4,\n    paddingRight: theme.spacing(1) * 4,\n    marginTop: theme.spacing(1),\n    maxWidth: 600,\n    textAlign: 'center',\n    [theme.breakpoints.only('xs')]: {\n      fontSize: 18\n    }\n  },\n  content: {\n    height: '100%',\n    // paddingTop: theme.spacing(1) * 8,\n    [theme.breakpoints.up('sm')]: {\n      paddingTop: theme.spacing(1)\n    }\n  },\n  button: {\n    marginTop: theme.spacing(1) * 3,\n    marginLeft: theme.spacing(1) * 3,\n    marginRight: theme.spacing(1) * 3,\n  },\n  // buttonGroup: {\n  //   marginLeft: theme.spacing(1) * 3,\n  //   marginRight: theme.spacing(1) * 3\n  // },\n  logo: {\n    color: 'secondary',\n    margin: `${theme.spacing(1) * 3}px 0 ${theme.spacing(1) * 4}px`,\n    width: '100%',\n    height: '40vw',\n    maxHeight: 250\n  },\n  steps: {\n    maxWidth: theme.spacing(1) * 130,\n    margin: 'auto'\n  },\n  step: {\n    padding: `${theme.spacing(1) * 3}px ${theme.spacing(1) * 2}px`\n  },\n  stepIcon: {\n    marginBottom: theme.spacing(1)\n  },\n  markdownElement: {},\n  cardsContent: {\n    padding: 15,\n    display: 'flex',\n    justifyContent: 'space-around',\n    flexWrap: 'wrap',\n    [theme.breakpoints.only('xs')]: {\n      width: '100%',\n      padding: 0,\n      paddingTop: 15\n    }\n  },\n  card: {\n    minWidth: 275,\n    // maxWidth: 350,\n    maxWidth: \"50%\",\n    margin: 15,\n    [theme.breakpoints.only('xs')]: {\n      width: '100%',\n      margin: 0,\n      marginTop: 7\n    }\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)'\n  },\n  cardTitle: {\n    marginBottom: 16,\n    fontSize: 14\n  },\n  pos: {\n    marginBottom: 12\n  }\n}))\n\nclass App extends Component {\n  // constructor(props) {\n  //   super(props);\n  constructor() {\n    super();\n\n    // Bind the this context to the handler function\n    this.handler = this.handler.bind(this);\n    // this.handleSignIn = this.handleSignIn.bind(this);\n\n    // Set default auth state of false\n    this.state = {\n      isAuthenticated: false,\n    };\n  }\n  // state = {\n  //   user: {\n  //     email: '',\n  //     firstName: '',\n  //     lastName: '',\n  //     organization: '',\n  //     affiliatedProducts: [],\n  //   },\n  // issues: {\n  //   submitted: [],\n  //   assigned: [],\n  // },\n  // };\n\n  // This method will be sent to the child component\n  handler() {\n    this.setState({\n      isAuthenticated: true\n    })\n    alert('Welcome, user!');\n  }\n\n\n  handleSignIn() {\n    this.setState({\n      isAuthenticated: true\n    })\n    alert('Welcome, user!');\n  }\n\n  handleSignOut() {\n    this.setState({\n      isAuthenticated: false\n    })\n  }\n\n  // authentication = {\n  //   // isAuthenticated: true, // Once actual authentication is implemented, change this to \"false\".\n  //   authenticate(callback) {\n  //     this.isAuthenticated = true;\n  //   },\n  //   signout(callback) {\n  //     this.isAuthenticated = false;\n  //   }\n  // }\n\n\n  ProtectedRoute = ({ children, ...rest }) => {\n    return (\n      <Route\n        {...rest}\n        render={children}\n      // ({ location }) => fakeAuth.isAuthenticated ? (\n      //   children\n      // ) : (\n      //   <Redirect\n      //     to={{\n      //       pathname: \"/login\",\n      //       state: { from: location }\n      //     }}\n      // />\n      // )\n      // }\n      />\n    );\n  }\n\n  // A wrapper for <Route> that redirects to the login screen if you're not yet authenticated.\n  // ProtectedRoute = ({ children, ...rest }) => {\n  //   return (\n  //     <Route\n  //       {...rest}\n  //       // If authenticated, use the children route. If not, send to login.\n  //       render={({ location }) =>\n  //         this.state.isAuthenticated ? (\n  //           children\n  //         ) : (\n  //             <Redirect\n  //               to={{\n  //                 pathname: \"/signinpage\",\n  //                 state: { from: location }\n  //               }}\n  //             />\n  //           )\n  //       }\n  //     />\n  //   );\n  // }\n\n\n\n  AuthenticateButton = () => {\n    let history = useHistory();\n\n    return this.authentication.isAuthenticated ? (\n      <p>\n        Welcome!{\" \"}\n        <button\n          onClick={() => {\n            this.authentication.signout(() => history.push(\"/\"));\n          }}\n        >\n          Sign out\n        </button>\n      </p>\n    ) : (\n        <p>You are not logged in.</p>\n      );\n  }\n\n  // LoginPage = () => {\n  //   let history = useHistory();\n  //   let location = useLocation();\n\n  //   // \n  //   let { from } = location.state || { from: { pathname: \"/\" } };\n  //   let login = () => {\n  //     this.authentication.authenticate(() => {\n  //       history.replace(from);\n  //     });\n  //   };\n\n  //   return (\n  //     <div>\n  //       <p>You must log in to view the page at {from.pathname}</p>\n  //       <button onClick={login}>Log in</button>\n  //     </div>\n  //   );\n  // }\n\n\n  LandingPage = ({\n    // classes, \n    history, theme }) => {\n    const classes = useStyles();\n    const isAuthorised = () => {\n      try {\n        const key = Object.keys(localStorage).find(e => e.match(/persist:root/))\n        const data = JSON.parse(localStorage.getItem(key))\n        const auth = JSON.parse(data.auth)\n\n        return auth && auth.isAuthorised\n      } catch (ex) {\n        return false\n      }\n    }\n\n    useEffect(() => {\n      if (isAuthorised()) {\n        history.push('/signin')\n      }\n    })\n\n    return (\n      <div className={classes.main}>\n        {/* <Helmet>\n        <meta name=\"theme-color\" content={theme.palette.primary.main} />\n        <meta name=\"apple-mobile-web-app-status-bar-style\" content={theme.palette.primary.main} />\n        <meta name=\"msapplication-navbutton-color\" content={theme.palette.primary.main} />\n        <title>Bug Tracker</title>\n      </Helmet> */}\n\n        <AppBar position=\"static\">\n\n          <Toolbar disableGutters>\n            <Typography variant=\"h6\" className={classes.title}>\n              Project   Issue Manager\n          </Typography>\n            <div style={{ flex: 1 }} />\n            <Tooltip id=\"tooltip-icon1\" title=\"Sign in\">\n              <IconButton\n                name=\"signin\"\n                aria-label=\"Sign In\"\n                color=\"inherit\"\n                onClick={() => {\n                  history.push('/signinpage')\n                }}\n                rel=\"noopener\"\n              >\n                <LockIcon />\n              </IconButton>\n            </Tooltip>\n            <Tooltip id=\"tooltip-icon2\" title=\"GitHub repository\">\n              <IconButton\n                name=\"github\"\n                aria-label=\"Open Github\"\n                color=\"inherit\"\n                href=\"https://github.com/danninemx/project-issue-manager\"\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                <GitHubIcon />\n              </IconButton>\n            </Tooltip>\n          </Toolbar>\n        </AppBar>\n        {/* End of Navbar */}\n\n        <div className={classes.root}>\n          <div className={classes.hero}>\n            <div className={classes.content}>\n\n              {/* <img src=\"/rmw.svg\" alt=\"Material-UI Logo\" className={classes.logo} /> */}\n              <BugReportTwoToneIcon alt=\"Material-UI Logo\" className={classes.logo} />\n              <div className={classes.text}>\n                <Typography\n                  variant=\"h3\"\n                  align=\"center\"\n                  component=\"h1\"\n                  color=\"inherit\"\n                  gutterBottom\n                  className={classes.title}\n                >\n                  {'Project Issue Manager'}\n                </Typography>\n                <Typography variant=\"h5\" component=\"h2\" color=\"inherit\" gutterBottom className={classes.h5}>\n                  {'For all bug control needs, from submission to resolution.'}\n                </Typography>\n\n                <div className={classes.buttonGroup}>\n                  <Button\n                    onClick={() => {\n                      // Direct user to issue submission page through Router's history object\n                      history.push('/submitissue')\n                    }}\n                    className={classes.button}\n                    variant=\"outlined\"\n                    color=\"primary\"\n                  >\n                    {'Report an Issue'}\n                  </Button>\n                  <Button\n                    onClick={() => {\n                      // Direct user to signin page through Router's history object\n                      history.push('/signinpage')\n                    }}\n                    className={classes.button}\n                    variant=\"outlined\"\n                    color=\"primary\"\n                  >\n                    {'Log into Account'}\n                  </Button>\n                </div>\n              </div>\n\n              <div className={classes.cardsContent}>\n                <Card className={classes.card}>\n                  <CardContent>\n                    <Typography variant=\"h5\" component=\"h2\">\n                      What is this app?\n                  </Typography>\n                    <Typography noWrap={false} color=\"textSecondary\">\n                      <br></br>\n                      {`This is an open source bug tracker system.`}\n                      <br></br>\n                      {`It's free. Setup takes less than 5 minutes.`}\n                      <br></br>\n                      {`Whether you are reporting or fixing a bug, we got you covered. `}\n                    </Typography>\n                  </CardContent>\n                  <CardActions>\n                    <Button\n                      size=\"small\"\n                      onClick={() => {\n                        history.push('/signinpage')\n                      }}\n                    >\n                      Get started\n                  </Button>\n                  </CardActions>\n                </Card>\n                {/* End of  */}\n\n                <Card className={classes.card}>\n                  <CardContent>\n                    <Typography variant=\"h5\" component=\"h2\">\n                      Want to test it out on desktop?\n                  </Typography>\n                    <br />\n                    <Typography>{'Paste this in Node command line:'}</Typography>\n                    <br />\n                    <Typography className={classes.pos} color=\"textSecondary\">\n                      {' '}\n                      git clone https://github.com/danninemx/project-issue-manager{' '}\n                      <br></br>\n                      {' '}\n                      npm i  #or yarn{' '}\n                      <br></br>\n                      {' '}\n                      npm start  #or yarn run start{' '}\n                    </Typography>\n                  </CardContent>\n                  <CardActions>\n                    <Button\n                      size=\"small\"\n                      onClick={() => {\n                        let win = window.open('https://github.com/danninemx/project-issue-manager', '_blank')\n                        win.focus()\n                      }}\n                    >\n                      Learn More\n                  </Button>\n                  </CardActions>\n                </Card>\n              </div>\n\n              {/* End of cardsContent */}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  componentDidMount = () => {\n    // console.log(' landing props: ', this.props)\n    // console.log('landing state: ', this.state)\n  }\n\n  componentDidUpdate = () => {\n    // console.log(' landing props: ', this.props)\n    // console.log('landing state: ', this.state)\n  }\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <Switch>\n            <Route exact path=\"/\" component={this.LandingPage} />\n            <Route exact path=\"/signinpage\" handler={this.handler} component={SigninPage} />\n            <Route exact path=\"/submitissue\" component={SubmitIssue} />\n            <Route exact path=\"/dashboard\" component={Dashboard} />\n            <Route exact path=\"/developerview\">\n              <DeveloperView />\n            </Route>\n            {/* <Route path=\"*\" component={NoMatch} /> */}\n\n          </Switch>\n        </div>\n      </Router >\n    )\n  }\n}\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}