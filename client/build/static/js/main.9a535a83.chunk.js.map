{"version":3,"sources":["utils/bgvideo.mp4","components/DateTimePicker/DateTimePicker.js","utils/API.js","pages/SubmitIssue/SubmitIssue.js","components/ChartDoughnut/ChartDoughnut.js","components/ChartHorizontalBar/ChartHorizontalBar.js","components/ChartRadar/ChartRadar.js","pages/Dashboard/Dashboard.js","pages/SigninPage/SigninPage.js","components/Sidebar/Sidebar.js","pages/UserProfile/UserProfile.js","pages/OrganizationProfile/OrganizationProfile.js","pages/ProjectProfile/ProjectProfile.js","components/CommentCard/CommentCard.js","pages/ManageIssue/ManageIssue.js","components/BottomAppBar/BottomAppBar.js","pages/DeveloperView/DeveloperView.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","DateTimePicker","props","_React$useState","React","useState","selectedDate","_React$useState2","Object","slicedToArray","setSelectedDate","handleDateChange","useEffect","console","log","handleChange","date","react_default","a","createElement","useUtils_cfb96ac9","utils","DateFnsUtils","Grid","container","justify","DatePicker","margin","id","label","format","value","onChange","KeyboardButtonProps","aria-label","showTodayButton","InputLabelProps","shrink","TimePicker","API","getUsers","q","axios","get","params","createUser","userData","post","findOneUser","email","findUserById","deleteUser","concat","delete","getOrgs","createOrganization","orgData","createProject","projData","getProjects","updateProject","put","createVersion","data","updateVersion","verData","getVersions","findOneVersion","createIssue","issueData","getIssues","updateIssue","createComment","getComments","updateComment","SubmitIssue","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleFieldChange","event","fieldId","target","fieldValue","setState","defineProperty","objectSpread","state","handleTimeChange","time","selectedTime","handleOrgSelect","ind","organizationNames","indexOf","selectedId","selectedOrgName","keys","organizationList","orgId","orgName","projId","projName","projDescription","verId","verName","verDescription","getAllProj","handleProjSelect","projectNames","projectList","selectedName","selectedDesc","projectDesc","getAllVers","handleVerSelect","versionNames","versionList","versionDesc","clearState","comment","owner","status","resolved","priority","targetResolutionDate","potentialImpact","imageURL","partImpacted","Date","organizationDesc","disableProjSelect","disableVerSelect","issueSubject","issueDescription","issueType","issueURL","issueComment","handleSubmit","asyncToGenerator","regenerator_default","mark","_callee2","delay","wrap","_context2","prev","next","ms","Promise","res","setTimeout","_callee","_context","isSignedIn","showDashboard","history","push","pathname","stop","getAllOrgs","then","orgs","objects","map","obj","_id","name","names","saveOrg","description","orgDescription","url","orgUrl","member","createProj","organization","catch","error","_ref4","_callee3","_context3","result","_x","_x2","apply","arguments","projects","descriptions","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","err","return","includes","createVer","project","_ref5","_callee4","_context4","_x3","_x4","versions","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","getOneVer","ver","issueInput","type","timing","version","subject","organizationName","projectName","versionName","reporter","userId","reporterName","issueId","commentInput","issue","actionDescription","visibility","avatar","photoURL","length","commenter","commenterName","userName","_this2","classes","className","nonAuthenticated","noValidate","autoComplete","grouping","Typography","variant","textField","Fragment","TextField","placeholder","defaultValue","bind","Divider","divider","FormControl","formControl","InputLabel","required","Select","labelId","key","now","org","MenuItem","disabled","style","proj","i","Math","random","fullWidth","multiline","rows","buttonGroup","Button","color","button","endIcon","RotateLeft_default","onClick","Icon","Component","withRouter","withStyles","theme","_objectSpread2","flexWrap","alignItems","padding","spacing","mixins","toolbar","paddingTop","width","breakpoints","only","down","flex","paddingLeft","display","justifyContent","marginLeft","marginRight","content","flexGrow","minWidth","selectEmpty","marginTop","marginBottom","withTheme","ChartDoughnut","labels","datasets","backgroundColor","orgNames","projCountByOrg","hoverBackgroundColor","es","borderColor","borderWidth","hoverBorderColor","ChartHorizontalBar","ChartRadar","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","useStyles","makeStyles","cardsContent","card","wideCard","mouseEntered","mouseLeft","bullet","transform","cardTitle","fontSize","pos","avatarRoot","& > *","Dashboard","dates","times","backgroundColors","commentObjects","timeInMs","parse","timestamps","created_at","prettyDate","toLocaleDateString","prettyTime","toLocaleTimeString","val","letters","split","floor","getRandomColor","Card","CardContent","component","orgCount","projCount","components_ChartDoughnut_ChartDoughnut","projNames","components_ChartHorizontalBar_ChartHorizontalBar","issueCount","components_ChartRadar_ChartRadar","CardActionArea","Avatar","alt","src","displayName","toLowerCase","slice","require","config","firebase","initializeApp","apiKey","authDomain","SigninPage","checkNewUser","authEmail","message","uiConfig","signInFlow","signInOptions","auth","GoogleAuthProvider","PROVIDER_ID","FacebookAuthProvider","GithubAuthProvider","EmailAuthProvider","callbacks","signInSuccessWithAuthResult","componentDidMount","onAuthStateChanged","user","componentDidUpdate","setPersistence","Auth","Persistence","SESSION","code","CssBaseline","Container","height","textAlign","react_router","to","referrer","wasAuthenticated","StyledFirebaseAuth_default","firebaseAuth","root","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","enteringScreen","appBarHeading","menuButton","hide","flexShrink","drawerOpen","drawerClose","overflowX","up","_clsx3","_clsx4","useTheme","open","setOpen","AppBar","position","clsx","Toolbar","IconButton","edge","Menu_default","noWrap","activeView","disableGutters","title","Tooltip","signOut","rel","Lock_default","href","GitHub_default","Drawer","paper","direction","ChevronRight_default","ChevronLeft_default","List","ListItem","ListItemIcon","Dashboard_default","ListItemText","primary","showSubmitIssue","Create_default","userType","showManageIssue","FindInPage_default","showUserProfile","AccountCircle_default","showOrganizationProfile","Business_default","showProjectProfile","AccountTree_default","children","UserProfile","image","getUser","saveUser","firstName","lastName","wrapper","OrganizationProfile","getOneOrg","ProjectProfile","handleFormSubmit","maxWidth","avatarBlock","bigAvatar","fontWeight","CommentCard","createdAt","gutterBottom","actionDesc","ManageIssue","comments","getAllIssues","handleIssueSelect","issueNames","desc","URL","ImageURL","Comment","Reporter","targetRes","impact","issueList","issueReporters","issueOwners","issueResolved","issuePriorities","issueTargetRes","issueTypes","issueStatus","issueDesc","issueDates","issueURLs","issueImageURLs","issueCommentIds","issueImpacts","issueReporterNames","getAllComments","handleStatusSelect","issueObjectList","disableIssueSelect","issuePreState","issueAspects","updatedAt","commentOrgIds","commentProjIds","commentVerIds","commentIssueIds","commentCommenterIds","commentActionsDescriptions","commentTexts","commentVisibilities","commentPhotoURLs","commentTimestamps","commentFullObjects","commentAuthors","_ref2","_ref3","issues","reporters","owners","reporterNames","fullObjects","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","findCommenter","_x5","_callee6","_context6","orgIds","projIds","verIds","issueIds","commenterIds","actions","visibilities","photoURLs","commenterNames","_callee5","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","_context5","t0","finish","reverse","commentprojIds","commentverIds","commentfullObjects","_callee7","_context7","updated_at","issueStatusChoices","issuePriorityChoices","developerMode","commentVisibilityChoices","commentOrgNames","commentProjNames","commentVerNames","commentIssueSubjects","_this3","Paper","topContainer","containerOne","iss","wideTextField","orientation","containerTwo","commentObj","index","paddingRight","maxHeight","window","screen","availHeight","overflow","minHeight","text","paddingBottom","list","subheader","palette","background","top","bottom","grow","fabButton","left","right","styles","DeveloperView","changeName","alert","getUserOrgs","authenticate","handldIssueChange","handleSubmitIssue","determineView","handleUserSave","emailVerified","idToken","getIdToken","userOrgList","userOrgNames","affiliatedOrgIds","affiliatedOrgNames","affiliatedProjIds","affiliatedProjNames","affiliatedProjCounts","count","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","relatedIssueIds","relatedIssueNames","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","relatedCommentObjects","toggleTheme","assertThisInitialized","view","newView","Dashboard_Dashboard","issueSubjects","pages_SubmitIssue_SubmitIssue","pages_UserProfile_UserProfile","pages_OrganizationProfile_OrganizationProfile","pages_ProjectProfile_ProjectProfile","pages_ManageIssue_ManageIssue","Sidebar_Sidebar","_title","main","flexDirection","hero","dark","border","borderRadius","boxShadow","textIndent","typography","fontWeightBold","letterSpacing","h5","opacity","backgroundImage","logo","steps","step","stepIcon","markdownElement","ulist","App","ProtectedRoute","_ref","rest","objectWithoutProperties","assign","render","AuthenticateButton","useHistory","authentication","isAuthenticated","signout","LandingPage","localStorage","find","e","match","JSON","getItem","isAuthorised","ex","loop","autoPlay","muted","playsInline","bgvideo","BugReportTwoTone_default","align","CardActions","size","focus","handler","react_router_dom","exact","path","pages_DeveloperView_DeveloperView","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","src_App_0","document","getElementById","process","origin","addEventListener","fetch","response","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9a535a83.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bgvideo.e1561db6.mp4\";","import 'date-fns';\nimport React, {\n    // useState,\n    useEffect\n} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardTimePicker,\n    KeyboardDatePicker,\n} from '@material-ui/pickers';\n\nexport default function DateTimePicker(props) {\n    const [selectedDate, setSelectedDate] = React.useState(props.selectedDate);\n    const { handleDateChange } = props;\n\n    useEffect(() => {\n        console.log(' Picker received props', props);\n        handleDateChange(selectedDate);\n    }, [selectedDate, handleDateChange])\n\n    const handleChange = date => {\n        setSelectedDate(date);\n    };\n\n    return (\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <Grid container justify=\"space-around\">\n                <KeyboardDatePicker\n                    margin=\"normal\"\n                    id=\"date-picker-dialog\"\n                    label=\"Date of Discovery\"\n                    format=\"MM/dd/yyyy\"\n                    value={selectedDate}\n                    onChange={\n                        handleChange\n                    }\n                    KeyboardButtonProps={{\n                        'aria-label': 'change date',\n                    }}\n                    showTodayButton\n                    InputLabelProps={{ // Prevent label from appearing as placeholder\n                        shrink: true,\n                    }}\n                />\n                <KeyboardTimePicker\n                    margin=\"normal\"\n                    id=\"time-picker\"\n                    label=\"Time of Discovery\"\n                    value={selectedDate}\n                    onChange={\n                        handleChange\n                    }\n                    KeyboardButtonProps={{\n                        'aria-label': 'change time',\n                    }}\n                    // showTodayButton\n                    InputLabelProps={{ // Prevent label from appearing as placeholder\n                        shrink: true,\n                    }}\n                />\n            </Grid>\n        </MuiPickersUtilsProvider>\n    );\n}","import axios from \"axios\";\n\nexport default {\n  // ok\n  getUsers: function (q) {\n    console.log(`\\n getUsers is querying for : `, q);\n    return axios.get(\"/api/users\", { params: { q } });\n  },\n\n  // ok, I think?\n  createUser: function (userData) {\n    // console.log(`\\n createUser is attempting to save : `, userData);\n    return axios.post(\"/api/users\", userData);\n  },\n\n  // params search required key and value.\n  // key of email and value of address is like\n  // http://localhost:3000/api/users?email=dudkny@gmail.com\n\n  // missing explicit param turn it into \"query\" like\n  // ... /api/users?q=dudkny@gmail.com\n\n  // http://localhost:3000/api/users?email=dudkny@gmail.com\n  findOneUser: function (email) {\n    console.log(`\\n API findOneUser : `, email);\n    return axios.get(\"/api/users\", { params: { email } });\n    // Must wrap params as above. Below does not work.\n    // console.log(`\\n findOneUser is querying for : `, email);\n    // return axios.get(\"/api/users\", email);\n  },\n\n  findUserById: function (id) {\n    console.log(`\\n API findUserById w/ id: `, id);\n    return axios.get(\"/api/users/\" + id);\n  },\n\n  // syntax FYI\n  // delete(function (req, res, next) {\n  //   //Only allow deleting user without an entry\n  //   entryModel.findOne({\n  //     author: req.params.userId\n  //   }, function (err, resp) {\n  //     if (err) return next(err);\n  //     if (typeof resp === 'object') {\n  //       err = new Error(\"This user owns entries, remove the entries first\");\n  //       err.status = 412; //precondition failed\n  //       return next(err);\n  //     }\n  //   })\n  // }\n\n  // Deletes the saved user with the given id\n  deleteUser: function (id) {\n    console.log(`\\n deleteUser is attempting to delete : ${id}`);\n    return axios.delete(\"/api/users/\" + id);\n  },\n\n  // ORG\n\n  getOrgs: function (q) {\n    console.log(`\\n API getOrgs : `, q);\n    return axios.get(\"/api/orgs\", { params: { q } });\n  },\n\n  // oks\n  createOrganization: function (orgData) {\n    console.log('API create org');\n    return axios.post(\"/api/orgs\", orgData);\n  },\n\n  // Project\n\n  // test after creating version.\n  // this is object in form of { name: this.name }\n  createProject: function (projData) {\n    console.log('API create project', projData);\n    return axios.post(\"/api/projects\", projData);\n  },\n\n  // works\n  getProjects: function (q) {\n    console.log('API get projects :', q);\n    return axios.get(\"/api/projects\", { params: { q } });\n  },\n\n  updateProject: function (id, projData) {\n    console.log(`\\n API updateProject w/ id: `, id);\n    return axios.put(\"/api/projects/\" + id, projData);\n  },\n\n  // Version //\n\n  createVersion: function (data) {\n    console.log('API create version', data);\n    return axios.post(\"/api/versions\", data);\n  },\n\n  updateVersion: function (id, verData) {\n    console.log(`\\n API updateVersion w/ id: `, id);\n    return axios.put(\"/api/versions/\" + id, verData);\n  },\n\n  getVersions: function (q) {\n    console.log(`\\n API getVersions : `, q);\n    return axios.get(\"/api/versions\", { params: { q } });\n  },\n\n  findOneVersion: function (id) {\n    console.log(`\\n API find one version : `, id);\n    return axios.get(\"/api/versions\", { params: { id } });\n  },\n\n  // Issue //\n\n  createIssue: function (issueData) {\n    console.log(`\\n API create issue : `, issueData);\n    return axios.post(\"/api/issues\", issueData);\n  },\n\n  getIssues: function (q) {\n    console.log(`\\n API getIssues : ${q}`);\n    return axios.get(\"/api/issues\", { params: { q } });\n  },\n\n  updateIssue: function (id, data) {\n    console.log(`\\n API updateIssue w/ id: `, id);\n    return axios.put(\"/api/issues/\" + id, data);\n  },\n\n  // Comment //\n\n  createComment: function (data) {\n    console.log(`\\n API create comment : `, data);\n    return axios.post(\"/api/comments\", data);\n  },\n\n  getComments: function (q) {\n    console.log(`\\n API getComments : ${q}`);\n    return axios.get(\"/api/comments\", { params: { q } });\n  },\n\n  updateComment: function (id, data) {\n    console.log(`\\n API updateComment w/ id: `, id);\n    return axios.put(\"/api/comments/\" + id, data);\n  }\n};","// React\nimport React\n, {\n    Component,\n    // useState\n}\n    from 'react';\nimport { withRouter } from 'react-router-dom';\n\n// Material UI\nimport {\n    // makeStyles, // used in functional component\n    // useStyles, // Stateful Components cannot use Hooks such as useStyles.\n    withStyles\n} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { Divider } from '@material-ui/core';\n// import Grid from '@material-ui/core/Grid';\n// import {\n//     MuiPickersUtilsProvider,\n//     KeyboardTimePicker,\n//     KeyboardDatePicker,\n// } from '@material-ui/pickers';\nimport 'date-fns';\n// import DateFnsUtils from '@date-io/date-fns';\n\n// import { DateTimePicker } from \"@material-ui/pickers\";\nimport DateTimePicker from '../../components/DateTimePicker/DateTimePicker';\n\nimport API from '../../utils/API';\n\n// Components\n// import Sidebar from '../../components/Sidebar';\n\nconst styles = theme => ({\n    // const styles = makeStyles(theme => ({\n    // const useStyles = makeStyles(theme => ({\n\n    container: {\n        // display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        padding: theme.spacing(0, 10),\n        ...theme.mixins.toolbar,\n        paddingTop: '10vh',\n        width: '60vw',\n\n        [theme.breakpoints.only('md')]: {\n            width: '100vw',\n        },\n        [theme.breakpoints.down('sm')]: {\n            width: '100vw',\n            flex: 'none',\n            paddingLeft: 0,\n        },\n    },\n    nonAuthenticated: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        justifyContent: 'center',\n        padding: theme.spacing(0, 1),\n        ...theme.mixins.toolbar,\n        paddingTop: '5vh',\n        width: '50vw',\n        margin: 'auto',\n    },\n\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: '40%'\n        // 300\n        ,\n    },\n\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n\n    button: {\n        margin: theme.spacing(1),\n    },\n    // For Select\n    formControl: {\n        margin: theme.spacing(1),\n        // marginTop: theme.spacing(2), // lines up verically w textfields\n        minWidth: '55%'\n        // 300\n        ,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n\n    divider: {\n        margin: '20px 0 20px 0',\n    },\n\n    grouping: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'space-between',\n        // width: '80vw',\n        width: '100%',\n    },\n\n    buttonGroup: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'flex-end',\n        marginTop: theme.spacing(5),\n        marginBottom: theme.spacing(15),\n        width: 'inherit',\n    },\n})\n\nclass SubmitIssue extends Component {\n    // function SubmitIssue(props) {\n\n    constructor(props) {\n        super(props);\n        // State updater function to be passed down into the context provider per https://reactjs.org/docs/context.html\n        this.state = {\n            userId: '',// this.props.userId,\n            userName: '',//this.props.name,\n            selectedDate: new Date(), // default is current date-time\n            // .toLocaleDateString('en-US'),\n\n            name: '',\n            email: '',\n            // type: 'Technical'\n\n            // organization info\n            // orgId: '', // ObjectId of org. For now, do not force clear?\n            // orgId: 'unknown' // initializing orgId prevents selection from staying\n\n            // project info\n            projId: '', // ObjectId of project\n            projName: '', // unique\n            // projDescription: '',\n\n            // version info\n            verId: '', // ObjectId of version\n            verName: '',\n            // verDescription: '',\n            // Also needs project ObjectId as ref. Use id above\n\n            // cache\n            organizationList: [], // should not be reset unless query auto restarts\n            organizationNames: [],\n            organizationDesc: [],\n\n            projectList: [],\n            projectNames: [],\n            projectDesc: [],\n\n            versionList: [],\n            versionNames: [],\n            versionDesc: [],\n\n            disableProjSelect: true, // both data types seem to work\n            disableVerSelect: 'true',\n\n            // issue info\n            issueSubject: '',\n            issueDescription: '',\n            issueType: '',\n            issueURL: '',\n            issueComment: '', // commit into array in DB\n\n            issueId: '' // To be read from GET query\n        }\n    }\n\n    //-------------------//\n    // Handler functions //\n    //-------------------//\n    handleFieldChange = event => {\n        // for a regular input field, read field name and value from the event\n        const fieldId = event.target.id;\n        const fieldValue = event.target.value;\n        // this.props.onChange(fieldName, fieldValue); // could use if updating parent state\n        // this.state.onChange(fieldName, fieldValue);\n\n        // console.log(fieldId, fieldValue);\n        this.setState(\n            { [fieldId]: fieldValue } // this works\n        );\n    }\n\n    handleDateChange = date => {\n        console.log('received date:', date)\n        this.setState({\n            ...this.state,\n            selectedDate: date\n        })\n    };\n\n    handleTimeChange = time => {\n        console.log('received time:', time)\n        this.setState({\n            ...this.state,\n            selectedTime: time\n        })\n    };\n\n    handleOrgSelect = event => {\n        console.log('selected org target: ', event.target)\n        // console.log(this.state.organizationNames.indexOf(event.target.value)) // check index by name\n        let ind = this.state.organizationNames.indexOf(event.target.value) // i.e. if chosen org name is in array, save its index.\n        // console.log(this.state.organizationList[ind]) // shows the object at index\n        // this.setState({org: event.target.value})\n        // console.log(Object.keys(this.state.organizationList[ind])) // shows array containing keys from the object\n        // console.log(Object.keys(this.state.organizationList[ind])[0]) // first key (in ObjectId form) in a string\n\n        let selectedId = '', selectedOrgName = ''; // must initialize as string\n        // If index was found, get the key. If not, keep blank.\n        ind !== '' ? selectedId = Object.keys(this.state.organizationList[ind])[0] : selectedId = ''\n        ind !== '' ? selectedOrgName = this.state.organizationNames[ind] : selectedOrgName = '' // Can be written to use value from selected menuitem\n        // console.log('selected org:', selectedId);\n        this.setState({\n            orgId: selectedId,\n            orgName: selectedOrgName,\n\n            // If any proj is selected, remove it\n            projId: '',\n            projName: '',\n            projDescription: '',\n\n            // If any version is selected, remove it\n            verId: '',\n            verName: '',\n            verDescription: ''\n        }\n            , () => { this.getAllProj() } // on org select, query proj list\n        );\n    };\n\n    handleProjSelect = event => {\n        console.log('select proj target: ', event.target)\n        let ind = this.state.projectNames.indexOf(event.target.value) // index of selected item in array\n        let selectedId = Object.keys(this.state.projectList[ind])[0]; // ObjectId from DB\n        let selectedName = this.state.projectNames[ind]; // Name from DB\n        let selectedDesc = this.state.projectDesc[ind]; // Description from DB\n        console.log('selected proj:', selectedId)\n        this.setState({\n            projId: selectedId,\n            projName: selectedName,\n            projDescription: selectedDesc,\n\n            // If any version is selected, remove it\n            verId: '',\n            verName: '',\n            verDescription: ''\n        }\n            , () => this.getAllVers()) // on proj select, query version list\n    };\n\n    handleVerSelect = event => {\n        console.log('select ver target: ', event.target)\n        let ind = this.state.versionNames.indexOf(event.target.value) // get the index of selected item from array\n        let selectedId = '';\n        let selectedName = '';\n        let selectedDesc = '';\n        // If index was found, get the key, name and desc. For some reason not, keep blank.\n        ind !== -1 ? selectedId = Object.keys(this.state.versionList[ind])[0] : selectedId = ''\n        ind !== -1 ? selectedName = this.state.versionNames[ind] : selectedName = ''\n        ind !== -1 ? selectedDesc = this.state.versionDesc[ind] : selectedDesc = ''\n        ind !== -1 ? console.log('selected vers:', selectedId) : console.log('Version index not found.')\n\n        this.setState({\n            verId: selectedId,\n            verName: selectedName,\n            verDescription: selectedDesc\n        })\n    };\n\n    clearState = () => {\n        this.setState({\n            ...this.state,\n            // reporter: '', // ObjectId from User. (props.userId)\n\n            // required\n            orgId: '',\n            projId: '',\n            verId: '',\n\n            // This is string here but DB stores it as array\n            comment: '',\n\n            owner: '',\n            status: '',\n            resolved: '',\n            priority: '',\n            targetResolutionDate: '',\n            potentialImpact: '',\n            imageURL: '',\n            partImpacted: '',\n            selectedDate: new Date(),\n\n            // cache\n            organizationList: [], // should not be reset unless query auto restarts\n            organizationNames: [],\n            organizationDesc: [],\n\n            projectList: [],\n            projectNames: [],\n            projectDesc: [],\n\n            versionList: [],\n            versionNames: [],\n            versionDesc: [],\n\n            disableProjSelect: true, // both data types seem to work\n            disableVerSelect: 'true',\n\n            // issue info\n            issueSubject: '',\n            issueDescription: '',\n            issueType: 'Technical',\n            issueURL: '',\n            issueComment: '', // commit into array in DB\n\n\n        })\n    };\n\n    handleSubmit = async () => { // works\n        const delay = ms => new Promise(res => setTimeout(res, ms));\n\n        (async () => {\n            // create issue, then comment\n            this.createIssue();\n            await delay(500);\n            this.createComment();\n            await delay(500);\n\n            // redirect to landing if authenticated; root if not\n            this.props.isSignedIn\n                ? this.props.showDashboard()\n                : this.props.history.push({\n                    pathname: '/',\n                    state: { isSignedIn: false }\n                });\n\n        })()\n\n\n        // this.props.isSignedIn\n        //     ? this.props.showDashboard()\n        //     : this.props.history.push({\n        //         pathname: '/',\n        //         state: { isSignedIn: false }\n        //     }); // redirect to LandingPage\n\n    }\n\n    //------------------------//\n    // Organization functions //\n    //------------------------//\n    getAllOrgs = () => {\n        API.getOrgs() // works if {} is omitted\n            .then(orgs => { // hits w no params for query\n                console.log('API getOrgs returned: ', orgs.data);\n                let objects = orgs.data.map(obj => {\n                    return { [obj._id]: obj.name } // orgId : orgName\n                })\n                let names = orgs.data.map(obj => {\n                    return obj.name // orgId : orgName\n                })\n                this.setState({\n                    organizationList: objects,\n                    organizationNames: names\n                })\n            })\n            .then(() => console.log('state after getAllOrg & getAllProj:', this.state))\n    }\n\n    // NEEDS DUPLICATION PREVENTION\n    saveOrg = () => {\n        API.createOrganization({\n            name: this.state.orgName,\n            description: this.state.orgDescription,\n            url: this.state.orgUrl,\n            member: [this.props.id] // user Id\n        }).then(() => console.log('Org saved.'))\n    }\n\n    //-------------------//\n    // Project functions //\n    //-------------------//\n\n    createProj = () => {  // works\n        console.log('creating new project')\n        API.createProject({\n            name: this.state.projName,\n            description: this.state.projDescription,\n            organization: [this.state.orgId] // user Id\n        })\n            .then((res) => console.log('Project saved.', res))\n            .catch(error => console.log(error))\n            .then(() => this.getAllProj()) // refresh proj list\n    }\n\n    updateProject = async (id, data) => { // works\n        console.log(`update proj w/ ${id} and this data:`, data)\n        await API.updateProject(id, data)\n            .then(result => {\n                console.log('updateProject returned data: ', result.data)\n                return result\n            })\n            .catch(error => console.log('error occurred!', error));\n    }\n\n    // Query projects matching selected organization\n    getAllProj = () => { // works w/o params\n        API.getProjects(\n            { // organization: this.state.orgId // non func\n            })\n            .then(projects => {\n                console.log('get all proj', projects);\n\n                let objects = [];\n                let names = [];\n                let descriptions = [];\n\n                for (let obj of projects.data) { // iterable array, so for-in does not work\n                    if (obj.organization === this.state.orgId) {\n                        objects.push({ [obj._id]: obj.name }) // projId : projName\n                        names.push(obj.name); // save names separately // works\n                        descriptions.push(obj.description); // save descriptions separately\n                    }\n                } // .map does not work since it may create \"undefined\" holes in output array\n                // .filter does not work since condition sits on same level as data to save\n\n                objects.includes(undefined) ? // no longer need to check undefineds due to change above, but will leave for now\n                    this.setState({\n                        projectList: [],\n                        projectNames: [],\n                        projectDesc: [],\n                        disableProjSelect: true // prevent proj pick\n                    },\n                        console.log('No relevant project. ', objects, names, descriptions)\n                        // console.log('No relevant project. ', o2, n2)\n                    ) :\n                    // If relevant projects are found, add list to state and enable project selection\n                    // objects.length > 0 && names.length > 0 ?\n                    this.setState({\n                        projectList: objects,\n                        projectNames: names,\n                        projectDesc: descriptions,\n                        disableProjSelect: false // enables project select\n                    }\n                        , console.log('Relevant projects found. Adding to state:', objects, names, descriptions)\n                        // , console.log('Relevant projects found. Adding to state:', o2, n2)\n                    )\n\n            })\n            .then(() => console.log('state after getAllProj, filtered :', this.state))\n            .then(this.getAllVers()) // query matching versions on proj select // works?\n            .catch(err => console.log(err));\n    }\n\n\n    //-------------------//\n    // Version functions //\n    //-------------------//\n    createVer = () => {\n        API.createVersion({\n            name: this.state.verName,\n            description: this.state.verDescription,\n            project: [this.state.projId] // project Id as ref\n        })\n            .then(res => console.log('Version saved.', res))\n            .catch(error => console.log(error))\n    }\n\n    updateVersion = async (id, data) => { // works\n        console.log(`update version w/ ${id} and this data:`, data)\n        await API.updateVersion(id, data)\n            .then(result => {\n                console.log('updateVersion returned data: ', result.data)\n                return result\n            })\n            .catch(error => console.log(error));\n    }\n\n    getAllVers = () => {\n        API.getVersions({\n            // project: this.state.projId // seems to work but below logic is for unfiltered data\n        })\n            .then(versions => {\n                console.log('get all vers', versions)\n                let objects = [];\n                let names = [];\n                let descriptions = [];\n\n                for (let obj of versions.data) { // iterable array, so for-in does not work\n                    if (obj.project === this.state.projId) {\n                        objects.push({ [obj._id]: obj.name }) // verId : verName\n                        names.push(obj.name); // save names separately\n                        descriptions.push(obj.description); // save descriptions separately\n                    }\n                } // .map does not work since it may create \"undefined\" holes in output array\n                // .filter does not work since condition sits on same level as data to save\n\n                // If blanks exist, this is remnant from relevant query\n                objects.includes(undefined) ?\n                    this.setState({\n                        versionList: [],\n                        versionNames: [],\n                        versionDesc: [],\n                        disableVerSelect: true // prevent select\n                    },\n                        console.log('No relevant version. ', objects, names, descriptions)\n                    ) :\n                    // If relevant result is found, add list to state and enable selection\n                    this.setState({\n                        versionList: objects,\n                        versionNames: names,\n                        versionDesc: descriptions,\n                        disableVerSelect: false // enables select\n                    }, console.log('Relevant versions found. Adding to state:', objects, names, descriptions)\n                    )\n            })\n    }\n\n    getOneVer = () => {\n        API.findOneVersion(this.state.verId)\n            .then(ver => console.log('get one ver', ver))\n    }\n\n    //---------------------------//\n    // Issue & Comment Functions //\n    //---------------------------// \n    createIssue = () => { // works\n\n        // PRETTIFY DATE HERE? //\n\n        let issueInput = {\n            // reporter: this.props.userId, // ObjectId. Can be missing for anonymous user.\n            // reporterName: this.props.name, // displayName. Can be missing for anonymous user.\n\n            type: this.state.issueType,\n            timing: this.state.selectedDate,\n\n            organization: this.state.orgId, // ObjectId\n            project: this.state.projId, // ObjectId\n            version: this.state.verId, // ObjectId\n\n            subject: this.state.issueSubject,\n            description: this.state.issueDescription,\n            url: this.state.issueURL,\n            imageURL: this.state.imageURL,\n            status: 'Open', //this.state.status;  If missing, treat as Open\n            resolved: this.state.resolved,\n\n            owner: this.state.owner, // ObjectId\n            priority: this.state.priority,\n            targetResolutionDate: this.state.targetResolutionDate,\n            potentialImpact: this.state.potentialImpact,\n            partImpacted: this.state.partImpacted,\n\n            organizationName: this.state.orgName,\n            projectName: this.state.projName,\n            versionName: this.state.verName,\n            issueSubject: this.state.issueSubject\n        }\n\n        if (this.props.isSignedIn) {\n            issueInput.reporter = this.props.userId; // ObjectId. Can be missing for anonymous user.\n            issueInput.reporterName = this.props.name; // displayName. Can be missing for anonymous user.\n        } else {\n            issueInput.reporterName = this.state.name; // if at all, typed name of non-auth user\n        }\n\n        API.createIssue(issueInput)\n            .then(res => {\n                this.setState({\n                    ...this.state,\n                    issueId: res.data._id\n                }, () => {\n                    console.log('createIssue has run.', res)\n                    // this.createComment(res.data._id); // save return issueId, then use it on new comment\n                })\n            })\n    }\n\n    createComment = (issueId) => {\n        // Query parameters\n        let commentInput = {\n            organization: this.state.orgId, // ObjectId\n            project: this.state.projId, // ObjectId\n            version: this.state.verId, // ObjectId\n            issue: this.state.issueId, // ObjectId, returned by createIssue\n            // commenter: this.props.userId, // ObjectId. NOT REQUIRED to allow anonymity\n\n            actionDescription: ['Reported issue'],\n            comment: this.state.issueComment,\n            visibility: 'Organization members and reporter',\n            avatar: this.props.photoURL,\n            // commenterName: this.props.name, // displayName\n\n            organizationName: this.state.orgName,\n            projectName: this.state.projName,\n            versionName: this.state.verName,\n            issueSubject: this.state.issueSubject\n        }\n\n        // if (issueId) { // If passed an Id, use it.\n        //     commentInput.issue = issueId;\n        // } else {  // If not use Id in state.\n        //     commentInput.issue = this.state.issueId;\n        // }\n\n        // If authenticated user, use ID.\n        if (this.props.userId && this.props.userId.length > 0) {\n            commentInput.commenter = this.props.userId; // ObjectId\n            commentInput.commenterName = this.props.name; // displayName\n\n        } else { // If an external user, use typed name if available or default\n            commentInput.commenterName = this.state.name || 'Anonymous User';\n        }\n\n        API.createComment(commentInput)\n            .then((res) => {\n                console.log('createComment has run.', res);\n            })\n    }\n\n    //--------------------//\n    //  Lifecyle Methods  //\n    //--------------------//\n    componentDidMount() {\n\n        if (this.props) {\n            this.setState({\n                ...this.state,\n                userId: this.props.userId,\n                userName: this.props.name,\n\n                // name: this.props.name, // used for anonymous user. review use case\n                email: this.props.email,\n\n                selectedDate: new Date(), // default is current date-time\n                disableProjSelect: true, // Boolean & string are both ok\n                disableVerSelect: 'true',\n                issueType: 'Technical'\n            })\n        } else {\n\n        }\n\n        console.log('component did mount :', this.state);\n        this.getAllOrgs() // adds to state the list of org objects and array of org names\n    }\n\n    componentDidUpdate() {\n        console.log('component did update :', this.state);\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <form className={this.props.isSignedIn ? classes.container : classes.nonAuthenticated}\n                // Unauthenticated users do not see menu bar, so center thes contents.\n                // this.props.style.content\n                noValidate autoComplete=\"off\"\n            >\n                <div className={classes.grouping}>\n                    <Typography variant='body2' className={classes.textField}>Asterisk(*) denotes required fields.</Typography>\n                </div>\n\n                <div className={classes.grouping}>\n                    {!this.props.isSignedIn && // Render latter for \"anonymous\" users only\n                        <React.Fragment>\n                            <TextField\n                                id=\"name\"\n                                // required // disabled\n                                label=\"Your Name\"\n                                placeholder=\"John Doe\"\n                                className={classes.textField}\n                                defaultValue={this.props.name}\n                                margin=\"normal\"\n                                variant=\"outlined\"\n\n                                onChange={this.handleFieldChange.bind(this)}\n                            />\n                            <TextField\n                                id=\"email\"\n                                // required // disabled\n                                label=\"Your Email\"\n                                defaultValue={this.props.email}\n                                className={classes.textField}\n                                margin=\"normal\"\n                                variant=\"outlined\"\n\n                                onChange={this.handleFieldChange.bind(this)}\n                            />\n                        </React.Fragment>\n                    }\n                </div>\n\n                <Divider className={classes.divider} />\n\n                <div className={classes.grouping}>\n                    <FormControl variant=\"outlined\" className={classes.formControl}>\n                        <InputLabel\n                            // ref={inputLabel} \n                            id=\"demo-simple-select-outlined-label-org\"\n                            required>\n                            Provider\n                            </InputLabel>\n                        <Select\n                            labelId=\"demo-simple-select-outlined-label-org\"\n                            // id={this.state.orgId || \"demo-simple-select-outlined\"}\n                            id={\"demo-simple-select-outlined\"}\n                            key={Date.now}\n                            placeholder='Provider Name'\n                            value={this.state.orgId  // shouldn't be this value\n                                // this.state.orgId !== '' ? this.state.orgId : '' // does not change display\n                                // collin tried: this.state.orgId\n                                // this.state.orgId !== '' && this.state.orgId // still changing uncontrolled to controlled?\n                            }\n                            onChange={this.handleOrgSelect\n                                // this.handleFieldChange // not reading correctly\n                            }\n                        >\n                            {\n                                this.state.organizationNames ?\n                                    this.state.organizationNames.map((org, ind) => {\n                                        // console.log(Object.keys(this.state.organizationList[ind])[0])\n                                        // console.log(org)\n                                        // <option key={org.key} value={org.key}>{org.value}</option>\n                                        return < MenuItem\n                                            id={Object.keys(this.state.organizationList[ind])[0]}\n                                            // id={org} // collin tried\n                                            key={org}\n                                            name={org}\n                                            value={org} >\n                                            {/* error: you have provided an out-of-range value `undefined` for the select component. */}\n                                            {org}\n                                        </MenuItem>\n                                    })\n                                    : () => console.log('state during MenuItem render', this.state)\n                                // None should not be an option. Create org first if missing.\n                            }\n                        </Select>\n                    </FormControl>\n                    <TextField\n                        id=\"orgId\"\n                        // REMEMBER, LIST IS FOR NAME BUT SAVES ID\n                        disabled\n                        // fullWidth\n                        className={classes.textField}\n                        label=\"Provider ID\"\n                        value={this.state.orgId}\n                        style={{ margin: 8 }}\n                        margin=\"normal\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"filled\"\n                        onChange={this.handleFieldChange.bind(this)}\n                    />\n                </div>\n\n                {/* Project */}\n                <div className={classes.grouping}>\n\n                    <FormControl variant=\"outlined\"\n                        className={classes.formControl}\n                    // {this.state.projectList ? null : disabled}\n                    >\n                        <InputLabel\n                            // ref={inputLabel} \n                            id=\"demo-simple-select-outlined-label-proj\"\n                            required>\n                            Project/Product\n                        </InputLabel>\n\n                        <Select\n                            labelId=\"demo-simple-select-outlined-label-proj\"\n                            // id={this.state.orgId || \"demo-simple-select-outlined\"}\n                            id={\"SI-demo-simple-select-outlined-proj\"}\n                            placeholder='Project Name'\n                            // value={this.state.orgName}\n                            onChange={\n                                // onOpen={ // doesn't work but unsure if due to choice\n                                // this.handleFieldChange // not reading correctly?\n                                // this.setState({ event.target.value })\n                                this.handleProjSelect\n                            }\n                        // labelWidth={'500px'}\n                        >\n                            {\n                                this.state.projectNames ?\n                                    this.state.projectNames.map((proj, i) => {\n                                        // this.state.projectList ? // unexpected\n                                        // Object.keys(this.state.projectList[i])[0]: \n                                        return <MenuItem\n                                            id={proj}\n                                            key={Date.now + Math.random() * 10000}\n                                            name={proj}\n                                            value={proj}\n                                            disabled={\n                                                this.state.disableProjSelect ? true : false\n                                                // this.state.orgId !== '' ? 'false' : 'true'\n                                            }\n                                        >\n                                            {proj}\n                                            {/* {console.log('proj list at render:', this.state.projectList[i])} */}\n                                        </MenuItem>\n                                    }) : <br />\n                                // 'None' should not be an option. Create org first if missing.\n                            }\n                        </Select>\n\n                    </FormControl>\n                    <TextField\n                        id=\"projId\"\n                        // REMEMBER, LIST IS FOR NAME BUT SAVES ID\n                        disabled\n                        // fullWidth\n                        label=\"Project ID\"\n                        className={classes.textField}\n                        value={this.state.projId}\n                        style={{ margin: 8 }}\n                        margin=\"normal\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"filled\"\n                        onChange={this.handleFieldChange.bind(this)}\n                    />\n                </div>\n\n                {/* Version */}\n                <div className={classes.grouping}>\n                    <FormControl variant=\"outlined\" className={classes.formControl}>\n                        <InputLabel id=\"demo-simple-select-outlined-label-ver\" required>\n                            Version/Specification\n                        </InputLabel>\n                        <Select\n                            labelId=\"demo-simple-select-outlined-label-ver\"\n                            // id={this.state.orgId || \"demo-simple-select-outlined\"}\n                            id={\"demo-simple-select-outlined-ver\"}\n                            // key={Math.random()}\n                            placeholder='Version / Specification'\n                            // value={this.state.verName}\n                            onChange={\n                                // onOpen={ // doesn't work but unsure if due to choice\n                                // this.handleFieldChange // not reading correctly?\n                                // this.setState({ event.target.value })\n                                this.handleVerSelect\n                            }\n                        // labelWidth={'500px'}\n                        >\n                            {\n                                this.state.versionNames ?\n                                    this.state.versionNames.map((ver, i) => {\n                                        // this.state.versionList ? // unexpected\n                                        // Object.keys(this.state.versionList[i])[0]: \n                                        return <MenuItem\n                                            id={ver}\n                                            key={Math.random()}\n                                            name={ver}\n                                            value={ver}\n                                            disabled={\n                                                this.state.disableVerSelect ? true : false\n                                            }\n                                        >\n                                            {ver}\n                                            {/* {console.log('ver list at render:', this.state.versionList[i])} */}\n                                        </MenuItem>\n                                    }) : <br />\n                                // 'None' should not be an option. Create org first if missing.\n                            }\n                        </Select>\n                        {/* {console.log('Disable project selection at render is:', this.state.disableProjSelect)} */}\n                    </FormControl>\n                    <TextField\n                        id=\"verId\"\n                        // REMEMBER, LIST IS FOR NAME BUT SAVES ID\n                        disabled\n                        className={classes.textField}\n                        label=\"Version ID\"\n                        value={this.state.verId}\n                        style={{ margin: 8 }}\n                        margin=\"normal\"\n                        InputLabelProps={{ shrink: true, }}\n                        onChange={this.handleFieldChange.bind(this)}\n                        variant=\"filled\"\n                    />\n                </div>\n                <Divider className={classes.divider} />\n\n                <div className={classes.grouping}>\n                    {/* <TextField // stopped responding?\n                        id=\"issueSubject\"\n                        required\n                        fullWidth\n                        label=\"Subject\"\n                        key='issueSubject'\n                        value={this.state.issueSubject}\n                        style={{ margin: 8 }}\n                        // placeholder=\"Placeholder\"\n                        // helperText=\"What seems to be the trouble?\"\n                        margin=\"normal\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        onChasnge={this.handleFieldChange.bind(this)}\n                        variant=\"outlined\"\n                    /> */}\n                    <TextField\n                        id=\"issueSubject\"\n                        fullWidth\n                        label=\"Subject\"\n                        // placeholder=\"Any thoughts?\"\n                        value={this.state.issueSubject}\n                        // className={classes.textField}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        onChange={this.handleFieldChange.bind(this)}\n                        style={{ margin: 8 }}\n                    />\n                    <TextField\n                        id=\"issueDescription\"\n                        required\n                        multiline\n                        fullWidth\n                        rows=\"4\"\n                        key=\"outlined-multiline-static\"\n                        label=\"Issue Description\"\n                        value={this.state.issueDescription}\n                        style={{ margin: 8 }}\n                        // placeholder=\"Placeholder\"\n                        // helperText=\"What seems to be the trouble?\"\n                        margin=\"normal\"\n                        onChange={this.handleFieldChange.bind(this)}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"outlined\"\n                    />\n                    <TextField\n                        id=\"issueType\"\n                        disabled\n                        label=\"Issue Type\"\n                        defaultValue={this.state.issueType}\n                        className={classes.textField}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        onChange={this.handleFieldChange.bind(this)}\n                    />\n                    <DateTimePicker\n                        selectedDate={this.state.selectedDate}\n                        handleDateChange={this.handleDateChange}\n                    />\n                    <TextField\n                        id=\"issueURL\"\n                        fullWidth\n                        label=\"URL\"\n                        // placeholder=\"Any thoughts?\"\n                        value={this.state.issueURL}\n                        // className={classes.textField}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        onChange={this.handleFieldChange.bind(this)}\n                        style={{ margin: 8 }}\n                    />\n                    <TextField\n                        id=\"issueComment\"\n                        fullWidth\n                        multiline\n                        label=\"Comment\"\n                        placeholder=\"Any thoughts?\"\n                        value={this.state.issueComment}\n                        // className={classes.textField}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        onChange={this.handleFieldChange.bind(this)}\n                        style={{ margin: 8 }}\n                    />\n\n                    <div className={classes.buttonGroup}>\n                        <Button\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            className={classes.button}\n                            endIcon={<RotateLeftIcon>Reset Form</RotateLeftIcon>}\n                            onClick={\n                                () => {\n                                    console.log('clicked reset while state is', this.state)\n                                    this.clearState()\n                                }\n                            }\n                        > Reset Form\n                        </Button>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.button}\n                            endIcon={<Icon>send</Icon>}\n                            onClick={\n                                // this.createIssue // invokes createComment\n                                this.handleSubmit\n\n                                // (async () => {\n                                //     await this.createIssue();\n                                //     // await this.createComment();\n                                // })()\n                            }\n                        > Submit\n                    </Button>\n                    </div>\n                </div>\n\n            </form>\n        )\n\n    }\n}\n\n// export default withRouter(SubmitIssue)\nexport default withRouter(withStyles(styles, { withTheme: true })(SubmitIssue))\n","import React, { Component } from 'react';\nimport { Doughnut } from 'react-chartjs-2';\n\nclass ChartDoughnut extends Component {\n\n    // React.createClass({\n    constructor(props) {\n        super(props);\n        this.state = {\n            // displayName: 'DoughnutExample',\n            data: {\n                labels: '',\n                datasets: [{\n                    data: [],\n                    backgroundColor: []\n                }]\n            }\n        }\n    }\n\n    componentDidMount() {\n        console.log('chart received props:', this.props)\n        this.setState({\n            ...this.state,\n            data: {\n                labels: this.props.orgNames,\n                datasets: [{\n                    data: this.props.projCountByOrg,\n                    // [300, 50, 100, 100, 100, 100, 100],\n                    backgroundColor:\n                        [\n                            '#FF6384',\n                            '#36A2EB',\n                            '#FFCE56',\n                            'orange',\n                            'limegreen',\n                            'navy',\n\n                            'purple',\n                            'red',\n                            'blue',\n                            'white',\n                            'grey',\n\n                            'black',\n                            'azure'\n                        ]\n                    // this.props.backgroundColor\n                    ,\n                    hoverBackgroundColor: [\n                        '#FF6384',\n                        '#36A2EB',\n                        '#FFCE56',\n                        'orange',\n                        'limegreen',\n                        'navy',\n\n                        'purple',\n                        'red',\n                        'blue',\n                        'white',\n                        'grey',\n\n                        'black',\n                        'azure'\n                    ]\n                }]\n            }\n        })\n    }\n\n    componentDidUpdate() {\n\n    }\n\n    render() {\n        return (\n            <div>\n                <Doughnut data={this.state.data} />\n            </div>\n        );\n    }\n};\n\nexport default ChartDoughnut;","import React, { Component } from 'react';\nimport { HorizontalBar } from 'react-chartjs-2';\n\nconst data = {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n    datasets: [\n        {\n            // label: 'My First dataset',\n            backgroundColor: 'rgba(132,222,2,0.2)',\n            borderColor: 'rgba(132,222,2,1)',\n            borderWidth: 1,\n            hoverBackgroundColor: 'rgba(132,222,2,0.4)',\n            hoverBorderColor: 'rgba(132,222,2,1)',\n            data: [65, 59, 80, 81, 56, 55, 40]\n        }\n    ]\n};\n\nclass ChartHorizontalBar extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            // displayName: 'DoughnutExample',\n            data: {\n                labels: '',\n                datasets: [{\n                    data: [],\n                    backgroundColor: []\n                }]\n            }\n        }\n    }\n\n\n\n    // displayName: 'BarExample',\n    render() {\n        return (\n            <div>\n                <h2>Horizontal Bar Example</h2>\n                <HorizontalBar data={data} />\n            </div>\n        );\n    }\n\n}\n\nexport default ChartHorizontalBar;","import React, { Component } from 'react';\nimport { Radar } from 'react-chartjs-2';\n\nclass ChartRadar extends Component {\n\n    // React.createClass({\n    constructor(props) {\n        super(props);\n        this.state = {\n            // displayName: 'DoughnutExample',\n            data: {\n                labels: '',\n                datasets: [{}]\n            }\n        }\n    }\n\n    componentDidMount() {\n        console.log('chart received props:', this.props)\n        this.setState({\n            ...this.state,\n            data: {\n                labels: ['Eating', 'Drinking', 'Sleeping', 'Designing', 'Coding', 'Cycling', 'Running'],\n                datasets: [\n                    {\n                        label: 'Total Open',\n                        backgroundColor: 'rgba(179,181,198,0.2)',\n                        borderColor: 'rgba(179,181,198,1)',\n                        pointBackgroundColor: 'rgba(179,181,198,1)',\n                        pointBorderColor: '#fff',\n                        pointHoverBackgroundColor: '#fff',\n                        pointHoverBorderColor: 'rgba(179,181,198,1)',\n                        data: [65, 59, 90, 81, 56, 55, 40]\n                    },\n                    {\n                        label: 'Unexamined',\n                        backgroundColor: 'rgba(255,99,132,0.2)',\n                        borderColor: 'rgba(255,99,132,1)',\n                        pointBackgroundColor: 'rgba(255,99,132,1)',\n                        pointBorderColor: '#fff',\n                        pointHoverBackgroundColor: '#fff',\n                        pointHoverBorderColor: 'rgba(255,99,132,1)',\n                        data: [28, 48, 40, 19, 96, 27, 100]\n                    }\n                ]\n\n            }\n        })\n    }\n\n    componentDidUpdate() {\n\n    }\n\n    render() {\n        return (\n            <div>\n                <Radar data={this.state.data} />\n            </div>\n        );\n    }\n};\n\nexport default ChartRadar;","//React\r\nimport React from 'react'\r\n\r\n// Material UI\r\n// import Button from '@material-ui/core/Button';\r\n// import Group from '@material-ui/icons/Group';\r\nimport Card from '@material-ui/core/Card';\r\n// import CardActions from '@material-ui/core/CardActions';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nimport {\r\n  // withStyles, \r\n  makeStyles,\r\n  // useTheme \r\n} from '@material-ui/core/styles';\r\n// import Link from '@material-ui/core/Link';\r\n\r\nimport ChartDoughnut from '../../components/ChartDoughnut'\r\nimport ChartHorizontalBar from '../../components/ChartHorizontalBar'\r\nimport ChartRadar from '../../components/ChartRadar'\r\n\r\n// Other modules\r\n// import CountUp from 'react-countup'\r\n// import { injectIntl } from 'react-intl'\r\n// import { withFirebase } from 'firekit-provider'\r\n// import { Line, Bar, Doughnut } from 'react-chartjs-2'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  // const styles = makeStyles(theme => ({\r\n\r\n  cardsContent: {\r\n    paddingTop: '12vh',\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    flexWrap: 'wrap',\r\n    width: '80vw',\r\n\r\n    [theme.breakpoints.only('xs')]: {\r\n      width: '100%',\r\n      padding: 0,\r\n      paddingTop: 60,\r\n      paddingLeft: 0,\r\n\r\n    }\r\n  },\r\n  card: {\r\n    // minWidth: \"37vw\",\r\n    // maxWidth: 350,\r\n    width: \"35vw\",\r\n    margin: 15,\r\n    [theme.breakpoints.only('xs')]: {\r\n      minWidth: 275,\r\n      width: '100%',\r\n      margin: 0,\r\n      marginTop: 7\r\n    },\r\n    // \"&:last-child\": {\r\n    //   marginTop: 25,\r\n    // }\r\n  },\r\n  wideCard: {\r\n    // minWidth: \"90%\",\r\n    // maxWidth: 350,\r\n    // maxWidth: \"100vw\",\r\n    width: '100vw',\r\n    margin: 15,\r\n    [theme.breakpoints.only('xs')]: {\r\n      width: '100%',\r\n      margin: 0,\r\n      marginTop: 7\r\n    },\r\n  },\r\n  mouseEntered: {\r\n    color: \"red\",\r\n  },\r\n  mouseLeft: {\r\n    color: \"black\",\r\n  },\r\n  bullet: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(0.8)'\r\n  },\r\n  cardTitle: {\r\n    marginBottom: 16,\r\n    fontSize: 14\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n\r\n    // display: 'inline-block',\r\n  },\r\n\r\n  avatarRoot: {\r\n    display: 'flex',\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n    alignItems: 'center',\r\n    // justifyContent: 'flex-start'\r\n  },\r\n}))\r\n\r\nfunction Dashboard(props) {\r\n  /*\r\n    let state = {\r\n      // This tells the AppBar which menu to highlight, maybe.\r\n      currentPage: \"\",\r\n  \r\n      // Submitted, In progress, Resolved, Closed...\r\n      counts: {\r\n        submitted: 5,\r\n        reviewed: 1,\r\n        resolved: 1,\r\n        closed: 3\r\n      },\r\n  \r\n      latestIssue: {},\r\n  \r\n      // Status updates in sentence form: MM/DD/YY hh:mm - ${assignee} ${action description} (Issue #${###-###-###-###})\r\n      // Give thoughts on the issue number structure.\r\n      notifications: []\r\n    };\r\n  */\r\n  const classes = useStyles();\r\n\r\n  const dates = [], times = []; // timestamps\r\n\r\n  const backgroundColors = [];\r\n\r\n  function getRandomColor() {\r\n    let letters = '0123456789ABCDEF'.split('');\r\n    let color = '#';\r\n    for (let i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        props.commentObjects.map(function (obj, ind) {\r\n          let timeInMs = Date.parse(obj.timestamps.created_at);\r\n          let prettyDate = new Date(timeInMs).toLocaleDateString();\r\n          let prettyTime = new Date(timeInMs).toLocaleTimeString();\r\n\r\n          // console.log('time=', prettyTime)\r\n          // console.log('date=', prettyDate)\r\n          dates.push(prettyDate);\r\n          times.push(prettyTime);\r\n          return ind; // simply avoids unhelpful msg\r\n        })\r\n      }\r\n      {\r\n        props.orgNames.map(function (val, ind) {\r\n          backgroundColors.push(getRandomColor())\r\n        })\r\n      }\r\n      <div className={classes.cardsContent}>\r\n        <Card className={classes.card}>\r\n          <CardContent>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              User Summary\r\n          </Typography>\r\n            <br />\r\n            <Typography className={classes.pos} color=\"textSecondary\">You are currently affiliated with:</Typography>\r\n            <Typography variant='h6'>\r\n              {props.orgCount} organizations <Typography display='inline' variant='body1'>and</Typography> {props.projCount} projects.\r\n            </Typography>\r\n            <br />\r\n\r\n            {\r\n              props.projCountByOrg.length > 0 ?\r\n                <ChartDoughnut\r\n                  orgNames={props.orgNames}\r\n                  projNames={props.projNames}\r\n\r\n                  projCountByOrg={props.projCountByOrg}\r\n                  // backgroundColors={backgroundColors}\r\n                  backgroundColors={['red', 'orange', 'yellow', 'green']}\r\n                /> : null\r\n            }\r\n\r\n            <ChartHorizontalBar />\r\n\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card className={classes.card}>\r\n          <CardContent>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              Issue Summary\r\n          </Typography>\r\n            <br />\r\n            <Typography\r\n              // className={classes.pos} \r\n              color=\"textSecondary\">You currently have:</Typography>\r\n            <br />\r\n            <Typography variant='h6'>\r\n              {props.issueCount} issues from your connections.\r\n              {' '}\r\n            </Typography>\r\n\r\n            <ChartRadar />\r\n          </CardContent>\r\n        </Card>\r\n\r\n\r\n        <Card className={classes.wideCard}>\r\n          <CardContent>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              Notifications\r\n          </Typography>\r\n            <br />\r\n            {/* <Link\r\n              component=\"button\"\r\n              variant=\"body1\"\r\n              color=\"textPrimary\"\r\n              onClick={() => {\r\n                console.log(\"Some accessibility message here...\")\r\n                let win = window.open('https://github.com/danninemx/project-issue-manager', '_blank')\r\n                win.focus()\r\n              }}\r\n            >\r\n              {'DISPLAY AUTOMATED MESSAGES HERE (e.g. Like this)'}\r\n            </Link> */}\r\n            <br />\r\n            {\r\n              props.commentObjects.map(function (obj, ind) {\r\n\r\n                return (\r\n                  <React.Fragment key={Math.random()}>\r\n                    <Divider></Divider>\r\n                    <CardActionArea>\r\n                      <br></br>\r\n                      <Typography\r\n                        className={classes.pos} color=\"textSecondary\"\r\n                      >\r\n                        {/* [ {dates[ind]}, {times[ind] }] - \"{props.orgNames[ind]}\"\" company / {props.projNames[ind]} project / issue \"{props.issueSubjects[ind]} */}\r\n                        [ {dates[ind]}, {times[ind]} ] - Organization \"{obj.organizationName}\" / Project \"{obj.projectName}\" / Issue \"{obj.issueSubject}\"\r\n                      {/* {obj.issue} */}\r\n                        \":\r\n                      </Typography>\r\n\r\n                      <div className={classes.avatarRoot}>\r\n                        <Avatar alt={obj.commenterName} src={obj.avatar}> \r\n                          {obj.displayName && obj.displayName !== 'Anonymous User' ? obj.commenterName : '?'}\r\n                        </Avatar>\r\n                        <Typography>\r\n                          <b>{obj.commenterName ? obj.commenterName : 'Anonymous User'}</b> {obj.actionDescription[0][0].toLowerCase() + obj.actionDescription[0].slice(1)}: <em>\"{obj.comment}\"</em>\r\n                        </Typography>\r\n                      </div>\r\n                    <br />\r\n                    </CardActionArea>\r\n                    {/* <Typography>\"{obj.comment}\"</Typography> */}\r\n                  </React.Fragment>\r\n                )\r\n              })\r\n            }\r\n          </CardContent>\r\n\r\n        </Card>\r\n\r\n        {/* End of cardsContent div */}\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\n\r\n// export default withStyles(styles)(Dashboard);\r\nexport default Dashboard;","import React, {\n    Component\n    // , useRef \n} from \"react\"\nimport { Redirect } from 'react-router-dom'\n\n// Firebase Authentication\nimport firebase from \"firebase\"\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\"\n// import config from '../../../../config' (CRA app cannot reach outside /src)\n\n// Material UI\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nimport API from '../../utils/API'\n\nrequire('dotenv').config();\n// If running in non-production environment, load .env variables\n// if (process.env.NODE_ENV !== 'production') {\n//     require('dotenv').config();\n// }\n\n// console.log(\"\\n Environment variables :\", process.env);\n// console.log(\"\\n Exported environment variables :\", config);\n\n// let API_Key = process.env.Firebase_apiKey;\n// console.log(\"\\n API_Key : \", config.API_KEY);\n\n// These credentials are necessary and safe to be exposed to the client, as true backend is provided by Firebase\nfirebase.initializeApp({\n    // Firebase Console > Project Settings > Your project > Web API Key\n    apiKey: \"AIzaSyCzm64_uz3vESpXIPdgcOeeSFouv-fT5Gw\",\n    // Firebase Console > Authentication > Authorized Domains\n    authDomain: \"project-issue-manager.firebaseapp.com\"\n\n})\n\nclass SigninPage extends Component {\n\n    constructor(props) {\n        super(props);\n\n        // Set default auth state of false\n        this.state = {\n            isSignedIn: false,\n        };\n\n        // this.routeChange = this.routeChange.bind(this); //testing\n    }\n\n    /*\n    routeChange() { // testing\n        // let path = `/`;\n        // this.props.history.push(path);\n        // this.props.history.push({\n        //     pathname: path,\n        //     state: {isAuthenticated: true}\n        // })\n        <App\n            isAuthenticated='true' />\n    }\n    */\n\n    // *** USE THIS SOMEWHERE TO INITIATE NEW USER PROTOCOL *** //\n    checkNewUser = (authEmail) => {\n        API.findOneUser(\n            // If an email was passed, use it. If not use state.\n            authEmail || this.state.email\n        )\n            .then(res => {\n                // If user is found, save id to state. \n                // If not, send user to user profile for user creation.\n                console.log('SigninPage is checking new user status.', res)\n                // res !== '' ? () => {\n                //     console.log('user found:', res.data)\n                //     // console.log('User found :', res.data[0]['_id']) // works\n                //     this.setState({ 'id': res.data[0]['_id'] })\n                // }\n                //     : () => {\n                //         console.log('User NOT found', res.data) // works\n                //         this.showUserProfile();\n                //     }\n            })\n            .catch(() =>\n                this.setState({\n                    message: \"No results. Please try another query.\"\n                })\n            );\n    }\n    // state = { isSignedIn: false }; // signed out by default\n\n    // Firebase UI signin configuration\n    uiConfig = {\n        signInFlow: \"popup\",\n        signInOptions: [\n            firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n            firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n            firebase.auth.GithubAuthProvider.PROVIDER_ID,\n            firebase.auth.EmailAuthProvider.PROVIDER_ID\n        ],\n        callbacks: {\n            // Return false means user-determined redirect, not auto-redirect.\n            signInSuccessWithAuthResult: () => {\n                // Determine here whether this is new user. \n                // If so, open details page.\n                // If not, proceed to appropriate data view.\n                return false;\n            }\n        }\n    }\n\n    //-------------------//\n    // Lifecycle Methods //\n    //-------------------//\n    componentDidMount = () => {\n        firebase.auth().onAuthStateChanged(user => {\n            this.setState({\n                // Coerce the value to be a boolean regardless of original type\n                isSignedIn: !!user\n            })\n        })\n    }\n\n    componentDidUpdate = () => {\n        // console.log('this.props.handler is :', this.props.handler)\n        // Consider adding \"keep me signed in\" checkbox which will enable this\n\n        // Change persistence from local storage to session storage\n        // Per https://firebase.google.com/docs/auth/web/auth-state-persistence\n        firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION)\n            .then(function () {\n                // Existing and future Auth states are now persisted in the current\n                // session only. Closing the window would clear any existing state even\n                // if a user forgets to sign out.\n                // ...\n                // New sign-in will be persisted with session persistence.}\n            })\n            .catch(function (error) {\n                // Handle Errors here.\n                // let errorCode = error.code;\n                // let errorMessage = error.message;\n                console.log(`\\n error code : ${error.code}`,\n                    `\\n error message : ${error.message}`)\n            })\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <CssBaseline />\n                <Container\n                    // maxWidth=\"sm\"\n                    style={{\n                        backgroundColor: '#cfe8fc'\n                        , height: '100vh'\n                        , width: '100vw'\n                        , textAlign: 'center',\n                    }}>\n                    <Typography component=\"div\" style={{ paddingTop: '2rem'}}\n                    >\n                        <h3>Please sign in to proceed.</h3>\n                        <h4>(If you do not have an account, one will be created for you.)</h4>\n                        {/* If auth succeeded, render DeveloperView */}\n                        {this.state.isSignedIn ? (\n                            <Redirect\n                                to={{\n                                    pathname: \"/developerview\",\n                                    state: {\n                                        referrer: \"/signinpage\",\n                                        wasAuthenticated: true\n                                        // email: this.state.email\n                                    }\n                                }}\n                            />\n\n                            // <DeveloperView\n                            //     userName={firebase.auth().currentUser.displayName}\n                            //     signOutFunction={() => firebase.auth().signOut()}\n                            //     profileImgSrc={firebase.auth().currentUser.photoURL}\n                            // >\n                            // </DeveloperView>\n\n                        ) : (\n                                <StyledFirebaseAuth\n                                    uiConfig={this.uiConfig}\n                                    firebaseAuth={firebase.auth()}\n                                />\n                            )\n                        }\n                    </Typography>\n                </Container>\n            </React.Fragment> // </div>\n        )\n    }\n}\n\nexport default SigninPage;\n\n\n\n        // React and related libraries\n        // import React from 'react'\n// import {\n//     BrowserRouter as Router,\n//     Switch,\n//     Route,\n//     Link,\n//     Redirect,\n//     useHistory,\n//     useLocation\n// } from \"react-router-dom\";\n\n\n// function LoginPage() {\n//     let history = useHistory();\n//     let location = useLocation();\n\n//     let { from } = location.state || { from: { pathname: \"/\" } };\n//     let login = () => {\n//         authentication.authenticate(() => {\n//             history.replace(from);\n//         });\n//     };\n\n//     return (\n//         <div>\n//             <p>You must log in to view the page at {from.pathname}</p>\n//             <button onClick={login}>Log in</button>\n//         </div>\n//     );\n// }\n\n// export default LoginPage;\n// //   export default withRouter(withStyles(styles, { withTheme: true })(LoginPage))\n","// React\nimport React from 'react';\nimport clsx from 'clsx';\nimport {\n  // BrowserRouter as Router,\n  // Switch, Route, \n  // Redirect,\n  // useHistory, useLocation,\n  withRouter,\n  // Link\n} from \"react-router-dom\";\n\n\n// Material UI\nimport {\n  makeStyles, useTheme\n  // styled \n} from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\n// import InboxIcon from '@material-ui/icons/MoveToInbox';\n// import MailIcon from '@material-ui/icons/Mail';\n\nimport Tooltip from '@material-ui/core/Tooltip'\nimport LockIcon from '@material-ui/icons/Lock'\nimport GitHubIcon from '@material-ui/icons/GitHub';\n\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport CreateIcon from '@material-ui/icons/Create';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport AccountTreeIcon from '@material-ui/icons/AccountTree';\nimport FindInPageIcon from '@material-ui/icons/FindInPage';\n\n// Firebase\nimport firebase from \"firebase\"\n\n// Pages\n// import Dashboard from '../../pages/Dashboard';\n// import { ViewContext } from '../../utils/viewContext';\n\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexGrow: 1,\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  appBarHeading: {\n    flexGrow: 1,\n    // padding: theme.spacing(3),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    // whiteSpace: 'nowrap',\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerClose: {\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: 'hidden',\n    width: theme.spacing(7) + 1,\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9) + 1,\n    },\n  },\n  toolbar: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar,\n  },\n}));\n\nfunction Sidebar(props) {\n\n\n  // let user = {\n  //   name: '',\n  //   email: '',\n  //   photoUrl: '',\n  //   emailVerified: '',\n  //   uid: '', // The user's ID, unique to the Firebase project. Do NOT use\n  //   // this value to authenticate with your backend server, if\n  //   // you have one. Use User.getToken() instead.\n  //   idToken: ''\n  // }\n\n  // Get current user's info \n\n  // firebase.auth().onAuthStateChanged(function (currentUser) {\n  //   if (currentUser) {\n  //     // User is signed in.\n  //     console.log('\\n Sidebar sees user :', currentUser.displayName, currentUser.email, currentUser.photoURL, currentUser.emailVerified, currentUser.uid)\n  //     // user.name = currentUser.displayName;\n  //     // console.log('\\n Saved user name initial: ', user.name);\n  //     // user.name = currentUser.displayName;\n  //     // console.log('\\n Saved user name final: ', user.name);\n  //     // console.log(this.user.name); // this does not work\n\n  //     user.name = currentUser.displayName;\n  //     user.email = currentUser.email;\n  //     user.photoUrl = currentUser.photoURL;\n  //     user.emailVerified = currentUser.emailVerified;\n  //     user.idToken = currentUser.getIdToken();\n\n  //     console.log('\\n Saved user info: ', user);\n  //   } else {\n  //     // No user is signed in.\n  //     console.log('\\n There is no authenticated user right now.')\n  //   }\n  // })\n\n  // forcing synch\n  //     function setUserInfo () {\n  //       return new Promise(\n  //     )}\n\n  const classes = useStyles();\n  const theme = useTheme();\n\n  // const CustomLink = styled('link')({\n  //   textDecoration: NONAME,\n  //   color: 'primary',\n  // })\n\n  const [open, setOpen] = React.useState(false);\n\n  // Keep using this\n  // console.log(\"\\n Sidebar received these props : \", props); // Functional components use props, not this.props\n\n  // firebase.auth().onAuthStateChanged(currentUser => {currentUser.displayName} )\n\n  // console.log(' \\n Sidebar sees this user outside of the firebase function :', user)\n  // On load, save user info\n  // let testuser = firebase.auth().currentUser;  //This returns null even if sign in\n  // console.log(testuser);\n  // let name, email, photoUrl, uid, emailVerified, idToken;\n\n  // console.log('\\n current user: ', user)\n\n  // if (user != null) {\n  //   name = user.displayName;\n  //   email = user.email;\n  //   photoUrl = user.photoURL;\n  //   emailVerified = user.emailVerified;\n  //   uid = user.uid;  // The user's ID, unique to the Firebase project. Do NOT use\n  //   // this value to authenticate with your backend server, if\n  //   // you have one. Use User.getToken() instead.\n  //   idToken = user.getIdToken();\n  // }\n\n  // console.log('\\n Current user info: ', name, email, photoUrl, emailVerified, idToken)\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  // let routeChange = (newUrl) => {\n  //   this.history.push(newUrl);\n  // };\n  /*  \n    const handleClickEvent = (buttonText) => {\n      switch (buttonText) {\n        case 'Dashboard':\n          console.log('\\n You clicked ', buttonText);\n          console.log('Sidebar sees props.history : ', props.history);\n          break;\n        case 'Submit Issue':\n          console.log('\\n You clicked ', buttonText);\n          console.log('Sidebar sees props.history : ', props.history);\n  \n          // Per https://stackoverflow.com/questions/44121069/how-to-pass-params-with-history-push-link-redirect-in-react-router-v4\n          // props.history.push({\n          //   pathname: '/developerview',\n          //   state: { activeView: buttonText }\n          // }) \n          // This did not work.\n  \n          // Alternative suggestion\n          // <Link to={{\n          //   pathname: '/template',\n          //   search: '?query=abc',\n          //   state: { detail: response.data }\n          // }}> My Link </Link> \n  \n          // props.history.push(\"/developerview\");\n          break;\n        case 'Review Issues':\n          console.log('\\n You clicked ', buttonText);\n          console.log('Sidebar sees props.history : ', props.history);\n          break;\n        default:\n          console.log('What did you even click? ', buttonText);\n          console.log('Sidebar sees props.history : ', props.history);\n      }\n    }\n  */\n\n  // let testprint = 10000;\n  // console.log(props.context)\n  return (\n\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, {\n              [classes.hide]: open,\n            })}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.appBarHeading} noWrap>\n            {/* {props.name} */}\n            {props.activeView}\n          </Typography>\n\n          <Toolbar disableGutters>\n            <Typography variant=\"h6\" className={classes.title}>\n              {/* Issue Manager */}\n            </Typography>\n            <div style={{ flex: 1 }} />\n            <Tooltip id=\"tooltip-icon1\" title=\"Sign out\">\n              <IconButton\n                name=\"signout\"\n                aria-label=\"Sign In\"\n                color=\"inherit\"\n                onClick={() => {\n                  firebase.auth().signOut(); // sign out of user session\n                  props.history.push('/'); // redirect to LandingPage\n                }}\n                rel=\"noopener\"\n              >\n                <LockIcon />\n              </IconButton>\n            </Tooltip>\n            <Tooltip id=\"tooltip-icon2\" title=\"GitHub repository\">\n              <IconButton\n                name=\"github\"\n                aria-label=\"Open Github\"\n                color=\"inherit\"\n                href=\"https://github.com/danninemx/project-issue-manager\"\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                <GitHubIcon />\n              </IconButton>\n            </Tooltip>\n          </Toolbar>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        className={clsx(classes.drawer, {\n          [classes.drawerOpen]: open,\n          [classes.drawerClose]: !open,\n        })}\n        classes={{\n          paper: clsx({\n            [classes.drawerOpen]: open,\n            [classes.drawerClose]: !open,\n          }),\n        }}\n        open={open}\n      >\n        <div className={classes.toolbar}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n        <List aria-label='sidebar menu list'>\n\n          <ListItem button key='Dashboard'\n            onClick={props.showDashboard}>\n            <ListItemIcon>\n              <DashboardIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Dashboard\" />\n          </ListItem>\n\n          <ListItem button key='Submit Issue'\n            onClick={props.showSubmitIssue}>\n            <ListItemIcon>\n              <CreateIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Submit Issue\" />\n          </ListItem>\n\n          {/* conditional naming on userType */}\n          <ListItem button key={props.userType === 'Reporter' ? 'Track Issue' : 'Manage Issue'}\n            onClick={props.showManageIssue}>\n            <ListItemIcon>\n              <FindInPageIcon />\n            </ListItemIcon>\n            <ListItemText primary={props.userType === 'Reporter' ? 'Track Issue' : 'Manage Issue'} />\n          </ListItem>\n\n          <Divider />\n\n          <ListItem button key='User Profile'\n            onClick={props.showUserProfile}>\n            <ListItemIcon>\n              <AccountCircleIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"User Profile\" />\n          </ListItem>\n\n          {props.userType !== 'Reporter' && // Render latter for developer+\n            <>\n              <ListItem button key='Organization Profile'\n                onClick={props.showOrganizationProfile}>\n                <ListItemIcon>\n                  <BusinessIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Organization Profile\" />\n              </ListItem>\n\n              <ListItem button key='Project Profile'\n                onClick={props.showProjectProfile}>\n                <ListItemIcon>\n                  <AccountTreeIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Project Profile\" />\n              </ListItem>\n            </>\n          }\n\n        </List>\n\n\n        <Divider />\n\n        {/* \n          {['Dashboard', 'Submit Issue', 'User Profile', 'Organization Profile', 'Project Profile'].map((text, index) => (\n            <ListItem button key={text}\n              // onClick={props.someFunction // This works.\n              onClick={\n                () => {\n                  // text === 'Submit Issue' ? props.showSubmitIssue() : props.showDashboard()\n                  switch (text) {\n                    case 'Dashboard':\n                      props.showDashboard()\n                      break;\n\n                    case 'Submit Issue':\n                      props.showSubmitIssue()\n                      break;\n\n                    case 'User Profile':\n                      props.showUserProfile()\n                      break;\n\n                    case 'Organization Profile':\n                      props.showOrganizationProfile()\n                      break;\n\n                    case 'Project Profile':\n                      props.showProjectProfile()\n                      break;\n\n                    default:\n                      console.log('I am Error')\n                  }\n                }\n\n                // onClick={props.changeName // This works.\n                // onClick={props.determineView // meh\n\n                // console.log(`\\n Sidebar says you clicked ${text} `)\n                // text == 'Submit Issue' ? props.showSubmitIssue : alert('what?')\n\n                // let nextPath = '/' + text.split(' ').join('').trim().toLowerCase();\n                // console.log(`\\n Sidebar says you clicked ${nextPath} `)\n                // (nextPath === '/submitissue') ? props.showSubmitIssue : false\n                // props.determineView(nextPath);\n\n                // onClick={() => console.log(props)\n                // () => {\n                // let nextPath = '/' + text.split(' ').join('').toLowerCase();\n                // console.log(`\\n Sidebar says you clicked ${nextPath} `);\n\n                // props.history.push({\n                //   pathname: '/developerview',\n                //   state: { activeView: nextPath}\n                // });\n\n                // return <Redirect\n                //   to={{\n                //     pathname: \"/developerview\",\n                //     state: { activeView: nextPath }\n                //   }} />\n                // }\n              }\n            >\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))} */}\n        {/* </List> */}\n        <Divider />\n      </Drawer>\n\n      {/* <Link to={{\n          pathname: '/template',\n          search: '?query=abc',\n          state: { detail: response.data }\n        }}> My Link </Link>  */}\n\n      {props.children}\n    </div>\n\n  );\n}\n\n// withRouter allows routing out to LandingPage on signout\nexport default withRouter(Sidebar)\n","// React\nimport React\n, {\n    Component,\n    // useState\n}\n    from 'react';\nimport { withRouter } from 'react-router-dom';\n\n// Material UI\nimport {\n    // makeStyles, // used in functional component\n    // useStyles, // Stateful Components cannot use Hooks such as useStyles.\n    withStyles\n} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\n\nimport API from '../../utils/API';\n\nconst styles = theme => ({\n    // const styles = makeStyles(theme => ({\n    // const useStyles = makeStyles(theme => ({\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n\n        alignItems: 'center',\n        // justifyContent: 'flex-start',\n        // justifyContent: 'center',\n        padding: theme.spacing(0, 10),\n        ...theme.mixins.toolbar,\n\n        paddingTop: '12vh',\n        width: '60vw',\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: '48%',\n    },\n\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n\n    wrapper: {\n        position: 'relative',\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    grouping: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        // justifyContent: 'space-between',\n        // width: '80vw',\n        width: '100%',\n    },\n    buttonGroup: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'flex-end',\n        marginTop: theme.spacing(5),\n        marginBottom: theme.spacing(15),\n        width: 'inherit',\n    },\n})\n\nclass UserProfile extends Component {\n    // function SubmitIssue(props) {\n\n    constructor(props) {\n        super(props);\n        // State updater function to be passed down into the context provider per https://reactjs.org/docs/context.html\n        this.state = {\n            // name: this.props.name,\n            // email: this.props.email,\n            // type: 'Technical'\n        }\n    }\n\n    handleFieldChange = (event) => {\n        // for a regular input field, read field name and value from the event\n        const fieldId = event.target.id;\n        const fieldValue = event.target.value;\n        // this.props.onChange(fieldName, fieldValue); // could use if updating parent state\n        // this.state.onChange(fieldName, fieldValue);\n\n        // console.log(fieldId, fieldValue);\n        this.setState(\n            { [fieldId]: fieldValue }\n        ); // this works\n        // this.setState({ testObj: { [fieldId]: fieldValue } }); // not rly. keeps adding indexed\n\n        // this.setState({\n        //         testArr: [\n        //             // ...this.state.testArr, \n        //             {\n        //                 [fieldId]: fieldValue\n        //             }\n        //         ]\n\n        //     }\n\n        // }); // \n        // console.log('handle field change :', this.state); // this will be one step slower\n    }\n\n    clearState = () => {\n        this.setState({\n            ...this.state,\n            // required\n            userType: 'User',\n\n            // implement later for devs\n            organization: '',\n            project: '',\n            subject: '',\n            description: '',\n            owner: '',\n\n            // This is string here but DB stores it as array\n            comment: '',\n\n            // optional in current scope\n            url: '',\n            status: '',\n            resolved: '',\n            priority: '',\n            targetResolutionDate: '',\n            potentialImpact: '',\n            image: '',\n            partImpacted: ''\n        })\n    };\n    //  onChange = e => {\n    //     const { name, value } = e.target;\n    //     setState(prevState => ({ ...prevState, [name]: value }));\n    //   };\n\n    // handleReset = e => {\n    //     e.preventDefault();\n    //     signupUser().then(this.clearState);\n    // };\n\n    getUser = () => {\n\n        // ***** This is hitting controller's getUsers, not findOneUser. //\n        API.findOneUser(\n            this.props.email\n        )\n            .then(res => {\n                res.data ?\n                    console.log('returned :', res.data[0])\n                    // this.setState({\n                    //   books: res.data\n                    // })\n                    : console.log('no one!', res.data)\n            })\n            .catch(() =>\n                this.setState({\n                    message: \"No results. Please try another query.\"\n                })\n            );\n    }\n\n    // add UPDATE feature //\n    saveUser = () => {\n        API.createUser({\n            email: this.props.email,\n            displayName: this.props.name,\n            // first word in display name\n            firstName: this.props.name.split(' ')[0],\n            // last word in display name\n            lastName: this.props.name.split(' ')[this.props.name.split(' ').length - 1],\n            photoURL: this.props.photoURL,\n            userType: this.props.userType\n        }).then((res) => {\n            console.log('saveUser:', res)\n            this.getUser();\n        })\n        // this.props.showDashboard();\n    }\n\n    // needs update feature above //\n\n    componentDidUpdate() {\n        console.log('component did update :', this.state);\n    }\n\n    render() {\n        this.getUser();\n        const { classes } = this.props;\n        return (\n            <form className={classes.container} noValidate autoComplete=\"off\" >\n                <Typography variant='body2'>Asterisk(*) denotes required fields.</Typography>\n                <div className={classes.grouping}>\n                    <br />\n                    {/* first and last name are computed, not entered */}\n                    <TextField\n                        id=\"name\"\n                        disabled\n                        label=\"Your Name\"\n                        placeholder=\"John Doe\"\n                        className={classes.textField}\n                        defaultValue={this.props.name}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                    />\n                    <TextField\n                        id=\"email\"\n                        disabled\n                        label=\"Your Email\"\n                        defaultValue={this.props.email}\n                        className={classes.textField}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                    />\n                </div>\n\n                <div className={classes.grouping}>\n                    <TextField\n                        id=\"userType\"\n                        required\n                        label=\"User / Developer\"\n                        defaultValue={this.props.userType}\n                        className={classes.textField}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        onChange={this.handleFieldChange.bind(this)}\n                    />\n                    <TextField\n                        id=\"photoURL\"\n                        label=\"Profile Photo (URL)\"\n                        value={this.props.photoURL}\n                        style={{\n                            margin: 8,\n                            width: '60vw',\n                        }}\n                        // placeholder=\"Placeholder\"\n                        // helperText=\"What seems to be the trouble?\"\n                        // fullWidth\n                        margin=\"normal\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"outlined\"\n                        onChange={this.handleFieldChange.bind(this)}\n                    />\n                </div>\n\n                <div className={classes.buttonGroup}>\n                    <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        className={classes.button}\n                        endIcon={<RotateLeftIcon>Reset Form</RotateLeftIcon>}\n                        onClick={\n                            // this.props.handleSubmitIssue(this.state.testArr) // causes loop SA\n                            () => {\n                                console.log('clicked reset while state is', this.state)\n                                // this.props.handleSubmitIssue()\n                                this.clearState()\n                            }\n                        }\n                    > Reset Form\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.button}\n                        endIcon={<Icon>send</Icon>}\n                        onClick={() => {\n                            this.saveUser();\n                            this.props.showDashboard();\n                        }\n                            // this.createIssue\n                            /*\n                            // this.props.handleSubmitIssue(this.state.testArr) // causes loop SA\n                            () => {\n                                console.log('clicked button', this.state)\n\n                                const keys = [\n                                    \"type\",\n                                    \"organization\",\n                                    \"project\",\n                                    \"subject\",\n                                    \"description\",\n                                    \"comment\",\n                                    \"owner\",\n\n                                    // optional in this version\n                                    \"url\",\n                                    \"status\",\n                                    \"resolved\",\n                                    \"priority\",\n                                    \"targetResolutionDate\",\n                                    \"potentialImpact\",\n                                    \"image\",\n                                    \"partImpacted\"\n                                ]\n\n                                // Loop through keys and get values\n                                // let values = keys.map(\n                                    // (key) => {\n                                for (let key of keys) {\n                                    // this.props.handleSubmitIssue(key, this.state[key]) // works\n\n                                }\n                                    // }\n                                    // console.log(this.state[key]) // works\n                                // )\n\n                                // this.props.handleSubmitIssue(values)\n\n\n                            }\n                            */\n                        }\n                    > Submit\n                    </Button>\n                    {/* End of button group */}\n                </div>\n\n            </form >\n        )\n\n    }\n}\n\n// export default withRouter(SubmitIssue)\nexport default withRouter(withStyles(styles, { withTheme: true })(UserProfile))\n","// React\nimport React\n, {\n    Component,\n    // useState\n}\n    from 'react';\nimport { withRouter } from 'react-router-dom';\n\n// Material UI\nimport {\n    // makeStyles, // used in functional component\n    // useStyles, // Stateful Components cannot use Hooks such as useStyles.\n    withStyles\n} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\n\nimport API from '../../utils/API';\n\nconst styles = theme => ({\n    // const styles = makeStyles(theme => ({\n    // const useStyles = makeStyles(theme => ({\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        padding: theme.spacing(0, 10),\n        ...theme.mixins.toolbar,\n        paddingTop: '12vh',\n        width: '60vw',\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: '48%',\n    },\n\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n\n    wrapper: {\n        position: 'relative',\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    grouping: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        // justifyContent: 'space-between',\n        // width: '80vw',\n        width: '100%',\n    },\n    buttonGroup: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'flex-end',\n        marginTop: theme.spacing(5),\n        marginBottom: theme.spacing(15),\n        width: 'inherit',\n    },\n})\n\nclass OrganizationProfile extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // name: this.props.name,\n            // email: this.props.email,\n            // type: 'Technical'\n        }\n    }\n\n    handleFieldChange = (event) => {\n        // for a regular input field, read field name and value from the event\n        const fieldId = event.target.id;\n        const fieldValue = event.target.value;\n        // this.props.onChange(fieldName, fieldValue); // could use if updating parent state\n        // this.state.onChange(fieldName, fieldValue);\n\n        // console.log(fieldId, fieldValue);\n        this.setState({\n            ...this.state,\n            [fieldId]: fieldValue\n        }\n        ); // this works\n        // this.setState({ testObj: { [fieldId]: fieldValue } }); // not rly. keeps adding indexed\n\n        // this.setState({\n        //         testArr: [\n        //             // ...this.state.testArr, \n        //             {\n        //                 [fieldId]: fieldValue\n        //             }\n        //         ]\n\n        //     }\n\n        // }); // \n        // console.log('handle field change :', this.state); // this will be one step slower\n    }\n\n    clearState = () => {\n        this.setState({\n            ...this.state,\n            // required\n            orgName: '',\n            orgDescription: '',\n            orgUrl: '',\n            email: '',\n            member: [this.props.id]\n            // userType: 'User',\n            // implement later for devs\n            // project: '',\n            // subject: '',\n            // description: '',\n            // owner: '',\n\n            // This is string here but DB stores it as array\n            // comment: '',\n\n            // optional in current scope\n            // url: '',\n            // status: '',\n            // resolved: '',\n            // priority: '',\n            // targetResolutionDate: '',\n            // potentialImpact: '',\n            // image: '',\n            // partImpacted: ''\n        })\n    };\n\n    getAllOrgs = () => {\n        // console.log('do me')\n    }\n\n    getOneOrg = () => {\n        // API.findOneUser(\n        //     this.props.email\n        // )\n        //     .then(res => {\n        //         res.data ?\n        //             console.log('returned :', res.data[0])\n        //             // this.setState({\n        //             //   books: res.data\n        //             // })\n        //             : console.log('no one!', res.data)\n        //     })\n        //     .catch(() =>\n        //         this.setState({\n        //             message: \"No results. Please try another query.\"\n        //         })\n        //     );\n    }\n\n    saveOrg = () => {\n        API.createOrganization({\n            name: this.state.orgName,\n            description: this.state.orgDescription,\n            url: this.state.orgUrl,\n            email: this.state.email,\n            member: [this.props.id]\n        }).then((res) => {\n            console.log('Org saved.', res);\n            this.props.showDashboard();\n        })\n    }\n\n    componentDidUpdate() {\n        console.log('component did update :', this.state);\n    }\n\n    render() {\n        // this.getAllOrgs();\n        const { classes } = this.props;\n        return (\n            <form className={classes.container} noValidate autoComplete=\"off\" >\n                <Typography variant='body2' style={{ marginBottom: 8 }}>Asterisk(*) denotes required fields.</Typography>\n                <div className={classes.grouping}>\n                    <br />\n                    <TextField\n                        id=\"orgName\"\n                        required\n                        // fullWidth\n                        label=\"Provider Name\"\n                        value={this.state.orgName}\n                        className={classes.textField} // disable for full width\n                        // defaultValue={this.props.name}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        onChange={this.handleFieldChange.bind(this)}\n                        style={{ margin: 8 }}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n                    <TextField\n                        id=\"email\"\n                        // fullWidth\n                        label=\"Email\"\n                        value={this.state.email}\n                        className={classes.textField}\n                        style={{ margin: 8 }}\n                        placeholder=\"info@company.com\"\n                        // className={classes.textField} // adding this will break css\n                        // helperText=\"What seems to be the trouble?\"\n                        margin=\"normal\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"outlined\"\n                        onChange={this.handleFieldChange.bind(this)}\n                    />\n                    <TextField\n                        id=\"orgDescription\"\n                        // fullWidth\n                        label=\"Description\"\n                        value={this.state.orgDescription}\n                        style={{\n                            margin: 8,\n                            width: '100%'\n                        }}\n                        // placeholder=\"Placeholder\"\n                        // className={classes.textField} // adding this will break css\n                        // helperText=\"What seems to be the trouble?\"\n                        margin=\"normal\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"outlined\"\n                        onChange={this.handleFieldChange.bind(this)}\n                    />\n                    <TextField\n                        id=\"orgUrl\"\n                        // fullWidth\n                        label=\"URL\"\n                        value={this.state.orgUrl}\n                        style={{ margin: 8, width: '100%' }}\n                        // placeholder=\"Placeholder\"\n                        // className={classes.textField} // adding this will break css\n                        // helperText=\"What seems to be the trouble?\"\n                        margin=\"normal\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"outlined\"\n                        onChange={this.handleFieldChange.bind(this)}\n                    />\n                </div>\n                <div className={classes.buttonGroup}>\n                    <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        className={classes.button}\n                        endIcon={<RotateLeftIcon>Reset Form</RotateLeftIcon>}\n                        onClick={\n                            // this.props.handleSubmitIssue(this.state.testArr) // causes loop SA\n                            () => {\n                                console.log('clicked reset while state is', this.state)\n                                // this.props.handleSubmitIssue()\n                                this.clearState()\n                            }\n                        }\n                    > Reset Form\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.button}\n                        endIcon={<Icon>send</Icon>}\n                        onClick={this.saveOrg\n                            // console.log('clicked button', this.state)\n\n                        }\n                    > Submit\n                    </Button>\n                </div>\n\n            </form >\n        )\n\n    }\n}\n\n// export default withRouter(SubmitIssue)\nexport default withRouter(withStyles(styles, { withTheme: true })(OrganizationProfile))\n","// React\nimport React\n, {\n    Component,\n    // useState\n}\n    from 'react';\nimport { withRouter } from 'react-router-dom';\n\n// Material UI\nimport {\n    // makeStyles, // used in functional component\n    // useStyles, // Stateful Components cannot use Hooks such as useStyles.\n    withStyles\n} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\n// import FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n// import { SnackbarProvider, useSnackbar } from 'notistack'; // later for feedback msg\nimport Divider from '@material-ui/core/Divider';\n\nimport API from '../../utils/API';\n\nconst styles = theme => ({\n    // const styles = makeStyles(theme => ({\n    // const useStyles = makeStyles(theme => ({\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        padding: theme.spacing(0, 10),\n        ...theme.mixins.toolbar,\n        paddingTop: '12vh',\n        width: '60vw',\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: '40%', //default 200\n    },\n\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n\n    wrapper: {\n        position: 'relative',\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    // For Select\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: '55%',\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n\n    divider: {\n        margin: '20px 0 20px 0',\n        width: '100%',\n    },\n    grouping: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'space-between',\n        width: '100%',\n    },\n    buttonGroup: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'flex-end',\n        marginTop: theme.spacing(5),\n        marginBottom: theme.spacing(15),\n        width: 'inherit',\n    },\n})\n\n// Per https://material-ui.com/components/selects/ , needed for normal implement but can't use hooks..?\n// const inputLabel = React.useRef(null);\n// React.useEffect(() => {\n//     setLabelWidth(inputLabel.current.offsetWidth);\n// }, []);\n\n// var Hello = \n// });\n\nclass ProjectProfile extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // organization info\n            // orgId: '', // ObjectId of org. For now, do not force clear?\n            // orgId: 'unknown' // initializing orgId prevents selection from staying\n\n            // project info\n            projId: '', // ObjectId of project\n            projName: '', // unique\n            projDescription: '',\n\n            // version info\n            verId: '', // ObjectId of version\n            verName: '',\n            verDescription: '',\n            // Also needs project ObjectId as ref. Use id above\n\n            // cache\n            organizationList: [], // should not be reset unless query auto restarts\n            organizationNames: [],\n            organizationDesc: [],\n\n            projectList: [],\n            projectNames: [],\n            projectDesc: [],\n\n            versionList: [],\n            versionNames: [],\n            versionDesc: [],\n\n            disableProjSelect: true, // both data types seem to work\n            disableVerSelect: 'true'\n        }\n    }\n\n    //-------------------//\n    // Handler functions //\n    //-------------------//\n    handleFieldChange = (event) => {\n        // for a regular input field, read field name and value from the event\n        const fieldId = event.target.id;\n        const fieldValue = event.target.value;\n        // this.props.onChange(fieldName, fieldValue); // could use if updating parent state\n        // this.state.onChange(fieldName, fieldValue);\n\n        // console.log(fieldId, fieldValue);\n        this.setState({ [fieldId]: fieldValue }); // works\n        // this.setState({ testObj: { [fieldId]: fieldValue } }); // adds index\n    }\n\n    handleOrgSelect = event => {\n        console.log('selected org target: ', event.target)\n        // console.log(this.state.organizationNames.indexOf(event.target.value)) // check index by name\n        let ind = this.state.organizationNames.indexOf(event.target.value)\n        // console.log(this.state.organizationList[ind]) // shows the object at index\n        // this.setState({org: event.target.value})\n        // console.log(Object.keys(this.state.organizationList[ind])) // shows array containing keys from the object\n        // console.log(Object.keys(this.state.organizationList[ind])[0]) // first key (in ObjectId form) in a string\n\n        let selectedId = ''; // must initialize as string\n        // If index was found, get the key. If not, keep blank.\n        ind !== '' ? selectedId = Object.keys(this.state.organizationList[ind])[0] : selectedId = ''\n        console.log('selected org:', selectedId);\n        this.setState({\n            orgId: selectedId,\n\n            // If any proj is selected, remove it\n            projId: '',\n            projName: '',\n            projDescription: '',\n\n            // If any version is selected, remove it\n            verId: '',\n            verName: '',\n            verDescription: ''\n        }\n            , () => { this.getAllProj() } // on org select, query proj list\n        );\n    };\n\n    handleProjSelect = event => {\n        console.log('select proj target: ', event.target)\n        let ind = this.state.projectNames.indexOf(event.target.value) // index of selected item in array\n        // console.log('step1', this.state.projectList[ind]) // the object at index\n        // console.log('step2', Object.keys(this.state.projectList[ind])) // array containing the keys from the object\n        // console.log('step3', Object.keys(this.state.projectList[ind])[0]) // \"_id\", which is the first item on the array\n        // console.log('check :', this.state.projectList[ind]);\n\n        let selectedId = Object.keys(this.state.projectList[ind])[0]; // ObjectId from DB\n        let selectedName = this.state.projectNames[ind]; // Name from DB\n        let selectedDesc = this.state.projectDesc[ind]; // Description from DB\n        console.log('selected proj:', selectedId)\n        this.setState({\n            projId: selectedId,\n            projName: selectedName,\n            projDescription: selectedDesc,\n\n            // If any version is selected, remove it\n            verId: '',\n            verName: '',\n            verDescription: ''\n        }\n            , () => this.getAllVers()) // on proj select, query version list\n    };\n\n    handleVerSelect = event => {\n        console.log('select ver target: ', event.target)\n        let ind = this.state.versionNames.indexOf(event.target.value) // get the index of selected item from array\n        // console.log(this.state.versionList[ind]) // shows the object at index\n        // console.log(Object.keys(this.state.versionList[ind])) // shows array containing just the key from the object\n        // console.log(Object.keys(this.state.versionList[ind])[0]) // that in a string\n\n        let selectedId = '';\n        let selectedName = '';\n        let selectedDesc = '';\n        // If index was found, get the key, name and desc. For some reason not, keep blank.\n        ind !== -1 ? selectedId = Object.keys(this.state.versionList[ind])[0] : selectedId = ''\n        ind !== -1 ? selectedName = this.state.versionNames[ind] : selectedName = ''\n        ind !== -1 ? selectedDesc = this.state.versionDesc[ind] : selectedDesc = ''\n        ind !== -1 ? console.log('selected vers:', selectedId) : console.log('Version index not found.')\n\n        this.setState({\n            verId: selectedId,\n            verName: selectedName,\n            verDescription: selectedDesc\n        })\n    };\n\n    clearState = () => {\n        this.setState({\n            ...this.state,\n            // organization info\n            // orgId: '', // ObjectId of org. For now, do not force clear?\n\n            // project info\n            projId: '', // ObjectId of project\n            projName: '', // unique\n            projDescription: '',\n\n            // version info\n            verId: '', // ObjectId of version\n            verName: '',\n            verDescription: '',\n            // Also needs project ObjectId as ref. Use id above\n\n            // cache\n            organizationList: [], // should not be reset unless query auto restarts\n            organizationNames: [],\n            organizationDesc: [],\n\n            projectList: [],\n            projectNames: [],\n            projectDesc: [],\n\n            versionList: [],\n            versionNames: [],\n            versionDesc: [],\n\n            disableProjSelect: 'true',\n            disableVerSelect: 'true'\n        },\n            () => { // callback inside setState guarantees sync ops\n                this.getAllOrgs() // reset org list to all (applicable, eventually)\n                // this.getAllProj() // reset proj list to all. Called at end of getAllOrgs.\n                console.log('state cleared')\n            })\n    };\n\n    handleFormSubmit = (event) => {\n\n        // Check if org ID is missing.\n        this.state.orgId === ''\n            // If missing, org was not selected; warn user.\n            // ? this.enqueueSnackbar('You must choose an organiation first. \\n If you see none, visit org profile to create one.')\n            ? console.log('choose org first. Visit org profile for creation')\n\n            // If org Id was found, check if proj ID was found.\n            : (async () => {\n                this.state.projId !== ''// If proj ID is found, proj is in DB. Update it. Use ObjectId of org\n                    ? await this.updateProject(this.state.projId, {\n                        \"name\": this.state.projName,\n                        \"description\": this.state.projDescription,\n                        \"organization\": this.state.orgId\n                    })\n                    :\n                    // (async function e() { return 'e' })().then( res => console.log(res + 'f') )\n\n                    // If projId is missing...\n                    (async () => {\n                        await this.createProj();  // first create proj anew to DB. wait until done.\n                    })()\n            })()\n                .then( // After project process...\n                    // Check if version Id is missing.\n                    this.state.verId === ''\n                        ? this.createVer() // If verId is missing, create a new ver in DB.\n                        : // If found, version is in DB. Update it. Use ObjectId of proj\n                        this.updateVersion(this.state.verId, {\n                            \"name\": this.state.verName,\n                            \"description\": this.state.verDescription,\n                            \"project\": this.state.projId\n                        })\n                )\n                .then((() => this.props.showDashboard())) // Once updated, forward to main view\n                .catch(err => console.log(err))\n    }\n\n\n    //------------------------//\n    // Organization functions //\n    //------------------------//\n    getAllOrgs = () => {\n        API.getOrgs() // works if {} is omitted\n            .then(orgs => { // hits w no params for query\n                console.log('API getOrgs returned: ', orgs.data);\n                let objects = orgs.data.map(obj => {\n                    return { [obj._id]: obj.name } // orgId : orgName\n                })\n                let names = orgs.data.map(obj => {\n                    return obj.name // orgId : orgName\n                })\n                this.setState(\n                    {\n                        organizationList: objects,\n                        organizationNames: names\n                    }\n                    // ,\n                    // () => this.getAllProj() // cb\n\n                    // prevState test. did not work\n                    // (prevState) => { // general syntax for avoiding async prob\n                    //     console.log('prevState:', prevState) // initially prints nothing?\n                    //     return {\n                    //         organizationList: objects,\n                    //         organizationNames: names,\n                    //         prevSL: prevState.length // testing\n                    //     }\n                    // })\n                )\n            })\n            .then(() => console.log('state after getAllOrg & getAllProj:', this.state))\n        // .then(() => this.getAllProj()) // query matching projects on org select\n        // works but without parameters\n    }\n\n    // NEEDS DUPLICATION PREVENTION\n    saveOrg = () => {\n        API.createOrganization({\n            name: this.state.orgName,\n            description: this.state.orgDescription,\n            url: this.state.orgUrl,\n            member: [this.props.id] // user Id\n        }).then(() => console.log('Org saved.'))\n    }\n\n    //-------------------//\n    // Project functions //\n    //-------------------//\n\n    createProj = () => {  // works\n        console.log('creating new project')\n        API.createProject({\n            name: this.state.projName,\n            description: this.state.projDescription,\n            organization: [this.state.orgId] // user Id\n        })\n            .then((res) => console.log('Project saved.', res))\n            .catch(error => console.log(error))\n            .then(() => this.getAllProj()) // refresh proj list\n    }\n\n    updateProject = async (id, data) => { // works\n        console.log(`update proj w/ ${id} and this data:`, data)\n        await API.updateProject(id, data)\n            .then(result => {\n                console.log('updateProject returned data: ', result.data)\n                return result\n            })\n            .catch(error => console.log('error occurred!', error));\n    }\n\n    // Query projects matching selected organization\n    getAllProj = () => { // works w/o params\n        API.getProjects(\n            { // organization: this.state.orgId // non func\n            })\n            .then(projects => {\n                console.log('get all proj', projects);\n\n                let objects = [];\n                let names = [];\n                let descriptions = [];\n\n                for (let obj of projects.data) { // iterable array, so for-in does not work\n                    if (obj.organization === this.state.orgId) {\n                        objects.push({ [obj._id]: obj.name }) // projId : projName\n                        names.push(obj.name); // save names separately // works\n                        descriptions.push(obj.description); // save descriptions separately\n                    }\n                } // .map does not work since it may create \"undefined\" holes in output array\n                // .filter does not work since condition sits on same level as data to save\n\n                objects.includes(undefined) ? // no longer need to check undefineds due to change above, but will leave for now\n                    this.setState({\n                        projectList: [],\n                        projectNames: [],\n                        projectDesc: [],\n                        disableProjSelect: true // prevent proj pick\n                    },\n                        console.log('No relevant project. ', objects, names, descriptions)\n                        // console.log('No relevant project. ', o2, n2)\n                    ) :\n                    // If relevant projects are found, add list to state and enable project selection\n                    // objects.length > 0 && names.length > 0 ?\n                    this.setState({\n                        projectList: objects,\n                        projectNames: names,\n                        projectDesc: descriptions,\n                        disableProjSelect: false // enables project select\n                    }\n                        , console.log('Relevant projects found. Adding to state:', objects, names, descriptions)\n                        // , console.log('Relevant projects found. Adding to state:', o2, n2)\n                    )\n\n            })\n            .then(() => console.log('state after getAllProj, filtered :', this.state))\n            .then(this.getAllVers()) // query matching versions on proj select // works?\n            .catch(err => console.log(err));\n    }\n\n\n    //-------------------//\n    // Version functions //\n    //-------------------//\n    createVer = () => {\n        API.createVersion({\n            name: this.state.verName,\n            description: this.state.verDescription,\n            project: this.state.projId // project Id as ref\n        })\n            .then(res => console.log('Version saved.', res))\n            .catch(error => console.log(error))\n    }\n\n    updateVersion = async (id, data) => { // works\n        console.log(`update version w/ ${id} and this data:`, data)\n        await API.updateVersion(id, data)\n            .then(result => {\n                console.log('updateVersion returned data: ', result.data)\n                return result\n            })\n            .catch(error => console.log(error));\n    }\n\n    getAllVers = () => {\n        API.getVersions({\n            // project: this.state.projId // seems to work but below logic is for unfiltered data\n        })\n            .then(versions => {\n                console.log('get all vers', versions)\n                let objects = [];\n                let names = [];\n                let descriptions = [];\n\n                for (let obj of versions.data) { // iterable array, so for-in does not work\n                    if (obj.project === this.state.projId) {\n                        objects.push({ [obj._id]: obj.name }) // verId : verName\n                        names.push(obj.name); // save names separately\n                        descriptions.push(obj.description); // save descriptions separately\n                    }\n                } // .map does not work since it may create \"undefined\" holes in output array\n                // .filter does not work since condition sits on same level as data to save\n\n                // If blanks exist, this is remnant from relevant query\n                objects.includes(undefined) ?\n                    this.setState({\n                        versionList: [],\n                        versionNames: [],\n                        versionDesc: [],\n                        disableVerSelect: true // prevent select\n                    },\n                        console.log('No relevant version. ', objects, names, descriptions)\n                    ) :\n                    // If relevant result is found, add list to state and enable selection\n                    this.setState({\n                        versionList: objects,\n                        versionNames: names,\n                        versionDesc: descriptions,\n                        disableVerSelect: false // enables select\n                    }, console.log('Relevant versions found. Adding to state:', objects, names, descriptions)\n                    )\n            })\n    }\n\n    getOneVer = () => {\n        API.findOneVersion(this.state.verId)\n            .then(ver => console.log('get one ver', ver))\n    }\n\n\n    //--------------------//\n    //  Lifecyle Methods  //\n    //--------------------//\n    componentDidMount() {\n        this.getAllOrgs() // adds to state the list of org objects and array of org names\n    }\n\n    componentDidUpdate() {\n        console.log('component did update :', this.state);\n        // // prevState test did not work\n        // this.state.orgId !== prevState.orgId ?\n        //     () => {\n        //         console.log('new orgId detected:', this.state.orgId)\n        //         this.getAllProj()\n\n        //     }\n        //     : null // query matching projects on org select\n    }\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <form className={classes.container} noValidate autoComplete=\"off\" >\n                <Typography variant='body2'>Asterisk(*) denotes required fields.</Typography>\n                    <br />\n                    {/* Organization */}\n                <div className={classes.grouping}>\n                    <FormControl variant=\"outlined\" className={classes.formControl}>\n                        <InputLabel\n                            // ref={inputLabel} \n                            id=\"demo-simple-select-outlined-label-org\">\n                            Provider\n                            </InputLabel>\n                        <Select\n                            labelId=\"demo-simple-select-outlined-label-org\"\n                            // id={this.state.orgId || \"demo-simple-select-outlined\"}\n                            id={\"demo-simple-select-outlined\"}\n                            key={Date.now}\n                            placeholder='Provider Name'\n                            value={\n                                this.state.orgId !== '' ? this.state.orgId : '' // does not change display\n                                // collin tried: this.state.orgId\n                            }\n                            onChange={this.handleOrgSelect\n                                // this.handleFieldChange // not reading correctly?\n                                // this.setState({ event.target.value })\n                            }\n                        // labelWidth={'500px'}\n                        >\n                            {\n                                this.state.organizationNames ?\n                                    this.state.organizationNames.map((org, ind) => {\n                                        // console.log(Object.keys(this.state.organizationList[ind])[0])\n                                        // console.log(org)\n                                        // <option key={org.key} value={org.key}>{org.value}</option>\n                                        return < MenuItem\n                                            id={Object.keys(this.state.organizationList[ind])[0]}\n                                            // id={org} // collin tried\n                                            key={org}\n                                            name={org}\n                                            value={org} >\n                                            {/* error: you have provided an out-of-range value `undefined` for the select component. */}\n                                            {org}\n                                        </MenuItem>\n                                    })\n                                    : () => console.log('state during MenuItem render', this.state)\n                                // None should not be an option. Create org first if missing.\n                            }\n                        </Select>\n                    </FormControl>\n                    <TextField\n                        id=\"orgId\"\n                        // REMEMBER, LIST IS FOR NAME BUT SAVES ID\n                        disabled\n                        // fullWidth\n                        className={classes.textField}\n                        label=\"Provider ID\"\n                        value={this.state.orgId}\n                        style={{ margin: 8 }}\n                        margin=\"normal\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"filled\"\n                        onChange={this.handleFieldChange.bind(this)}\n                    />\n                    <Divider className={classes.divider} />\n                </div>\n\n                {/* project */}\n                <div className={classes.grouping}>\n                    <FormControl variant=\"outlined\"\n                        className={classes.formControl}\n                    // {this.state.projectList ? null : disabled}\n                    >\n                        <InputLabel\n                            // ref={inputLabel} \n                            id=\"demo-simple-select-outlined-label-proj\">\n                            Select Project\n                        </InputLabel>\n                        <Select\n                            labelId=\"demo-simple-select-outlined-label-proj\"\n                            // id={this.state.orgId || \"demo-simple-select-outlined\"}\n                            id={\"demo-simple-select-outlined-proj\"}\n                            key={Date.now}\n                            placeholder='Project Name'\n                            // value={this.state.orgName}\n                            onChange={\n                                // onOpen={ // doesn't work but unsure if due to choice\n                                // this.handleFieldChange // not reading correctly?\n                                // this.setState({ event.target.value })\n                                this.handleProjSelect\n                            }\n                        // labelWidth={'500px'}\n                        >\n                            {\n                                this.state.projectNames ?\n                                    this.state.projectNames.map((proj, i) => {\n                                        // this.state.projectList ? // unexpected\n                                        // Object.keys(this.state.projectList[i])[0]: \n                                        return <MenuItem\n                                            id={proj}\n                                            key={Date.now}\n                                            name={proj}\n                                            value={proj}\n                                            disabled={\n                                                this.state.disableProjSelect ? true : false\n                                                // this.state.orgId !== '' ? 'false' : 'true'\n                                            }\n                                        >\n                                            {proj}\n                                            {console.log('proj list at render:', this.state.projectList[i])}\n                                        </MenuItem>\n                                    }) : <br />\n                                // 'None' should not be an option. Create org first if missing.\n                            }\n                        </Select>\n                    </FormControl>\n                    <TextField\n                        id=\"projId\"\n                        // REMEMBER, LIST IS FOR NAME BUT SAVES ID\n                        disabled\n                        // fullWidth\n                        label=\"Project ID\"\n                        className={classes.textField}\n                        value={this.state.projId}\n                        style={{ margin: 8 }}\n                        margin=\"normal\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"filled\"\n                        onChange={this.handleFieldChange.bind(this)}\n                    />\n                    <TextField\n                        id=\"projName\"\n                        required\n                        fullWidth\n                        disabled={this.state.orgId === '' ? true : false}\n                        label=\"Project/Product Name\"\n                        value={this.state.projName}\n                        // className={classes.textField} // disabled for full width\n                        // defaultValue={this.props.name}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        onChange={this.handleFieldChange.bind(this)}\n                        style={{ margin: 8 }}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n                    <TextField\n                        id=\"projDescription\"\n                        fullWidth\n                        disabled={this.state.orgId === '' ? true : false}\n                        label=\"Description\"\n                        value={this.state.projDescription}\n                        style={{ margin: 8 }}\n                        // placeholder=\"Placeholder\"\n                        // className={classes.textField} // adding this will break css\n                        // helperText=\"What seems to be the trouble?\"\n                        margin=\"normal\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"outlined\"\n                        onChange={this.handleFieldChange.bind(this)}\n                    />\n                    <Divider className={classes.divider} />\n                </div>\n                {/* Version */}\n                <div className={classes.grouping}>\n                    <FormControl variant=\"outlined\" className={classes.formControl}>\n                        <InputLabel id=\"demo-simple-select-outlined-label-ver\">\n                            Select Version\n                        </InputLabel>\n                        <Select\n                            labelId=\"demo-simple-select-outlined-label-ver\"\n                            // id={this.state.orgId || \"demo-simple-select-outlined\"}\n                            id={\"demo-simple-select-outlined-ver\"}\n                            placeholder='Version / Specification'\n                            // value={this.state.verName}\n                            onChange={\n                                // onOpen={ // doesn't work but unsure if due to choice\n                                // this.handleFieldChange // not reading correctly?\n                                // this.setState({ event.target.value })\n                                this.handleVerSelect\n                            }\n                        // labelWidth={'500px'}\n                        >\n                            {\n                                this.state.versionNames ?\n                                    this.state.versionNames.map((ver, i) => {\n                                        // this.state.versionList ? // unexpected\n                                        // Object.keys(this.state.versionList[i])[0]: \n                                        return <MenuItem\n                                            id={ver}\n                                            key={ver}\n                                            name={ver}\n                                            value={ver}\n                                            disabled={\n                                                this.state.disableVerSelect ? true : false\n                                            }\n                                        >\n                                            {ver}\n                                            {console.log('ver list at render:', this.state.versionList[i])}\n                                        </MenuItem>\n                                    }) : <br />\n                                // 'None' should not be an option. Create org first if missing.\n                            }\n                        </Select>\n                        {console.log('Disable project selection at render is:', this.state.disableProjSelect)}\n                    </FormControl>\n\n                    <TextField\n                        id=\"verId\"\n                        // REMEMBER, LIST IS FOR NAME BUT SAVES ID\n                        disabled\n                        // fullWidth\n                        className={classes.textField}\n                        label=\"Version ID\"\n                        value={this.state.verId}\n                        style={{ margin: 8 }}\n                        margin=\"normal\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"filled\"\n                        onChange={this.handleFieldChange.bind(this)}\n                    />\n                    <TextField\n                        id=\"verName\"\n                        required\n                        fullWidth\n                        label=\"Version / Specification Name\"\n                        // className={classes.textField} // disabled for full width\n                        // value={this.state.verName || '(not applicable)'}\n                        value={this.state.verName}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        onChange={this.handleFieldChange.bind(this)}\n                        style={{ margin: 8 }}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n\n                    <TextField\n                        id=\"verDescription\"\n                        fullWidth\n                        label=\"Description\"\n                        value={this.state.verDescription}\n                        style={{ margin: 8 }}\n                        // placeholder=\"Placeholder\"\n                        // className={classes.textField} // adding this will break css\n                        // helperText=\"What seems to be the trouble?\"\n                        margin=\"normal\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"outlined\"\n                        onChange={this.handleFieldChange.bind(this)}\n                    />\n                    {/* <Divider className={classes.divider} /> */}\n                </div>\n                <div className={classes.buttonGroup}>\n                    <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        className={classes.button}\n                        endIcon={<RotateLeftIcon>Reset Form</RotateLeftIcon>}\n                        onClick={\n                            // this.props.handleSubmitIssue(this.state.testArr) // causes infinite loop\n                            () => {\n                                console.log('form reset while state is:', this.state)\n                                this.clearState()\n                            }\n                        }\n                    > Reset Form\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.button}\n                        endIcon={<Icon>send</Icon>}\n                        onClick={this.handleFormSubmit}\n                    > Submit\n                    </Button>\n                </div>\n\n            </form >\n        )\n\n    }\n}\n\n// export default withRouter(SubmitIssue)\nexport default withRouter(withStyles(styles, { withTheme: true })(ProjectProfile))\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\n// import CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\n// import CardMedia from '@material-ui/core/CardMedia';\n// import Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { Divider } from '@material-ui/core';\nimport Avatar from '@material-ui/core/Avatar';\n\nconst useStyles = makeStyles(theme => ({\n    // card\n    card: {\n        maxWidth: 500\n        // 345\n        ,\n        minWidth: '100%',\n        // marginLeft: 240,\n        marginTop: theme.spacing(1),\n    },\n    //   media: {\n    //     height: 140,\n    //   },\n\n    divider: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    // avatar (profile image)\n    avatarRoot: {\n        display: 'flex',\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n        alignItems: 'center',\n        justifyContent: 'space-between'\n    },\n    avatarBlock: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    avatar: {\n        // display: 'inline-block',\n        marginRight: theme.spacing(2),\n    },\n    bigAvatar: {\n        width: 60,\n        height: 60,\n    },\n    target: {\n        fontWeight: 'bold',\n        color: 'red',\n    },\n\n    // texts: {\n    //     display: 'flex',\n    //     flexWrap: 'wrap',\n    // },\n}));\n\nexport default function CommentCard(props) {\n    const classes = useStyles();\n\n    const dates = [], times = []; // timestamps\n\n    let timeInMs = Date.parse(props.createdAt);\n    let prettyDate = new Date(timeInMs).toLocaleDateString();\n    let prettyTime = new Date(timeInMs).toLocaleTimeString();\n\n    // console.log('time=', prettyTime)\n    // console.log('date=', prettyDate)\n    // dates.push(prettyDate);\n    // times.push(prettyTime);\n    // return ind; // simply avoids unhelpful msg\n\n    return (\n        <Card className={classes.card}>\n            <CardActionArea>\n                {/* <CardMedia\n                className={classes.media}\n                image=\"/static/images/cards/contemplative-reptile.jpg\"\n                title=\"Contemplative Reptile\"\n                /> */}\n                <CardContent>\n                    <div className={classes.avatarRoot}>\n                        <div className={classes.avatarBlock}>\n                            <Avatar alt={props.displayName}\n                                src={props.photoURL}\n                                className={classes.avatar}\n                            >\n                                {props.displayName === 'Anonymous User' ? '?' : props.displayName}\n                            </Avatar>\n                            <Typography gutterBottom variant=\"h6\" component=\"h2\" display='inline'>{props.displayName}</Typography>\n                        </div>\n                        <div>\n                            {/* <Typography>{props.createdAt}</Typography> */}\n                            <Typography>{prettyDate}, {prettyTime}</Typography>\n                        </div>\n                    </div>\n                    <Typography display='inline' variant=\"subtitle1\" color=\"textSecondary\" component=\"p\">\n                        {props.actionDesc}\n                    </Typography>\n                    {/* <Typography display='inline' variant=\"subtitle2\" color=\"textSecondary\" component=\"p\">{'\\xa0\\xa0'}(+3 other changes)</Typography> */}\n                    <Divider className={classes.divider} />\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\"\n                    >\n                        {props.comment}\n                    </Typography>\n                </CardContent>\n            </CardActionArea>\n            {/* <CardActions>\n                        <Button size=\"small\" color=\"primary\">\n                            Share\n                </Button>\n                        <Button size=\"small\" color=\"primary\">\n                            Learn More\n                </Button>\n                    </CardActions> */}\n        </Card>\n\n\n    );\n}","// React\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\n// Material UI\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { Divider } from '@material-ui/core';\nimport 'date-fns';\n// import DateTimePicker from '../../components/DateTimePicker/DateTimePicker';\n\nimport CommentCard from '../../components/CommentCard'\nimport Paper from '@material-ui/core/Paper';\n\n// Future scope: developer-only entry fields toggle\n// import FormGroup from '@material-ui/core/FormGroup';\n// import FormControlLabel from '@material-ui/core/FormControlLabel';\n// import Switch from '@material-ui/core/Switch';\n\nimport API from '../../utils/API';\n// import { minHeight } from '@material-ui/system';\n\nconst styles = theme => ({\n    // const styles = makeStyles(theme => ({\n    // const useStyles = makeStyles(theme => ({\n    topContainer: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        height: '100vh',\n        alignItems: 'flex-start',\n    },\n\n    containerOne: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        padding: theme.spacing(0, 5),\n        ...theme.mixins.toolbar,\n        // paddingLeft: 240,\n        paddingTop: '10vh',\n        width: '55vw', // split left & right\n        height: '100%',\n    },\n    containerTwo: { // comments section\n        width: '35vw',\n        paddingTop: '10vh',\n        paddingLeft: '1vw',\n        paddingRight: '1vw',\n        backgroundColor: '#bbdefb',\n\n        // make scrollable\n        maxHeight: window.screen.availHeight,\n        overflow: 'auto',\n        // ADD MEDIA QUERY FOR SMALL VIEWPORT. MOVE TO BOTTOM or ADD BTN THAT OPENS MODAL\n        minHeight: window.screen.availHeight,\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: '40%',\n    },\n\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n\n    wrapper: {\n        position: 'relative',\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    // For Select\n    formControl: {\n        margin: theme.spacing(1),\n        // marginTop: theme.spacing(2), // lines up verically w textfields\n        minWidth: '55%',\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n\n    divider: {\n        margin: '20px 0 20px 0',\n    },\n\n    toolbar: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        padding: theme.spacing(0, 1),\n        ...theme.mixins.toolbar,\n    },\n    grouping: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'space-between',\n        width: '100%',\n    },\n\n    wideTextField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: '55%',\n    },\n})\n\nclass ManageIssue extends Component {\n    // function SubmitIssue(props) {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedDate: '-',\n            userId: '',\n\n            // organization info //\n            // orgId: '', // ObjectId of org. For now, do not force clear?\n            // orgId: 'unknown' // initializing orgId prevents selection from staying\n\n            // project info //\n            projId: '', // ObjectId of project\n            projName: '', // unique\n            // projDescription: '',\n\n            // version info //\n            verId: '', // ObjectId of version\n            verName: '',\n            // verDescription: '',\n            // Also needs project ObjectId as ref. Use id above\n\n            // cache //\n            organizationList: [], // should not be reset unless query auto restarts\n            organizationNames: [],\n            organizationDesc: [],\n\n            projectList: [],\n            projectNames: [],\n            projectDesc: [],\n\n            versionList: [],\n            versionNames: [],\n            versionDesc: [],\n\n            // issue query result\n            issueReporters: [],\n            issueOwners: [],\n            issueResolved: [],\n            issuePriorities: [],\n            issueTargetRes: [],\n\n            issueTypes: [],\n            issueStatus: [],\n            issueList: [], // objects (of objid-subject pairs?)\n            issueNames: [],\n            issueDesc: [],\n\n            issueDates: [],\n            issueURLs: [],\n            issueImageURLs: [],\n            issueCommentIds: [],\n            issueImpacts: [],\n\n            issueReporterNames: [],\n\n            issueObjectList: [],\n            // issue now has reporter name. use it?\n\n            // Toggle these to disable Select tag below un-selected higher category\n            disableProjSelect: true, // string data type seems to work as well\n            disableVerSelect: true,\n            disableIssueSelect: true,\n\n            // issue\n\n            issuePreState: {}, // GET query result\n            // issuePostState: {}, // updated on input change; used for POST req & for actionDesc array.\n            issueStatusChoices: ['Open', 'Investigating', 'Implementing', 'Escalated', 'Resolved', 'Closed'], // do not clear\n            issuePriorityChoices: ['Critical', 'High', 'Medium', 'Low', 'Future'],  // do not clear\n\n            issueAspects: [ // prioritized list used for Comment's actionDescription\n                'reporter', // basically immutable\n                'owner',\n                'resolved',\n\n                'priority',\n                'targetResolutionDate',\n                'type',\n\n                'status',\n                'subject',\n                'description',\n\n                'potentialImpact',\n                'timing',\n                'url',\n\n                'imageURL',\n                'organization',\n                'project',\n\n                'version',\n                'comments', // ObjectId array. \n                'reporterName'\n            ],\n\n            reporter: '', // basically immutable\n            owner: '',\n            resolved: false, // Boolean. Updated if status if Resolved/Closed.\n            priority: '', // one from issuePriorityChoices\n            targetResolutionDate: '',\n            type: 'Technical', // restricted in current scope\n            status: '',\n            subject: '', // equivalent to issue name\n            description: '', // only issue needs desc on this page\n            potentialImpact: '',\n            timing: '', // vs selectedDate?\n            url: '',\n            imageURL: '',\n            comment: '', // accept string & commit into Comment model's array\n            reporterName: '',\n\n            developerMode: false, // If true, allow updates to restricted fields\n\n            // also Id for org, proj & ver as ref\n\n            // comment creation info //\n\n            commentVisibilityChoices: [  // do not clear\n                // 'Everyone', \n                'Organization members and reporter' // locked in current scope\n                // 'Organization members only'\n                // 'Project members only'\n                // 'Project members and reporter', etc. in plans\n            ],\n\n            issue: '', // ObjectId. Issue ref\n            commenter: '', // ObjectId. User ref\n            actionDesc: [], // prioritized list of issue aspect changes in string format\n            // If issue status is Resolved/Closed, CAN take final item (or the final comment?) as Final Resolution.\n            visibility: '', // one from commentVisibilityChoices\n            image: '', // from User Profile\n            // timestamps\n            createdAt: '', // to be read from db only\n            updatedAt: '', // to be read from db only\n            commenterName: this.props.userName,\n\n            // comment query info //\n\n            commentOrgIds: [],\n            commentProjIds: [],\n            commentVerIds: [],\n            commentIssueIds: [],\n            commentCommenterIds: [],\n\n            commentActionsDescriptions: [],\n            commentTexts: [],\n            commentVisibilities: [],\n            commentPhotoURLs: [],\n            commentTimestamps: [],\n\n            commentFullObjects: [],\n\n            commentAuthors: [], // displayName\n            commentOrgNames: [],\n            commentProjNames: [],\n            commentVerNames: [],\n            commentIssueSubjects: []\n\n        }\n    }\n\n    //-------------------//\n    // Handler functions //\n    //-------------------//\n    handleFieldChange = event => {\n        // for a regular input field, read field name and value from the event\n        const fieldId = event.target.id;\n        const fieldValue = event.target.value;\n        // this.props.onChange(fieldName, fieldValue); // could use if updating parent state\n        // this.state.onChange(fieldName, fieldValue);\n\n        // console.log(fieldId, fieldValue);\n        this.setState(\n            { [fieldId]: fieldValue } // this works\n        );\n    }\n\n    handleDateChange = date => {\n        console.log('handleDateChange got date:', date)\n        this.setState({\n            ...this.state,\n            // timing: date\n            selectedDate: date\n        })\n    };\n\n    handleOrgSelect = event => {\n        console.log('selected org target: ', event.target)\n        // console.log(this.state.organizationNames.indexOf(event.target.value)) // check index by name\n        let ind = this.state.organizationNames.indexOf(event.target.value)\n        // console.log(this.state.organizationList[ind]) // shows the object at index\n        // this.setState({org: event.target.value})\n        // console.log(Object.keys(this.state.organizationList[ind])) // shows array containing keys from the object\n        // console.log(Object.keys(this.state.organizationList[ind])[0]) // first key (in ObjectId form) in a string\n\n        let selectedId = '', selectedOrgName = ''; // must initialize as string\n        // If index was found, get the key. If not, keep blank.\n        ind !== '' ? selectedId = Object.keys(this.state.organizationList[ind])[0] : selectedId = '';\n        ind !== '' ? selectedOrgName = this.state.organizationNames[ind] : selectedOrgName = '';\n        console.log('selected org:', selectedId);\n        this.setState({\n            ...this.state,\n            orgId: selectedId,\n            orgName: selectedOrgName,\n\n            // If any proj is selected, remove it\n            projId: '',\n            projName: '',\n            projDescription: '',\n\n            // If any version is selected, remove it\n            verId: '',\n            verName: '',\n            verDescription: '',\n\n            // If any issue is selected, remove it\n            reporter: '',\n            owner: '',\n            resolved: '',\n            priority: '',\n            targetResolutionDate: '',\n            type: 'Technical', // fixed in current scope\n            status: '',\n            subject: '',\n            description: '',\n            potentialImpact: '',\n            timing: '',\n            url: '',\n            imageURL: '',\n            comments: [], // ObjectIds of Comment\n\n            // If any comment data is there, remove it\n            issue: '',\n            commenter: '',\n            actionDesc: [],\n            visibility: '',\n            comment: '' // String on a Comment object\n\n            // CLEAR ISSUES AND COMMENTS INFO AS WELL //\n        }\n            , () => { this.getAllProj() } // on org select, query proj list\n        );\n    };\n\n    handleProjSelect = event => {\n        console.log('select proj target: ', event.target)\n        let ind = this.state.projectNames.indexOf(event.target.value) // index of selected item in array\n        let selectedId = Object.keys(this.state.projectList[ind])[0]; // ObjectId from DB\n        let selectedName = this.state.projectNames[ind]; // Name from DB\n        let selectedDesc = this.state.projectDesc[ind]; // Description from DB\n        console.log('selected proj:', selectedId)\n        this.setState({\n            ...this.state,\n            projId: selectedId,\n            projName: selectedName,\n            projDescription: selectedDesc,\n\n            // If any version is selected, remove it\n            verId: '',\n            verName: '',\n            verDescription: ''\n\n            // CLEAR ISSUES AND COMMENTS INFO AS WELL // \n        }\n            , () => this.getAllVers()) // on proj select, query version list\n    };\n\n    handleVerSelect = event => {\n        console.log('select ver target: ', event.target)\n        let ind = this.state.versionNames.indexOf(event.target.value) // get the index of selected item from array\n        let selectedId = '';\n        let selectedName = '';\n        let selectedDesc = '';\n        // If index was found, get the key, name and desc. For some reason not, keep blank.\n        ind !== -1 ? selectedId = Object.keys(this.state.versionList[ind])[0] : selectedId = ''\n        ind !== -1 ? selectedName = this.state.versionNames[ind] : selectedName = ''\n        ind !== -1 ? selectedDesc = this.state.versionDesc[ind] : selectedDesc = ''\n        ind !== -1 ? console.log('selected vers:', selectedId) : console.log('Version index not found.')\n\n        this.setState({\n            ...this.state,\n            verId: selectedId,\n            verName: selectedName,\n            verDescription: selectedDesc\n\n            // CLEAR ISSUES AND COMMENTS INFO AS WELL //\n        }\n            , () => this.getAllIssues()) // on ver select, query issue list\n    };\n\n    handleIssueSelect = event => {\n        console.log('select issue event.target: ', event.target);\n        let ind = this.state.issueNames.indexOf(event.target.value); // get the index of selected item from array\n        let id = '',\n            name = '', // subject\n            desc = '',\n            timing = '',\n            URL = '',\n            ImageURL = '',\n            Comment = '', // ObjectId in Comment schema\n            Reporter = '',\n            owner = '',\n            resolved = false,\n            priority = '',\n            targetRes = '',\n            type = '',\n            status = '',\n            impact = '',\n            reporterName = ''\n\n        // If index was found, get the key, name and desc. For some reason not, keep blank.\n        ind !== -1 ? id = Object.keys(this.state.issueList[ind])[0] : id = '';\n        ind !== -1 ? console.log('selected issue Id:', id) : console.log('Issue index not found.');\n\n        ind !== -1 ? Reporter = this.state.issueReporters[ind] : Reporter = '';\n        ind !== -1 ? owner = this.state.issueOwners[ind] : owner = '';\n        ind !== -1 ? resolved = this.state.issueResolved[ind] : resolved = '';\n        ind !== -1 ? priority = this.state.issuePriorities[ind] : priority = '';\n        ind !== -1 ? targetRes = this.state.issueTargetRes[ind] : targetRes = '';\n\n        ind !== -1 ? type = this.state.issueTypes[ind] : type = '';\n        ind !== -1 ? status = this.state.issueStatus[ind] : status = 'Open';\n        ind !== -1 ? name = this.state.issueNames[ind] : name = '';\n        ind !== -1 ? desc = this.state.issueDesc[ind] : desc = '';\n        ind !== -1 ? timing = this.state.issueDates[ind] : timing = '';\n        ind !== -1 ? URL = this.state.issueURLs[ind] : URL = '';\n        ind !== -1 ? ImageURL = this.state.issueImageURLs[ind] : ImageURL = '';\n        ind !== -1 ? Comment = this.state.issueCommentIds[ind] : Comment = '';\n        ind !== -1 ? impact = this.state.issueImpacts[ind] : impact = '';\n        ind !== -1 ? reporterName = this.state.issueReporterNames[ind] : reporterName = '';\n\n        this.setState({\n            ...this.state,\n            issue: id,\n            subject: name,\n            description: desc,\n            // timing: timing,\n            selectedDate: timing,\n            url: URL,\n            imageURL: ImageURL,\n            comments: Comment,\n            reporter: Reporter,\n            owner: owner,\n            resolved: resolved,\n            priority: priority,\n            targetResolutionDate: targetRes,\n            type: type,\n            status: status,\n            potentialImpact: impact,\n            reporterName: reporterName\n\n            // CLEAR COMMENTS INFO AS WELL //\n        },\n            () => this.getAllComments())\n    };\n\n    handleStatusSelect = event => {\n        // console.log('select status target: ', event.target)\n        this.setState({\n            ...this.state,\n            status: event.target.value\n        })\n    }\n\n    // handleSubmit = () => {\n    //     await \n    // }\n\n    clearState = () => {\n        this.setState({\n            ...this.state,\n            // selectedDate: '',\n\n            // organization info //\n            // orgId: '', // ObjectId of org. For now, do not force clear?\n            // orgId: 'unknown' // initializing orgId prevents selection from staying\n\n            // project info //\n            projId: '', // ObjectId of project\n            projName: '', // unique\n            // projDescription: '',\n\n            // version info //\n            verId: '', // ObjectId of version\n            verName: '',\n            // verDescription: '',\n            // Also needs project ObjectId as ref. Use id above\n\n            // cache //\n            // organizationList: [], // should not be reset unless query auto restarts\n            // organizationNames: [],\n            // organizationDesc: [],\n\n            projectList: [],\n            projectNames: [],\n            projectDesc: [],\n\n            versionList: [],\n            versionNames: [],\n            versionDesc: [],\n\n            // issue info\n            issueList: [],\n            issueNames: [],\n            issueDesc: [],\n\n            issueObjectList: [],\n\n            // Toggle these to disable Select tag below un-selected higher category\n            disableProjSelect: true, // string data type seems to work as well\n            disableVerSelect: true,\n            disableIssueSelect: true,\n\n            issuePreState: {}, // GET query result\n            // issuePostState: {}, // updated on input change; used for POST req & for actionDesc array. (useful?)\n\n            issueAspects: [ // prioritized list used for Comment's actionDescription\n                'reporter', // basically immutable\n                'owner',\n                'resolved',\n                'priority',\n                'targetResolutionDate',\n                'type',\n                'status',\n                'subject',\n                'description',\n                'potentialImpact',\n                'timing',\n                'url',\n                'imageURL',\n                'comments' // ObjectId array. \n            ],\n\n            reporter: '', // basically immutable\n            owner: '',\n            resolved: '', // \n            priority: '',\n            targetResolutionDate: '',\n            type: 'Technical', // fixed in current scope\n            status: '',\n            subject: '',\n            description: '',\n            potentialImpact: '',\n            timing: '',\n            url: '',\n            imageURL: '',\n            comment: [], // accept string & commit into Comment model's array\n            // also Id for org, proj & ver as ref\n\n            // comment creation info //\n\n            issue: '', // ObjectId. Issue ref\n            commenter: '', // ObjectId. User ref\n            actionDesc: [], // prioritized list of issue aspect changes in string format\n            // If issue status is Resolved/Closed, CAN take final item (or the final comment?) as Final Resolution.\n            visibility: '', // all, organization, project\n            image: '', // from User Profile\n\n            // timestamps\n            createdAt: '', // read from db only\n            updatedAt: '', // read from db only\n\n            // comment query info //\n\n            commentOrgIds: [],\n            commentProjIds: [],\n            commentVerIds: [],\n            commentIssueIds: [],\n            commentCommenterIds: [],\n\n            commentActionsDescriptions: [],\n            commentTexts: [],\n            commentVisibilities: [],\n            commentPhotoURLs: [],\n            commentTimestamps: [],\n\n            commentFullObjects: [],\n            commentAuthors: []\n        })\n    };\n\n    //------------------------//\n    // Organization functions //\n    //------------------------//\n    getAllOrgs = () => {\n        API.getOrgs() // works if {} is omitted\n            .then(orgs => { // hits w no params for query\n                // console.log('API getOrgs returned: ', orgs.data);\n                let objects = orgs.data.map(obj => {\n                    return { [obj._id]: obj.name } // orgId : orgName\n                })\n                let names = orgs.data.map(obj => {\n                    return obj.name // orgId : orgName\n                })\n                this.setState({\n                    organizationList: objects,\n                    organizationNames: names\n                })\n            })\n        // .then(() => console.log('state after getAllOrg:', this.state))\n    }\n\n    // NEEDS DUPLICATION PREVENTION\n    saveOrg = () => {\n        API.createOrganization({\n            name: this.state.orgName,\n            description: this.state.orgDescription,\n            url: this.state.orgUrl,\n            member: [this.props.id] // user Id\n        }).then(() => console.log('Org saved.'))\n    }\n\n    //-------------------//\n    // Project functions //\n    //-------------------//\n\n    createProj = () => {  // works\n        console.log('creating new project')\n        API.createProject({\n            name: this.state.projName,\n            description: this.state.projDescription,\n            organization: [this.state.orgId] // user Id\n        })\n            .then((res) => console.log('Project saved.', res))\n            .catch(error => console.log(error))\n            .then(() => this.getAllProj()) // refresh proj list\n    }\n\n    updateProject = async (id, data) => { // works\n        console.log(`update proj w/ ${id} and this data:`, data)\n        await API.updateProject(id, data)\n            .then(result => {\n                console.log('updateProject returned data: ', result.data)\n                return result\n            })\n            .catch(error => console.log('error occurred!', error));\n    }\n\n    // Query projects matching selected organization\n    getAllProj = () => { // works w/o params\n        API.getProjects(\n            { // organization: this.state.orgId // non func\n            })\n            .then(projects => {\n                // console.log('get all proj', projects);\n\n                let objects = [];\n                let names = [];\n                let descriptions = [];\n\n                for (let obj of projects.data) { // iterable array, so for-in does not work\n                    if (obj.organization === this.state.orgId) {\n                        objects.push({ [obj._id]: obj.name }) // projId : projName\n                        names.push(obj.name); // save names separately // works\n                        descriptions.push(obj.description); // save descriptions separately\n                    }\n                } // .map does not work since it may create \"undefined\" holes in output array\n                // .filter does not work since condition sits on same level as data to save\n\n                objects.includes(undefined) ? // no longer need to check undefineds due to change above, but will leave for now\n                    this.setState({\n                        ...this.state,\n                        projectList: [],\n                        projectNames: [],\n                        projectDesc: [],\n                        disableProjSelect: true // prevent proj pick due to lack of valid choice\n                    },\n                        console.log('No relevant project. ', objects, names, descriptions)\n                        // console.log('No relevant project. ', o2, n2)\n                    ) :\n                    // If relevant projects are found, add list to state and enable project selection\n                    // objects.length > 0 && names.length > 0 ?\n                    this.setState({\n                        ...this.state,\n                        projectList: objects,\n                        projectNames: names,\n                        projectDesc: descriptions,\n                        disableProjSelect: false // enables project select\n                    }\n                        , console.log('Relevant projects found. Adding to state:', objects, names, descriptions)\n                        // , console.log('Relevant projects found. Adding to state:', o2, n2)\n                    )\n\n            })\n            // .then(() => console.log('state after getAllProj, filtered :', this.state))\n            .then(this.getAllVers()) // query matching versions on proj select // works?\n            .catch(err => console.log(err));\n    }\n\n\n    //-------------------//\n    // Version functions //\n    //-------------------//\n    createVer = () => {\n        API.createVersion({\n            name: this.state.verName,\n            description: this.state.verDescription,\n            project: [this.state.projId] // project Id as ref\n        })\n            // .then(res => console.log('Version saved.', res))\n            .catch(error => console.log(error))\n    }\n\n    updateVersion = async (id, data) => { // works\n        console.log(`update version w/ ${id} and this data:`, data)\n        await API.updateVersion(id, data)\n            .then(result => {\n                console.log('updateVersion returned data: ', result.data)\n                return result\n            })\n            .catch(error => console.log(error));\n    }\n\n    getAllVers = () => {\n        API.getVersions({\n            // project: this.state.projId // seems to work but below logic is for unfiltered data\n        })\n            .then(versions => {\n                // console.log('get all vers', versions)\n                let objects = [];\n                let names = [];\n                let descriptions = [];\n\n                for (let obj of versions.data) { // iterable array, so for-in does not work\n                    if (obj.project === this.state.projId) {\n                        objects.push({ [obj._id]: obj.name }) // verId : verName\n                        names.push(obj.name); // save names separately\n                        descriptions.push(obj.description); // save descriptions separately\n                    }\n                } // .map does not work since it may create \"undefined\" holes in output array\n                // .filter does not work since condition sits on same level as data to save\n\n                // If blanks exist, this is remnant from relevant query\n                objects.includes(undefined) ?\n                    this.setState({\n                        versionList: [],\n                        versionNames: [],\n                        versionDesc: [],\n                        disableVerSelect: true // prevent select due to lack of valid choice\n                    },\n                        console.log('No relevant version. ', objects, names, descriptions)\n                    ) :\n                    // If relevant result is found, add list to state and enable selection\n                    this.setState({\n                        versionList: objects,\n                        versionNames: names,\n                        versionDesc: descriptions,\n                        disableVerSelect: false // enables select\n                    }, console.log('Relevant versions found. Adding to state:', objects, names, descriptions)\n                    )\n            })\n    }\n\n    getOneVer = () => {\n        API.findOneVersion(this.state.verId)\n            .then(ver => console.log('get one ver', ver))\n    }\n\n    //-----------------//\n    // Issue functions //\n    //-----------------//\n\n    // *** add dev fields as well? *** //\n    getAllIssues = () => {\n        API.getIssues({\n            // project: this.state.projId // may work but below logic is for unfiltered data\n        })\n            .then(issues => {\n                console.log('get all issues:', issues)\n                let reporters = []\n                    , owners = []\n                    , resolved = []\n                    , priority = []\n                    , targetResolutionDate = []\n\n                    , type = []\n                    , status = []\n                    , subject = []\n                    , description = []\n                    , potentialImpact = []\n\n                    , timing = []\n                    , url = []\n                    , imageURL = []\n                    , comments = [] // ObjectId array.\n                    , reporterNames = []\n\n                let objects = []; // ObjId-Subject pair?\n\n                let fullObjects = []; // useful?\n                // let names = [];\n                // let descriptions = [];\n                // let dates = [];\n                // let URLs = [];\n                // let imageURLs = [];\n                // let comments = []; // ObjectIds from Comment schema\n\n                for (let obj of issues.data) { // iterable array, so for-in does not work\n                    if (obj.version === this.state.verId) {\n                        console.log('pushing object to State issue arrays', obj);\n                        reporters.push(obj.reporter);\n                        owners.push(obj.owner);\n                        resolved.push(obj.resolved);\n                        priority.push(obj.priority);\n                        targetResolutionDate.push(obj.targetResolutionDate);\n\n                        type.push(obj.type);\n                        status.push(obj.status);\n                        subject.push(obj.subject);\n                        // alert(subject + ' was pushed as subject');\n                        description.push(obj.description);\n                        potentialImpact.push(obj.potentialImpact);\n\n                        timing.push(obj.timing);\n                        url.push(obj.url);\n                        imageURL.push(obj.imageURL);\n                        comments.push(obj.comments);\n                        reporterNames.push(obj.reporterName); // displayNames\n\n                        objects.push({ [obj._id]: obj.subject })\n                        console.log('issue object is now == ', objects) // key is issue ObjectId : value is issue subject\n                        fullObjects.push(obj); // full issue object\n\n                        // names.push(obj.subject); // save subjects separately\n                        // descriptions.push(obj.description); // save descriptions separately\n                        // dates.push(obj.timing); // save dates(timing) separately\n                        // URLs.push(obj.url);\n                        // imageURLs.push(obj.imageURL);\n                        // comments.push(obj.comments); // makes array of arrays\n                    }\n                } // .map does not work since it may create \"undefined\" holes in output array\n                // .filter does not work since condition sits on same level as data to save\n\n                // If blanks exist, this is remnant from relevant query\n                objects.includes(undefined) ?\n                    this.setState({\n\n                        issueReporters: [],\n                        issueOwners: [],\n                        issueResolved: [],\n                        issuePriorities: [],\n                        issueTargetRes: [],\n\n                        issueTypes: [],\n                        issueStatus: [],\n                        issueList: [], // objects (of objid-subject pairs?)\n                        issueNames: [], // subjects\n                        issueDesc: [],\n\n                        issueDates: [],\n                        issueURLs: [],\n                        issueImageURLs: [],\n                        issueCommentIds: [],\n                        issueImpacts: [],\n\n                        issueObjectList: [],\n                        issueReporterNames: [],\n\n                        disableIssueSelect: true // prevent select due to lack of valid choice\n                    },\n                        console.log('No relevant issues.'\n                            // , objects, names, descriptions, dates, URLs, comments, fullObjects\n                        )\n                    ) :\n                    // If relevant result is found, add list to state and enable selection\n                    this.setState({\n                        issueReporters: reporters,\n                        issueOwners: owners,\n                        issueResolved: resolved,\n                        issuePriorities: priority,\n                        issueTargetRes: targetResolutionDate,\n\n                        issueTypes: type,\n                        issueStatus: status,\n                        issueList: objects, // objects (of objid-subject pairs?)\n                        issueNames: subject, // subjects\n                        issueDesc: description,\n\n                        issueDates: timing,\n                        issueURLs: url,\n                        issueImageURLs: imageURL,\n                        issueCommentIds: comments,\n                        issueImpacts: potentialImpact,\n\n                        issueObjectList: fullObjects,\n                        issueReporterNames: reporterNames,\n\n                        disableIssueSelect: false // enables select\n\n                        // issueDesc: descriptions,\n                        // issueDates: dates,\n                        // issueURLs: URLs,\n                        // issueImageURLs: imageURLs,\n                        // issueCommentIds: comments,\n\n\n                    }, console.log('Relevant issues found. Adding to state.'\n                        // , objects, names, descriptions, dates, URLs, comments, fullObjects\n                    )\n                    )\n            })\n    }\n\n    updateIssue = async () => {\n        await API.updateIssue(this.state.issue, {\n            reporter: this.props.userId, // ObjectId\n            type: this.state.issueType,\n            timing: this.state.selectedDate,\n\n            organization: this.state.orgId, // ObjectId\n            project: this.state.projId, // ObjectId\n            version: this.state.verId, // ObjectId\n\n            subject: this.state.subject,\n            description: this.state.description,\n            url: this.state.url,\n\n            status: this.state.status,\n            resolved: this.state.resolved,\n            owner: this.state.owner, // ObjectId\n\n            priority: this.state.priority,\n            targetResolutionDate: this.state.targetResolutionDate,\n            potentialImpact: this.state.potentialImpact,\n\n            imageURL: this.state.imageURL,\n            partImpacted: this.state.partImpacted\n\n            // comment should be added separately.\n            // findOneAndUpdate does not remove omitted prop\n            // displayNames(reporterName) does not change.\n\n        }).then((res) => {\n            // this.setState({\n            //     ...this.state,\n            //     issueId: res.data._id})\n            console.log('updateIssue has run.', res);\n            this.createComment();\n        })\n\n    }\n\n    //-------------------//\n    // Comment functions //\n    //-------------------//\n\n    findCommenter = async (id) => {\n        await API.findUserById(id)\n            .then(res => {\n                console.log('findCommenter returned :', res.data)\n                return res.data.displayName\n                // let tempCommenters = this.state.commentAuthors;\n                // tempCommenters.push(res.data.displayName);\n                // res.data // If user data was returned, add to state.\n                //     ? this.setState({\n                //         ...this.state,\n                //         commentAuthors: tempCommenters // Note that filter will be needed if later auto-generating Organization User Account for Orgs.\n                //     })\n                //     : console.log('Id not found in DB!', res.data)\n            })\n            .catch((err) => console.log(err)\n                // this.setState({\n                //     message: \"No results. Please try another query.\"\n                // })\n            );\n    }\n\n    getAllComments = async () => {\n        await API.getComments({\n            // project: this.state.projId // may work but below logic is for unfiltered data\n        })\n            .then(comments => {\n                console.log('get all comments:', comments)\n\n                let orgIds = [], projIds = [], verIds = [], // issueIds is above\n                    issueIds = [], // ObjectIds from Comment schema\n                    commenterIds = [], // ObjectIds from User\n\n                    actions = [], // contains arrays of string\n                    commentTexts = [], // string\n                    visibilities = [], // string\n                    photoURLs = [], // string\n                    timestamps = [], // obj\n\n                    fullObjects = [],\n                    commenterNames = [],\n                    objects = []; // key-val pairs\n\n                // let prettyDate = {};\n\n                (async () => {\n                    for (let obj of comments.data) { // iterable array, so for-in does not work\n                        if (obj.issue === this.state.issue) { // match issue Id\n                            orgIds.push(obj.organization);\n                            projIds.push(obj.project);\n                            verIds.push(obj.version);\n                            issueIds.push(obj.issue);\n                            await commenterIds.push(obj.commenter); // allows \"undefined\" from anonymous issue submit\n\n                            actions.push(obj.actionDescription);\n                            commentTexts.push(obj.comment);\n                            visibilities.push(obj.visibility);\n                            photoURLs.push(obj.avatar);\n\n                            // let tempTime = Date.parse(obj.timestamps.created_at); // convert to ms\n                            // console.log(typeof tempTime, tempTime)\n                            // prettyDate = new Date(tempTime); // convert to Date obj\n                            // console.log('pretty date :', prettyDate);\n                            // timestamps.push(prettyDate);\n                            timestamps.push(obj.timestamps);\n\n                            fullObjects.push(obj); // full issue object\n                            // commenterNames.push()\n\n                            objects.push({ [obj._id]: obj.subject }) // key is comment ObjectId : value is comment subject\n                            // Just for undefined checker\n                            commenterNames.push(obj.commenterName);\n\n\n                        }\n                    } // .map does not work since it may create \"undefined\" holes in output array\n                    // .filter does not work since condition sits on same level as data to save\n\n                    console.log('commenterIds after:', commenterIds);\n\n                    // for (let id of commenterIds) {\n                    //     let val = this.findCommenter(id);\n                    //     await commenterNames.push(val);\n                    // }\n\n                    console.log('commenterNames was filled!', commenterNames)\n                    // commenterNames = await commenterIds.map(function (commenterId) {\n                    //     this.findCommenter(commenterId)\n                    // })\n\n                    fullObjects.reverse(); // latest first. changes original array\n\n                    // let tempAuthors = this.state.commentAuthors;\n                    // tempAuthors.push(res.data.displayName);\n                    // this.setState({\n                    //     ...this.state,\n                    //     commentAuthors: tempAuthors\n                    // })\n\n                    // Blank ObjectId shouldn't exist, but if found, this is remnant from earlier test query.\n                    objects.includes(undefined) ?\n                        await this.setState({\n                            commentOrgIds: [],\n                            commentprojIds: [],\n                            commentverIds: [],\n                            commentIssueIds: [],\n                            commentCommenterIds: [],\n\n                            commentActionsDescriptions: [],\n                            commentTexts: [],\n                            commentVisibilities: [],\n                            commentPhotoURLs: [],\n                            commentTimestamps: [],\n\n                            commentAuthors: [],\n                            commentfullObjects: []\n                        },\n                            console.log('No relevant comments.', fullObjects)\n                        ) :\n                        // If relevant result is found, add list to state and enable selection\n                        await this.setState({\n                            commentOrgIds: orgIds,\n                            commentProjIds: projIds,\n                            commentVerIds: verIds,\n                            commentIssueIds: issueIds,\n                            commentCommenterIds: commenterIds,\n\n                            commentActionsDescriptions: actions,\n                            commentTexts: commentTexts,\n                            commentVisibilities: visibilities,\n                            commentPhotoURLs: photoURLs,\n                            commentTimestamps: timestamps,\n\n                            commentAuthors: commenterNames,\n                            commentFullObjects: fullObjects // the only one that matters\n                        },\n                            () => {\n                                this.state.commentFullObjects.length > 0\n                                    ? console.log('Relevant comments found and added to state:', fullObjects)\n                                    : console.log('No comments found.')\n                            }\n                        )\n                })()\n\n            })\n    }  // End of getAllComments function\n\n    createComment = async () => { // works\n\n        await API.createComment({\n            organization: this.state.orgId, // ObjectId\n            project: this.state.projId, // ObjectId\n            version: this.state.verId, // ObjectId\n            issue: this.state.issue, // ObjectId\n            commenter: this.props.userId, // ObjectId\n\n            actionDescription: ['Commented'], // EXPAND ON THIS W PRE STATE //\n            comment: this.state.comment,\n            visibility: 'Organization members and reporter',\n            avatar: this.props.photoURL,\n\n            timestamps: { updated_at: this.state.selectedDate },\n            commenterName: this.props.userName,\n\n            organizationName: this.state.orgName,\n            projectName: this.state.projName,\n            versionName: this.state.verName,\n            issueSubject: this.state.subject\n\n            // ADD ISSUE ID TO REFS IN USER AND ISSUE?\n\n        })\n            .then((res) => {\n                console.log('createComment has run.', res);\n                this.getAllComments();\n                // Query relevant comments & display.\n                // await API.getComments()\n                // this.clearState(); \n            })\n\n        // for (let id of this.state.commentCommenterIds) {\n        //     await this.findCommenter(id);\n        // }\n        // console.log('renderComments collected commenter names:', this.state.commentAuthors);\n\n\n        // let x = await this.state.commentFullObjects.map(function (commentObj, index) {\n        // this.findCommenter(commentObj.commenter)\n    }\n    // this.props.showDashboard // forward to main view\n\n    // // 12/9/19 No use case at this time\n    // updateComment = async (id, data) => {\n    //     console.log(`update proj w/ ${id} and this data:`, data)\n    //     await API.updateComment(id, data)\n    //         .then(result => {\n    //             console.log('updateComment returned data: ', result.data)\n    //             return result\n    //         })\n    //         .catch(error => console.log('error occurred!', error));\n    // }\n\n    // renderComments = async () => {\n    //     // for (let i of this.state.commentFullObjects) {\n    //     //     console.log('RENDERING:', i)\n    //     //     return <CommentCard\n    //     //         displayName={this.findCommenter(i.commenter)}\n    //     //         photoURL={i.avatar}\n    //     //         createdAt={i.timestamps.created_at}\n    //     //         actionDesc={i[0]} // for now, just 1st action //\n    //     //         comment={i.comment}\n    //     //     />\n    //     // }\n\n    //     this.state.commentFullObjects.map(function (commentObj, index) {\n    //         console.log('RENDERING:', commentObj)\n    //         return <CommentCard\n    //             key={index}\n    //             displayName=\"test name\"\n    //             // {this.state.commentCommenterIds[0]} // need names, not id\n    //             photoURL={commentObj.avatar}\n    //             createdAt={commentObj.timestamps.created_at}\n    //             actionDesc={commentObj.actionDescription[0]} // for now, just 1st action //\n    //             comment={commentObj.comment}\n    //         />\n    //     })\n    // }\n\n    //--------------------//\n    //  Lifecyle Methods  //\n    //--------------------//\n    componentDidMount() {\n        this.setState({\n            ...this.state,\n            userId: this.props.userId,\n            developerMode: false, // If true, allow updates to restricted fields\n        },\n            () => {\n                console.log('component did mount :', this.state);\n                this.getAllOrgs() // adds to state the list of org objects and array of org names\n            })\n    }\n\n    componentDidUpdate() {\n        console.log('component did update :', this.state);\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <Paper className={classes.topContainer}>\n                <form className={classes.containerOne} noValidate autoComplete=\"off\" >\n                    <div className={classes.grouping}>\n                        <Typography variant='body2' className={classes.textField}>Asterisk(*) denotes required fields.</Typography>\n                    </div>\n                    <Divider className={classes.divider} />\n\n                    {/* Organization */}\n                    <div className={classes.grouping}>\n                        <FormControl variant=\"outlined\" className={classes.formControl}>\n                            <InputLabel\n                                // ref={inputLabel} \n                                id=\"simple-select-outlined-label-org\"\n                                required>\n                                Provider\n                            </InputLabel>\n                            <Select\n                                labelId=\"simple-select-outlined-label-org-ManageIssue\"\n                                id={\"simple-select-outlined-ManageIssue\"}\n                                key={'simple-select-outlined-ManageIssue'}\n                                placeholder='Provider Name'\n                                value={\n                                    this.state.orgId !== '' ? this.state.orgId : '' // does not change display\n                                    // collin tried: this.state.orgId\n                                }\n                                onChange={this.handleOrgSelect\n                                    // this.handleFieldChange // not reading correctly\n                                }\n                            >\n                                {\n                                    this.state.organizationNames ?\n                                        this.state.organizationNames.map((org, ind) => {\n                                            // console.log(Object.keys(this.state.organizationList[ind])[0])\n                                            // console.log(org)\n                                            // <option key={org.key} value={org.key}>{org.value}</option>\n                                            return < MenuItem\n                                                id={Object.keys(this.state.organizationList[ind])[0]}\n                                                // id={org} // collin tried\n                                                key={org}\n                                                name={org}\n                                                value={org} >\n                                                {/* error: you have provided an out-of-range value `undefined` for the select component. */}\n                                                {org}\n                                            </MenuItem>\n                                        })\n                                        : () => console.log('state during MenuItem render', this.state)\n                                    // None should not be an option. Create org first if missing.\n                                }\n                            </Select>\n                        </FormControl>\n                        <TextField\n                            id=\"orgId\"\n                            // REMEMBER, LIST IS FOR NAME BUT SAVES ID\n                            disabled\n                            // fullWidth\n                            className={classes.textField}\n                            label=\"Provider ID\"\n                            value={this.state.orgId}\n                            style={{ margin: 8 }}\n                            margin=\"normal\"\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            variant=\"filled\"\n                            onChange={this.handleFieldChange.bind(this)}\n                        />\n                    </div>\n\n\n                    {/* Project */}\n                    <div className={classes.grouping}>\n                        <FormControl variant=\"outlined\"\n                            className={classes.formControl}\n                        // {this.state.projectList ? null : disabled}\n                        >\n                            <InputLabel\n                                // ref={inputLabel} \n                                id=\"simple-select-outlined-label-proj-ManageIssue\"\n                                required>\n                                Project/Product\n                        </InputLabel>\n                            <Select\n                                labelId=\"simple-select-outlined-label-proj-ManageIssue\"\n                                // id={this.state.orgId || \"simple-select-outlined\"}\n                                id={\"simple-select-outlined-proj-ManageIssue\"}\n                                key={'simple-select-outlined-proj-ManageIssue'}\n                                placeholder='Project Name'\n                                // value={this.state.orgName}\n                                onChange={\n                                    // onOpen={ // doesn't work but unsure if due to choice\n                                    // this.handleFieldChange // not reading correctly?\n                                    // this.setState({ event.target.value })\n                                    this.handleProjSelect\n                                }\n                            // labelWidth={'500px'}\n                            >\n                                {\n                                    this.state.projectNames ?\n                                        this.state.projectNames.map((proj, i) => {\n                                            // this.state.projectList ? // unexpected\n                                            // Object.keys(this.state.projectList[i])[0]: \n                                            return <MenuItem\n                                                id={proj}\n                                                key={`MI-proj-select-${i}`}\n                                                name={proj}\n                                                value={proj}\n                                                disabled={\n                                                    this.state.disableProjSelect ? true : false\n                                                    // this.state.orgId !== '' ? 'false' : 'true'\n                                                }\n                                            >\n                                                {proj}\n                                                {/* {console.log('proj list at render:', this.state.projectList[i])} */}\n                                            </MenuItem>\n                                        }) : <br />\n                                    // 'None' should not be an option. Create org first if missing.\n                                }\n                            </Select>\n                            {/* {console.log('Disable project selection at render is:', this.state.disableProjSelect)} */}\n                        </FormControl>\n                        <TextField\n                            id=\"projId\"\n                            // REMEMBER, LIST IS FOR NAME BUT SAVES ID\n                            disabled\n                            // fullWidth\n                            label=\"Project ID\"\n                            className={classes.textField}\n                            value={this.state.projId}\n                            style={{ margin: 8 }}\n                            margin=\"normal\"\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            variant=\"filled\"\n                            onChange={this.handleFieldChange.bind(this)}\n                        />\n                    </div>\n\n                    {/* Version */}\n                    <div className={classes.grouping}>\n                        <FormControl variant=\"outlined\" className={classes.formControl}\n\n                        >\n                            <InputLabel id=\"simple-select-outlined-label-ver\" required>\n                                Version/Specification\n                        </InputLabel>\n                            <Select\n                                labelId=\"simple-select-outlined-label-ver\"\n                                id={\"simple-select-outlined-ver\"}\n                                placeholder='Version / Specification'\n                                // value={this.state.verName}\n                                onChange={\n                                    this.handleVerSelect\n                                }\n                            >\n                                {\n                                    this.state.versionNames ?\n                                        this.state.versionNames.map((ver, i) => {\n                                            return <MenuItem\n                                                id={ver}\n                                                key={Math.random()}\n                                                name={ver}\n                                                value={ver}\n                                                disabled={\n                                                    this.state.disableVerSelect ? true : false\n                                                }\n                                            >\n                                                {ver}\n                                                {/* {console.log('ver list at render:', this.state.versionList[i])} */}\n                                            </MenuItem>\n                                        }) : <br />\n                                    // 'None' should not be an option. Create org first if missing.\n                                }\n                            </Select>\n                            {/* {console.log('Disable version selection at render is:', this.state.disableVerSelect)} */}\n                        </FormControl>\n                        <TextField\n                            id=\"verId\"\n                            disabled\n                            className={classes.textField}\n                            label=\"Version ID\"\n                            value={this.state.verId}\n                            style={{ margin: 8 }}\n                            margin=\"normal\"\n                            InputLabelProps={{ shrink: true, }}\n                            onChange={this.handleFieldChange.bind(this)}\n                            variant=\"filled\"\n                        />\n                    </div>\n                    <Divider className={classes.divider} />\n\n                    {/* Issue */}\n                    <div className={classes.grouping}>\n                        <FormControl variant=\"outlined\" className={classes.formControl}>\n                            <InputLabel id=\"simple-select-outlined-label-issue\" required>\n                                Issue\n                            </InputLabel>\n                            <Select\n                                labelId=\"simple-select-outlined-label-issue\"\n                                id={\"simple-select-outlined-issue\"}\n                                placeholder='Issue'\n                                onChange={\n                                    this.handleIssueSelect\n                                }\n                            // labelWidth={'500px'}\n                            >\n                                {\n                                    this.state.issueNames ?\n                                        this.state.issueNames.map((iss, i) => {\n                                            return <MenuItem\n                                                id={iss}\n                                                key={Math.random()}\n                                                name={iss}\n                                                value={iss}\n                                                disabled={\n                                                    this.state.disableIssueSelect ? true : false\n                                                }\n                                            >\n                                                {iss}\n                                                {/* {console.log('issue list at render:', this.state.issueList[i])} */}\n                                            </MenuItem>\n                                        }) : <br />\n                                    // 'None' should not be an option. Create org first if missing.\n                                }\n                            </Select>\n                            {/* {console.log('Disable issue selection at render is:', this.state.disableIssueSelect)} */}\n                        </FormControl>\n                        <TextField\n                            id=\"issue\"\n                            disabled\n                            label=\"Issue ID\"\n                            className={classes.textField}\n                            value={this.state.issue}\n                            style={{ margin: 8 }}\n                            margin=\"normal\"\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            variant=\"filled\"\n                        />\n                    </div>\n                    <div className={classes.grouping}>\n                        <TextField\n                            id=\"subject\"\n                            // Enable update for developer+\n                            required\n                            disabled={this.props.userType === 'Reporter' ? true : false}\n                            fullWidth\n                            multiline\n                            label=\"Issue Subject\"\n                            value={this.state.subject}\n                            // className={classes.textField}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            onChange={this.handleFieldChange.bind(this)}\n                            style={{ margin: 8 }}\n                        />\n                        <TextField\n                            id=\"description\"\n                            required\n                            multiline\n                            fullWidth\n                            rows=\"4\"\n                            key=\"outlined-multiline-static\"\n                            label=\"Issue Description\"\n                            value={this.state.description}\n                            style={{ margin: 8 }}\n                            margin=\"normal\"\n                            onChange={this.handleFieldChange.bind(this)}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            variant=\"outlined\"\n                        />\n                        <TextField\n                            id=\"type\"\n                            disabled\n                            label=\"Issue Type\"\n                            defaultValue={this.state.type}\n                            className={classes.wideTextField}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            onChange={this.handleFieldChange.bind(this)}\n                        />\n                        <TextField\n                            id=\"timing\"\n                            disabled\n                            label=\"Timing\"\n                            value={this.state.selectedDate}\n                            className={classes.textField}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            onChange={this.handleFieldChange.bind(this)}\n                        />\n                        {/* <Typography>Timing:  {this.state.selectedDate}</Typography> */}\n                        {/* <DateTimePicker\n                        selectedDate=\n                        {this.state.selectedDate}\n                        // {this.state.timing} // naming seems to interfere. debug\n                        handleDateChange={this.handleDateChange}\n                    /> */}\n\n                        <FormControl variant=\"outlined\" className={classes.formControl}>\n                            <InputLabel id=\"simple-select-outlined-label-issue-status\">\n                                Status\n                            </InputLabel>\n                            <Select\n                                labelId=\"simple-select-outlined-label-issue-status\"\n                                id={\"simple-select-outlined-issue-status\"}\n                                placeholder='e.g. Resolved'\n                                onChange={this.handleStatusSelect}\n                                value={this.state.status}\n                            >\n                                {\n                                    this.state.issueStatusChoices ?\n                                        this.state.issueStatusChoices.map((status, i) => {\n                                            return <MenuItem\n                                                id={status}\n                                                key={Math.random()}\n                                                name={status}\n                                                value={status}\n                                                disabled={this.state.disableIssueSelect ? true : false}\n                                            >\n                                                {status}\n                                            </MenuItem>\n                                        }) : <br />\n                                    // 'None' should not be an option. Default is \"Open\".\n                                }\n                            </Select>\n                        </FormControl>\n\n                        <TextField\n                            id=\"url\"\n                            // fullWidth\n                            label=\"URL\"\n                            // placeholder=\"Any thoughts?\"\n                            value={this.state.url}\n                            className={classes.textField}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            onChange={this.handleFieldChange.bind(this)}\n                            style={{ margin: 8 }}\n                        />\n\n                        <TextField\n                            id=\"comment\"\n                            fullWidth\n                            multiline\n                            label=\"Comment\"\n                            placeholder=\"Any thoughts?\"\n                            value={this.state.comment}\n                            // className={classes.textField}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            onChange={this.handleFieldChange.bind(this)}\n                            style={{ margin: 8 }}\n                        />\n                        <div className='button-group'>\n                            <Button\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                className={classes.button}\n                                endIcon={<RotateLeftIcon>Reset Form</RotateLeftIcon>}\n                                onClick={\n                                    () => {\n                                        console.log('clicked reset while state is', this.state)\n                                        this.clearState()\n                                    }\n                                }\n                            > Reset Form\n                    </Button>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                className={classes.button}\n                                endIcon={<Icon>send</Icon>}\n                                onClick={\n                                    this.updateIssue\n                                    //     this.state.issue.length > 0\n                                    //     ? async () => {\n                                    //         await this.updateIssue();\n                                    //         await this.createComment();\n                                    //     }\n                                    //     : this.createComment()\n                                }\n                            > Submit\n                                    </Button>\n                        </div>\n                        {/* end of button-group */}\n                    </div>\n\n                    {/* End of containerOne */}\n                </form>\n\n                <div width='1vw'>\n                    <Divider orientation=\"vertical\" />\n                </div>\n\n                <div className={classes.containerTwo}>\n                    {this.state.commentAuthors.length > 0\n                        ? this.state.commentFullObjects.map(function (commentObj, index) {\n                            // console.log('RENDERING:', commentObj)\n                            return <CommentCard\n                                key={index}\n                                displayName={commentObj.commenterName\n                                    // this.state.commentAuthors.reverse()[index]\n                                }\n                                photoURL={commentObj.avatar}\n                                createdAt={commentObj.timestamps.created_at}\n                                actionDesc={commentObj.actionDescription[0]} // for now, just 1st action //\n                                comment={commentObj.comment}\n                            />\n                        })\n\n                        // ()=>this.renderComments()\n                        : <Typography>(No Comments to Display.)</Typography>\n                    }\n\n                </div>\n            </Paper>\n        )\n\n    }\n}\n\n// export default withRouter(SubmitIssue)\nexport default withRouter(withStyles(styles, { withTheme: true })(ManageIssue))\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Paper from '@material-ui/core/Paper';\nimport Fab from '@material-ui/core/Fab';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport Avatar from '@material-ui/core/Avatar';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport AddIcon from '@material-ui/icons/Add';\nimport SearchIcon from '@material-ui/icons/Search';\nimport MoreIcon from '@material-ui/icons/MoreVert';\n\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Menu from \"@material-ui/core/Menu\";\n\nconst messages = [\n  {\n    id: 1,\n    primary: 'Brunch this week?',\n    secondary: \"I'll be in the neighbourhood this week. Let's grab a bite to eat\",\n    person: '/static/images/avatar/5.jpg',\n  },\n  {\n    id: 2,\n    primary: 'Birthday Gift',\n    secondary: `Do you have a suggestion for a good present for John on his work\n      anniversary. I am really confused & would love your thoughts on it.`,\n    person: '/static/images/avatar/1.jpg',\n  },\n  {\n    id: 3,\n    primary: 'Recipe to try',\n    secondary: 'I am try out this new BBQ recipe, I think this might be amazing',\n    person: '/static/images/avatar/2.jpg',\n  },\n  {\n    id: 4,\n    primary: 'Yes!',\n    secondary: 'I have the tickets to the ReactConf for this year.',\n    person: '/static/images/avatar/3.jpg',\n  },\n  {\n    id: 5,\n    primary: \"Doctor's Appointment\",\n    secondary: 'My appointment for the doctor was rescheduled for next Saturday.',\n    person: '/static/images/avatar/4.jpg',\n  },\n  {\n    id: 6,\n    primary: 'Discussion',\n    secondary: `Menus that are generated by the bottom app bar (such as a bottom\n      navigation drawer or overflow menu) open as bottom sheets at a higher elevation\n      than the bar.`,\n    person: '/static/images/avatar/5.jpg',\n  },\n  {\n    id: 7,\n    primary: 'Summer BBQ',\n    secondary: `Who wants to have a cookout this weekend? I just got some furniture\n      for my backyard and would love to fire up the grill.`,\n    person: '/static/images/avatar/1.jpg',\n  },\n];\n\nconst useStyles = makeStyles(theme => ({\n  text: {\n    padding: theme.spacing(2, 2, 0),\n  },\n  paper: {\n    paddingBottom: 50,\n  },\n  list: {\n    marginBottom: theme.spacing(2),\n  },\n  subheader: {\n    backgroundColor: theme.palette.background.paper,\n  },\n  appBar: {\n    top: 'auto',\n    bottom: 0,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  fabButton: {\n    position: 'absolute',\n    zIndex: 1,\n    top: -30,\n    left: 0,\n    right: 0,\n    margin: '0 auto',\n  },\n}));\n\nexport default function BottomAppBar() {\n  const classes = useStyles();\n\n  // from other one\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n  function handleMenu(event) {\n    setAnchorEl(event.currentTarget);\n  }\n  function handleClose() {\n    setAnchorEl(null);\n  }\n\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Paper square className={classes.paper}>\n        <Typography className={classes.text} variant=\"h5\" gutterBottom>\n          Inbox\n        </Typography>\n        <List className={classes.list}>\n          {messages.map(({ id, primary, secondary, person }) => (\n            <React.Fragment key={id}>\n              {id === 1 && <ListSubheader className={classes.subheader}>Today</ListSubheader>}\n              {id === 3 && <ListSubheader className={classes.subheader}>Yesterday</ListSubheader>}\n              <ListItem button>\n                <ListItemAvatar>\n                  <Avatar alt=\"Profile Picture\" src={person} />\n                </ListItemAvatar>\n                <ListItemText primary={primary} secondary={secondary} />\n              </ListItem>\n            </React.Fragment>\n          ))}\n        </List>\n      </Paper>\n      <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"open drawer\">\n            <MenuIcon />\n          </IconButton>\n\n          <Menu\n            id=\"menu-appbar\"\n            anchorEl={anchorEl}\n            anchorOrigin={{\n              vertical: \"top\",\n              horizontal: \"right\"\n            }}\n            keepMounted\n            transformOrigin={{\n              vertical: \"top\",\n              horizontal: \"right\"\n            }}\n            open={open}\n            onClose={handleClose}\n          >\n            <MenuItem\n              onClick={() => {\n                window.location = \"/Carrier/Home\";\n              }}\n            >\n              <Typography className={classes.link}>Balance</Typography>\n            </MenuItem>\n            <MenuItem\n              onClick={() => {\n                window.location = \"/Document/Send\";\n              }}\n            >\n              <Typography className={classes.link}>Send Document</Typography>\n            </MenuItem>\n            <MenuItem\n              onClick={() => {\n                window.location = \"/Carrier/AddTravel\";\n              }}\n            >\n              <Typography className={classes.link}>New Travel</Typography>\n            </MenuItem>\n            <MenuItem\n              onClick={() => {\n                window.location = \"/Carrier/Balance\";\n              }}\n            >\n              <Typography className={classes.link}>Balance</Typography>\n            </MenuItem>\n          </Menu>\n\n          <Fab color=\"secondary\" aria-label=\"add\" className={classes.fabButton}>\n            <AddIcon />\n          </Fab>\n          <div className={classes.grow} />\n          <IconButton color=\"inherit\">\n            <SearchIcon />\n          </IconButton>\n          <IconButton edge=\"end\" color=\"inherit\">\n            <MoreIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n    </React.Fragment>\n  );\n}\n","import React, { Component } from 'react';\nimport {\n    // BrowserRouter as Router, Switch, Route,\n    // Redirect\n    // , useHistory, useLocation, withRouter, Link\n} from \"react-router-dom\";\n\n// Material UI\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\n// import { SnackbarProvider, useSnackbar } from 'notistack'; // later for feedback msg\n\n// Pages\nimport Sidebar from '../../components/Sidebar';\nimport Dashboard from '../Dashboard';\nimport SubmitIssue from '../SubmitIssue';\nimport UserProfile from '../UserProfile';\nimport OrganizationProfile from '../OrganizationProfile';\nimport ProjectProfile from '../ProjectProfile';\nimport ManageIssue from '../ManageIssue';\n\nimport BottomAppBar from '../../components/BottomAppBar';\n\n\n// Auth\nimport firebase from \"firebase\";\n\nimport API from '../../utils/API'\n// import isSignedIn from '../../utils/isSignedIn';\n\n\nconst styles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n}))\n\nclass DeveloperView extends Component {\n\n    constructor(props) {\n        super(props);\n        // State updater function to be passed down into the context provider per https://reactjs.org/docs/context.html\n        this.toggleTheme = () => {\n            this.setState(state => ({\n                // \n            }));\n        }\n\n        // this.routeChange = this.routeChange.bind(this); // if you have a func outside of state, you can make it part of state by doing this\n\n        // Set default auth state of false\n        this.state = {\n            activeView: 'Dashboard',\n            isSignedIn: false,\n\n            // user info\n            id: \"\",\n            email: \"\",\n            name: \"\", // Separate first and last name later\n            userType: 'Developer', // default should be Reporter\n            // Case Sensitive\n\n            // photoURL: '',\n\n            // issue: {} or []?\n            // required\n\n            type: 'Technical', // issue type, not user\n            organization: '',\n            project: '',\n            subject: '',\n            description: '',\n            comment: [],\n            owner: '',\n\n            // optional in this version\n            url: '',\n            status: '',\n            resolved: '',\n            priority: '',\n            targetResolutionDate: '',\n            potentialImpact: '',\n            image: '',\n            partImpacted: '',\n\n            // for dashboard\n            //affiliatedOrgCount: 0,\n            affiliatedOrgIds: [],\n            affiliatedProjIds: [],\n            relatedIssueIds: [],\n\n            affiliatedOrgNames: [],\n            affiliatedProjNames: [],\n            relatedIssueNames: [],\n\n            affiliatedProjCounts: [], // for charting\n\n            relatedCommentObjects: []\n        }\n\n        // This allows the functions to be passed via props.\n        this.getUser = this.getUser.bind(this);\n        this.determineView = this.determineView.bind(this);\n        this.showSubmitIssue = this.showSubmitIssue.bind(this);\n        this.showDashboard = this.showDashboard.bind(this);\n        this.handleSubmitIssue = this.handleSubmitIssue.bind(this);\n    };\n\n    //-----------//\n    // Functions //\n    //-----------//\n\n    // test only\n    changeName = () => {\n        this.setState({ name: 'Super Dan' })\n        alert('name changed!')\n    }\n\n    getUser = () => {\n        API.findOneUser(\n            this.props.email || this.state.email\n        )\n            .then(res => {\n                console.log('getUser returned :', res.data)\n                res.data // If user data was returned, add to state.\n                    ? this.setState({\n                        ...this.state,\n                        id: res.data[0]._id // Note that filter will be needed if later auto-generating Organization User Account for Orgs.\n                    },\n                        this.getUserOrgs() // use the id to get affiliated orgs\n                    )\n                    : console.log('Email not found in DB!', res.data)\n            })\n            .catch(() =>\n                this.setState({\n                    message: \"No results. Please try another query.\"\n                })\n            );\n    }\n\n    showDashboard = () => {\n        this.setState({ activeView: 'Dashboard' }\n            , this.authenticate())\n    }\n\n    showSubmitIssue = () => {\n        this.setState({ activeView: 'Submit Issue' })\n    }\n\n    showUserProfile = () => {\n        this.setState({ activeView: 'User Profile' })\n    }\n\n    showOrganizationProfile = () => {\n        this.setState({ activeView: 'Organization Profile' })\n    }\n\n    showProjectProfile = () => {\n        this.setState({ activeView: 'Project Profile' })\n    }\n\n    showManageIssue = () => {\n        this.setState({ activeView: 'Manage Issue' })\n    }\n\n    handldIssueChange = (event) => {\n        this.setState({ value: event.target.value });\n    }\n\n    handleSubmitIssue = (key, val) => {\n        /*\n        let issue = {};\n        tempIssue = { ...this.state.issue }; // copy issue to prevent direct state update\n        console.log('copied state issue:', tempIssue)\n        if (this.state.issue.length) {\n            let keys = Object.keys(this.state.issue) // get array of keys in object\n            console.log(\"this issue's keys are \", keys) // array of strings            \n\n            // for (let ea in this.state.issue) { // iterate over key-value pairs in object and give value\n            // console.log('ea: ', ea) // object of key-val pairs\n            // this.handleUserSave(ea); // SAVE FULL OBJECT TO DB\n\n            for (let key in keys) { // iterate over key-value pairs in object and give value\n                // 'key' comes out ot be index num\n                console.log('For key ' + keys[key] + ', value is ', this.state.issue[keys[key]])\n                // console.log('ea[key]: ', ea[key])\n            }\n        }\n        */\n        // const keys = [\n        //     \"type\",\n        //     \"organization\",\n        //     \"project\",\n        //     \"subject\",\n        //     \"description\",\n        //     \"comment\",\n        //     \"owner\",\n\n        //     // optional in this version\n        //     \"url\",\n        //     \"status\",\n        //     \"resolved\",\n        //     \"priority\",\n        //     \"targetResolutionDate\",\n        //     \"potentialImpact\",\n        //     \"image\",\n        //     \"partImpacted\"\n        // ]\n\n        this.setState({ [key]: val })\n        //Object.keys(this.state) // may not secure sequence\n\n        // this.setState({ arr }) // update state of \"issue\" with new variable \"issue\"\n        // this.setState({ comment: [1, 2, \"3\"] }) // works\n        // this.setState({ [key]: value })\n        // this.setState({testArr: arr})\n\n    }\n\n    // can write promise this way\n    // function signupUser() {\n    //     return new Promise(resolve => {\n    //       setTimeout(resolve, 1000);\n    //     });\n    //   }\n    //   const handleSubmit = e => {\n    //     e.preventDefault();\n    //     signupUser().then(clearState);\n    //   };\n\n    determineView = (text) => {\n        // console.log(`\\n dev view got back `, text)\n        // this.setState({ received: text })\n        // if (this.props.activeView) {\n        //     // console.log('\\n DeveloperView sees this.props.activeView :', this.props.activeView);\n        // }\n        // let nextView;\n\n        // switch (this.props.activeView) {\n        //     case '/submitissue':\n        //         nextView = <SubmitIssue />\n        //         console.log(' nextView is: ', nextView);\n        //         this.setState({ activeView: 'Submit Issue' })\n        //         break;\n        //     default:\n        //         console.log('hitting default');\n        //         this.setState({ activeView: 'Dashboard' })\n        //         nextView = <Dashboard />\n        // }\n        // return nextView;\n    }\n\n    // Call this to run API method saveUser\n    handleUserSave = (user) => {\n        API.createUser({\n            // \"email\": user[Object.keys(user)[0]],\n            // \"firstName\": user[Object.keys(user)[1]],\n            // \"lastName\": user[Object.keys(user)[2]],\n            // \"photoURL\": user[Object.keys(user)[3]],\n            // \"submittedIssues\": user[Object.keys(user)[4]],\n            // \"userType\": user[Object.keys(user)[5]],\n            // \"affiliatedOrganization\": user[Object.keys(user)[6]],\n            // \"affiliatedProject\": user[Object.keys(user)[7]]\n        })\n        // .then(() => this.getBooks());\n\n        // WILL NEED QUALIFIER LATER\n        // const user = this.state.users.find(user => user.email === email);\n\n        // console.log(user[Object.keys(user)[0]]);\n        //     console.log(user[Object.keys(user)[1]]);\n        //     console.log(user[Object.keys(user)[2]]);\n        //     console.log(user[Object.keys(user)[3]]);\n        //     console.log(user[Object.keys(user)[4]]);\n        //     console.log(user[Object.keys(user)[5]]);\n        //     console.log(user[Object.keys(user)[6]]);\n        //     console.log(user[Object.keys(user)[7]])\n\n    };\n\n    checkNewUser = (authEmail) => {\n        API.findOneUser(\n            // If an email was passed, use it. If not use state.\n            authEmail || this.state.email\n        )\n            .then(res =>\n                // If user is found, save id to state. \n                // If not, send user to user profile for user creation.\n                // console.log('checking new user status.', res)\n                res !== ''\n                    ? this.setState({ 'id': res.data[0]['_id'] }, console.log('user found:', res.data))\n                    // console.log('User found :', res.data[0]['_id']) // works\n                    : () => {\n                        console.log('User NOT found', res.data) // works\n                        this.showUserProfile();\n                    }\n            )\n            .catch(() =>\n                this.setState({\n                    message: \"No results. Please try another query.\"\n                })\n            );\n    }\n\n    authenticate = () => {\n        firebase.auth().onAuthStateChanged(user => {\n            // console.log('\\n DeveloperView sees user :', user.displayName, user.email, user.photoURL, user.emailVerified, user.uid)\n\n            // Save signin data to state\n            this.setState({\n                isSignedIn: !!user, // Coerce the value to be a boolean regardless of original type\n                name: user.displayName,\n                email: user.email,\n                photoURL: user.photoURL,\n                emailVerified: user.emailVerified,\n                idToken: user.getIdToken()\n            },\n                () => {\n                    console.log('Authentication complete. Calling getUser...')\n                    this.getUser()\n                }\n            )\n        });\n    }\n    //--------------------------//\n    // End of handler functions //\n    //--------------------------//\n\n    //------------------------//\n    // Organization functions //\n    //------------------------//\n    getUserOrgs = () => {\n        API.getOrgs() // works if {} is omitted\n            .then(orgs => { // hits w no params for query\n                // console.log('API getOrgs returned: ', orgs.data);\n                let userOrgList = [], userOrgNames = [];\n                for (let org of orgs.data) {\n                    // console.log('each:', org);\n\n                    if (org.member.includes(this.state.id)) {\n                        userOrgList.push(org._id);\n                        userOrgNames.push(org.name)\n                        // debugger;\n                    }\n                }\n                this.setState({\n                    ...this.state,\n                    affiliatedOrgIds: userOrgList.reverse(),\n                    affiliatedOrgNames: userOrgNames.reverse()\n                }\n                    , () => this.getAllProj()\n                )\n            })\n        // .then(() => console.log('state after getAllOrg:', this.state))\n    }\n\n    //-------------------//\n    // Project functions //\n    //-------------------//\n    getAllProj = () => { // works w/o params\n        API.getProjects(\n            { // organization: this.state.orgId // non func\n            })\n            .then(projects => {\n                // console.log('get all proj', projects);\n\n                let objects = [], names = [], descriptions = [], affiliatedProjIds = [], affiliatedProjNames = [], affiliatedProjCounts = [];\n\n                console.log('proj query:', projects.data)\n                for (let obj of projects.data) { // iterable array, so for-in does not work\n\n                    for (let orgId of this.state.affiliatedOrgIds) {\n                        // orgIds.includes(orgId) \n                        // console.log('obj shows:', obj.organization)\n                        if (orgId === obj.organization) {\n                            affiliatedProjIds.push(obj._id);\n                            affiliatedProjNames.push(obj.name);\n\n\n                        }\n                    }\n\n                    // if (obj.organization === this.state.orgId) {\n                    //     objects.push({ [obj._id]: obj.name }) // projId : projName\n                    //     names.push(obj.name); // save names separately // works\n                    //     descriptions.push(obj.description); // save descriptions separately\n\n                    //     // orgIds.push(obj.organization);\n                    // }\n                } // .map does not work since it may create \"undefined\" holes in output array\n                // .filter does not work since condition sits on same level as data to save\n\n                // for charting\n                for (let orgId of this.state.affiliatedOrgIds) {\n\n                    let count = 0;\n                    for (let obj of projects.data) {\n                        if (orgId === obj.organization) {\n                            count++;\n                        }\n                    }\n                    affiliatedProjCounts.push(count);\n                }\n\n                console.log('counts array:', affiliatedProjCounts);\n\n                objects.includes(undefined) ? // no longer need to check undefineds due to change above, but will leave for now\n                    this.setState({\n                        ...this.state,\n                        projectList: [],\n                        projectNames: [],\n                        projectDesc: [],\n                        affiliatedProjIds: [],\n                        affiliatedProjNames: [],\n\n                        affiliatedProjCounts: [],\n                        // disableProjSelect: true // prevent proj pick due to lack of valid choice\n                    },\n                        console.log('No relevant project. ', objects, names, descriptions)\n                        // console.log('No relevant project. ', o2, n2)\n                    ) :\n                    // If relevant projects are found, add list to state and enable project selection\n                    // objects.length > 0 && names.length > 0 ?\n                    this.setState({\n                        ...this.state,\n                        projectList: objects,\n                        projectNames: names,\n                        projectDesc: descriptions,\n\n                        affiliatedProjIds: affiliatedProjIds.reverse(),\n                        affiliatedProjNames: affiliatedProjNames.reverse(),\n\n                        affiliatedProjCounts: affiliatedProjCounts, // for charting\n\n                        // disableProjSelect: false // enables project select\n                    }\n                        // , console.log('Relevant projects found. Adding to state:', objects, names, descriptions)\n                        // , console.log('Relevant projects found. Adding to state:', o2, n2)\n                        , () => this.getAllIssues()\n                    )\n\n            })\n            .catch(err => console.log(err));\n    }\n\n    //-----------------//\n    // Issue functions //\n    //-----------------//\n    getAllIssues = () => {\n        API.getIssues({\n            // project: this.state.projId // may work but below logic is for unfiltered data\n        })\n            .then(issues => {\n                // console.log('get all issues:', issues)\n\n                let objects = []; // ObjId-Subject pair?\n\n                let relatedIssueIds = [], relatedIssueNames = [];\n                for (let obj of issues.data) { // iterable array, so for-in does not work\n                    if (this.state.affiliatedOrgIds.includes(obj.organization)) {\n                        relatedIssueIds.push(obj._id);\n                        relatedIssueNames.push(obj.subject);\n                    }\n\n                } // .map does not work since it may create \"undefined\" holes in output array\n                // .filter does not work since condition sits on same level as data to save\n\n                // If blanks exist, this is remnant from relevant query\n                objects.includes(undefined) ?\n                    this.setState({\n                    },\n                        console.log('No relevant issues.'\n                        )\n                    ) :\n                    this.setState({\n                        ...this.state,\n                        relatedIssueIds: relatedIssueIds.reverse(),\n                        relatedIssueNames: relatedIssueNames.reverse()\n\n                    },\n                        () => {\n                            console.log('Relevant issues found. Adding to state.');\n                            this.getAllComments();\n                        }\n                    )\n            })\n    }\n\n    //--------------------//\n    // Comments functions //\n    //--------------------//\n    getAllComments = async () => {\n        await API.getComments({\n            // project: this.state.projId // may work but below logic is for unfiltered data\n        })\n            // .sort({ _id: -1 }) // descending order.\n            .then(comments => {\n                console.log('get all comments:', comments);\n                let commentObjects = []\n                for (let comment of comments.data) {\n                    if (this.state.affiliatedOrgIds.includes(comment.organization)) {\n                        commentObjects.push(comment)\n                    }\n                }\n\n                // commentObjects.reverse();\n                // commentObjects.length <= 10 ? \n                this.setState({\n                    ...this.state,\n                    relatedCommentObjects: commentObjects.reverse()\n                })\n            })\n    }  // End of getAllComments function\n\n    //-------------------//\n    // Lifecycle methods //\n    //-------------------//\n\n    componentDidMount(props) {\n        // check auth\n        this.authenticate();\n        console.log('Did Mount. State =', this.state)\n\n        /*\n          let arr = new Array(10).fill(undefined).map((val, idx) => {\n            let user = {\n              firstName: Faker.name.firstName(),\n              lastName: Faker.name.lastName(),\n              profilePicture: Faker.image.avatar(),\n              lastSignedIn: moment(Faker.date.recent(45)).fromNow(),\n              latestPost: Faker.lorem.paragraphs(2, \" \")\n            };\n            return user;\n          });\n          this.setState({ users: arr });\n        */\n\n        // QUERY DB FOR USER'S RECORDS //\n\n        // FUNC SIFTS FOR ISSUES SUMMARY STATS //\n        //   {this.state.users.map(user => {\n        //     return <Card key={user.profilePicture} user={user} />;\n        //   })}\n    }\n\n    componentDidUpdate() {\n        // Keep using\n        console.log('Did Update. State has :', this.state);\n\n        // console.log('Router passed these props :', this.props.location.state)\n        // this.state.isSignedIn\n        // ? () => { // If signed in, show state and proceed\n        //     console.log('checking router state', this.props.location.state)\n        //     console.log('main view ran auth. State:', this.state)\n        //     // this.checkNewUser(user.email) // Process new user\n        // }\n        // : () => {\n        //     console.log('You are NOT signed in.')\n        //     this.props.history.push({\n        //         pathname: '/',\n        //         state: { isSignedIn: false }\n        //     }); // redirect to LandingPage\n        // }\n    }\n\n    render() {\n        // const { classes } = this.props;\n        const newView = this.state.activeView;\n        let view;\n\n        if (newView === 'Dashboard') {\n            view = <Dashboard\n                orgCount={this.state.affiliatedOrgIds.length}\n                projCount={this.state.affiliatedProjIds.length}\n                issueCount={this.state.relatedIssueIds.length}\n                commentObjects={this.state.relatedCommentObjects}\n\n                orgNames={this.state.affiliatedOrgNames}\n                projNames={this.state.affiliatedProjNames}\n                issueSubjects={this.state.relatedIssueNames}\n\n                projCountByOrg={this.state.affiliatedProjCounts}\n\n            />\n        } else if (newView === 'Submit Issue') {\n            view = <SubmitIssue\n                style={[styles.content]}\n\n                name={this.state.name}\n                email={this.state.email}\n                type={this.state.type}\n                userId={this.state.id} // ObjectId of user\n                photoURL={this.state.photoURL}\n                isSignedIn={this.state.isSignedIn}\n                handleSubmitIssue={this.handleSubmitIssue}\n                showDashboard={this.showDashboard}\n            />\n        }\n        else if (newView === 'User Profile') {\n            view = <UserProfile\n                id={this.state.id}\n                name={this.state.name}\n                email={this.state.email}\n                userType={this.state.userType}\n                photoURL={this.state.photoURL}\n                isSignedIn={this.state.isSignedIn}\n                showDashboard={this.showDashboard}\n            />\n        }\n        else if (newView === 'Organization Profile') {\n            view = <OrganizationProfile\n                id={this.state.id}\n                name={this.state.name}\n                email={this.state.email}\n                userType={this.state.userType}\n                isSignedIn={this.state.isSignedIn}\n                showDashboard={this.showDashboard}\n            />\n        }\n        else if (newView === 'Project Profile') {\n            view = <ProjectProfile\n                id={this.state.id}\n                isSignedIn={this.state.isSignedIn}\n                showDashboard={this.showDashboard}\n            />\n        }\n        else if (newView === 'Manage Issue') {\n            view = <ManageIssue\n                userId={this.state.id}\n                userName={this.state.name}\n                photoURL={this.state.photoURL}\n                isSignedIn={this.state.isSignedIn}\n                showDashboard={this.showDashboard}\n            />\n        }\n\n        return (\n            <div>\n                {}\n                <React.Fragment>\n                    {/* {console.log('state in render', this.state)} */}\n                    {/* {this.seed()}  // this works but wont use now */}\n                    {/* <BottomAppBar> */}\n                    <Sidebar\n                        activeView={this.state.activeView}\n                        name={this.state.name}\n                        userType={this.state.userType}\n                        changeName={this.changeName}\n                        determineView={this.determineView}\n                        showDashboard={this.showDashboard}\n                        showSubmitIssue={this.showSubmitIssue}\n                        showUserProfile={this.showUserProfile}\n                        showOrganizationProfile={this.showOrganizationProfile}\n                        showProjectProfile={this.showProjectProfile}\n                        showManageIssue={this.showManageIssue}\n                    >\n                        {/* {this.props.children} // this works somewhat */}\n                        {view}\n                    </Sidebar>\n                    {/* </BottomAppBar> */}\n                </React.Fragment>\n            </div>\n        );\n    }\n}\n\n// Stateful Components (Class) cannot use Hooks such as useStyle.\nexport default withStyles(styles)(DeveloperView);\n","import React, { Component, useEffect } from \"react\";\nimport {\n  BrowserRouter as Router, Switch, Route,\n  // Link, \n  // Redirect, \n  useHistory\n  // useLocation, withRouter \n} from \"react-router-dom\";\n// import PropTypes from 'prop-types';\n// import { Helmet } from 'react-helmet' // manages document head\n\n// Pages\n// import LandingPage from \"./pages/LandingPage\"; // absorbed it here\nimport SubmitIssue from \"./pages/SubmitIssue\";\nimport Dashboard from \"./pages/Dashboard\";\n// import NoMatch from \"./pages/NoMatch\";\n\n// Material-UI\nimport AppBar from '@material-ui/core/AppBar'\nimport Button from '@material-ui/core/Button'\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport IconButton from '@material-ui/core/IconButton'\nimport LockIcon from '@material-ui/icons/Lock'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles } from '@material-ui/core/styles'\nimport BugReportTwoToneIcon from '@material-ui/icons/BugReportTwoTone';\n\n// Styling\nimport \"./App.css\";\nimport bgvideo from './utils/bgvideo.mp4';\n// import bgvideo from 'https://www.dropbox.com/s/nih1jqgvw29bjh0/bgvideo.mp4'; // no good\n\n// // Hashing. Later when I have to register a new user.\n// import bcrypt from 'bcrypt';\n// const saltRounds =10;\n\nimport SigninPage from \"./pages/SigninPage\";\nimport DeveloperView from \"./pages/DeveloperView\";\n\n// Default style settings for Material UI\nconst useStyles = makeStyles(theme => ({\n  main: {\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100vh',\n  },\n  root: {\n    flexGrow: 1,\n    // flex: '1 0 100%',\n    // height: '100%',\n    overflow: 'cover', //'hidden',\n  },\n  hero: {\n    height: '100%',\n    // minHeight: '80vh',\n    flex: '0 0 auto',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: theme.palette.background.paper,\n    color: theme.palette.type === 'light' ? theme.palette.primary.dark : theme.palette.primary.main,\n\n    // addition for image\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)', // fallback\n    border: 0,\n    borderRadius: 3,\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    padding: '0 30px',\n  },\n\n  text: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    // letterSpacing: '.7rem',\n    textIndent: '.7rem',\n    fontWeight: theme.typography.fontWeightBold,\n    [theme.breakpoints.only('xs')]: {\n      fontSize: 24,\n      letterSpacing: '.1em',\n      textIndent: '.1rem'\n    },\n    whiteSpace: 'nowrap'\n  },\n  h5: {\n    paddingLeft: theme.spacing(1) * 4,\n    paddingRight: theme.spacing(1) * 4,\n    marginTop: theme.spacing(1),\n    maxWidth: 600,\n    textAlign: 'center',\n    [theme.breakpoints.only('xs')]: {\n      fontSize: 18\n    }\n  },\n  content: {\n    height: '100vh',\n\n    opacity: '0.99',\n    backgroundImage: 'linear-gradient(to right, rgba(255,255,255,0.01), rgba(240,255,255,0.9), rgba(240,255,255,0.9), rgba(240,255,255,0.9), rgba(255,255,255,0.01))',\n\n    // paddingTop: theme.spacing(1) * 8,\n    [theme.breakpoints.up('sm')]: {\n      paddingTop: theme.spacing(1)\n    }\n  },\n  button: {\n    marginTop: theme.spacing(1) * 3,\n    marginLeft: theme.spacing(1) * 3,\n    marginRight: theme.spacing(1) * 3,\n  },\n\n  buttonGroup: {\n    [theme.breakpoints.only('xs')]: {\n      textAlign: 'center',\n    }\n  },\n\n  logo: {\n    color: 'secondary',\n    margin: `${theme.spacing(1) * 3}px 0 ${theme.spacing(1) * 4}px`,\n    width: '100%',\n    height: '40vw',\n    maxHeight: 250\n  },\n  steps: {\n    maxWidth: theme.spacing(1) * 130,\n    margin: 'auto'\n  },\n  step: {\n    padding: `${theme.spacing(1) * 3}px ${theme.spacing(1) * 2}px`\n  },\n  stepIcon: {\n    marginBottom: theme.spacing(1)\n  },\n  markdownElement: {},\n  cardsContent: {\n    padding: 15,\n    display: 'flex',\n    justifyContent: 'space-around',\n    flexWrap: 'wrap',\n    [theme.breakpoints.only('xs')]: {\n      width: '100%',\n      padding: 0,\n      paddingTop: 15\n    }\n  },\n  card: {\n    minWidth: 275,\n    // maxWidth: 350,\n    maxWidth: \"50%\",\n    margin: 15,\n\n    flexGrow: 1,\n    width: 400,\n\n    [theme.breakpoints.only('xs')]: {\n      width: '100%',\n      margin: 0,\n      marginTop: 7\n    }\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)'\n  },\n\n  pos: {\n    marginBottom: 12\n  },\n\n  ulist: {\n    color: 'rgba(0, 0, 0, 0.54)',\n  }\n}))\n\nclass App extends Component {\n  // constructor(props) {\n  //   super(props);\n  constructor() {\n    super();\n\n    // Bind the this context to the handler function\n    this.handler = this.handler.bind(this);\n    // this.handleSignIn = this.handleSignIn.bind(this);\n\n    // Set default auth state of false\n    this.state = {\n      isAuthenticated: false,\n    };\n  }\n\n  handler() {\n    this.setState({\n      ...this.state,\n      isAuthenticated: true\n    })\n    alert('Welcome, user!');\n  }\n\n\n  handleSignIn() {\n    this.setState({\n      ...this.state,\n      isAuthenticated: true\n    })\n    alert('Welcome, user!');\n  }\n\n  handleSignOut() {\n    this.setState({\n      isAuthenticated: false\n    })\n  }\n\n  ProtectedRoute = ({ children, ...rest }) => {\n    return (\n      <Route\n        {...rest}\n        render={children}\n      // ({ location }) => fakeAuth.isAuthenticated ? (\n      //   children\n      // ) : (\n      //   <Redirect\n      //     to={{\n      //       pathname: \"/login\",\n      //       state: { from: location }\n      //     }}\n      // />\n      // )\n      // }\n      />\n    );\n  }\n\n  AuthenticateButton = () => {\n    let history = useHistory();\n\n    return this.authentication.isAuthenticated ? (\n      <p>\n        Welcome!{\" \"}\n        <button\n          onClick={() => {\n            this.authentication.signout(() => history.push(\"/\"));\n          }}\n        >\n          Sign out\n        </button>\n      </p>\n    ) : (\n        <p>You are not logged in.</p>\n      );\n  }\n\n  LandingPage = ({\n    // classes, \n    history, theme }) => {\n    const classes = useStyles();\n    const isAuthorised = () => {\n      try {\n        const key = Object.keys(localStorage).find(e => e.match(/persist:root/))\n        const data = JSON.parse(localStorage.getItem(key))\n        const auth = JSON.parse(data.auth)\n\n        return auth && auth.isAuthorised\n      } catch (ex) {\n        return false\n      }\n    }\n\n    useEffect(() => {\n      if (isAuthorised()) {\n        history.push('/signin')\n      }\n    })\n\n    return (\n      <div className={classes.main}>\n        {/* <Helmet>\n        <meta name=\"theme-color\" content={theme.palette.primary.main} />\n        <meta name=\"apple-mobile-web-app-status-bar-style\" content={theme.palette.primary.main} />\n        <meta name=\"msapplication-navbutton-color\" content={theme.palette.primary.main} />\n        <title>Bug Tracker</title>\n      </Helmet> */}\n\n        <AppBar position=\"sticky\"// position=\"static\"\n        >\n          <Toolbar disableGutters>\n            {/* Appbar text */}\n            <Typography variant=\"h6\" className={classes.title}>\n              Issue-O-Matic\n          </Typography>\n            <div style={{ flex: 1 }} />\n            <Tooltip id=\"tooltip-icon1\" title=\"Sign in\">\n              <IconButton\n                name=\"signin\"\n                aria-label=\"Sign In\"\n                color=\"inherit\"\n                onClick={() => {\n                  history.push('/signinpage')\n                }}\n                rel=\"noopener\"\n              >\n                <LockIcon />\n              </IconButton>\n            </Tooltip>\n            <Tooltip id=\"tooltip-icon2\" title=\"GitHub repository\">\n              <IconButton\n                name=\"github\"\n                aria-label=\"Open Github\"\n                color=\"inherit\"\n                href=\"https://github.com/danninemx/project-issue-manager\"\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                <GitHubIcon />\n              </IconButton>\n            </Tooltip>\n          </Toolbar>\n        </AppBar>\n        {/* End of Navbar */}\n\n        <div className={classes.root}>\n          <div className={classes.hero}>\n\n            <div className=\"videoContainer\"\n              style={{\n                background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)', // fallback\n\n                position: 'fixed',\n                top: '-50%',\n                left: '-50%',\n                width: '200%',\n                height: '200%',\n              }}\n            >\n\n              <video id=\"background-video\" loop autoPlay muted playsInline\n                style={{\n                  position: 'absolute',\n                  top: '0',\n                  bottom: '0',\n                  right: '0',\n                  left: '0',\n                  margin: 'auto',\n                  minHeight: '50%',\n                  minWidth: '50%',\n                }}\n              // style={{ // works in standalone\n              //   position: 'fixed',\n              //   right: '0',\n              //   bottom: '0',\n              //   minWidth: '100%',\n              //   minHeight: '100%',\n              //   zIndex: '-99'\n              // }}\n              >\n                <source src={bgvideo} type=\"video/mp4\" />\n                Your browser does not support the video tag.\n              </video>\n\n              {/* End of videoContainer */}\n            </div>\n\n            <div className={classes.content}>\n\n              <BugReportTwoToneIcon alt=\"Material-UI Logo\" className={classes.logo} />\n              <div className={classes.text}>\n                <Typography\n                  variant=\"h2\"\n                  align=\"center\"\n                  component=\"h1\"\n                  color=\"inherit\"\n                  gutterBottom\n                  className={classes.title}\n                >\n                  {\"Issue-O-Matic\"}\n                </Typography>\n                <Typography variant=\"h5\" component=\"h2\" color=\"inherit\" gutterBottom className={classes.h5}>\n                  {'Your project issues, from submission to resolution.'}\n                </Typography>\n\n                <div className={classes.buttonGroup}>\n                  <Button\n                    onClick={() => {\n                      // Direct user to issue submission page through Router's history object\n                      history.push('/submitissue')\n                    }}\n                    className={classes.button}\n                    variant=\"outlined\"\n                    color=\"primary\"\n                  >\n                    {'Report an Issue'}\n                  </Button>\n                  <Button\n                    onClick={() => {\n                      // Direct user to signin page through Router's history object\n                      history.push('/signinpage')\n                    }}\n                    className={classes.button}\n                    variant=\"outlined\"\n                    color=\"primary\"\n                  >\n                    {'Log into Account'}\n                  </Button>\n                </div>\n              </div>\n              {/* End of text */}\n\n              <div className={classes.cardsContent}>\n                <Card className={classes.card}>\n                  <CardContent>\n                    <Typography variant=\"h5\" component=\"h2\">\n                      What is this?\n                  </Typography>\n                    <br></br>\n                    <Typography color='textSecondary'>{`Open source issue tracking tool ideal for:`}</Typography>\n                    <br />\n                    <Typography color='textSecondary' component=\"li\">SMB Incident Recorder</Typography>\n                    <Typography color='textSecondary' component=\"li\">Bug Tracker</Typography>\n                    <Typography color='textSecondary' component=\"li\">Customer Feedback Platform</Typography>\n                    <br />\n                    <Typography color=\"textSecondary\">\n                      {`Simple, fast -- and completely free.`}\n                    </Typography>\n                  </CardContent>\n                  {/* <CardActions>\n                    <Button\n                      size=\"small\"\n                      onClick={() => {\n                        history.push('/signinpage')\n                      }}\n                    >\n                      Get started\n                  </Button>\n                  </CardActions> */}\n                </Card>\n                {/* End of  */}\n\n                <Card className={classes.card}>\n                  <CardContent>\n                    <Typography variant=\"h5\" component=\"h2\">\n                      How do I start?\n                  </Typography>\n                    <br />\n                    <Typography color='textSecondary'>{'Simply sign in with your SNS or email.'}</Typography>\n                    <br />\n                    <Typography color=\"textSecondary\">\n                      {/* className={classes.pos}  */}\n                      {'Setup takes < 5 minutes.'}\n                      <br />\n                      {' '}\n                      <br />\n                      Customers may report an issue to begin.\n                      <br />\n                    </Typography>\n                  </CardContent>\n                  <CardActions>\n                    <Button\n                      size=\"small\"\n                      onClick={() => {\n                        let win = window.open('https://github.com/danninemx/project-issue-manager', '_blank')\n                        win.focus()\n                      }}\n                    >\n                      Learn More\n                  </Button>\n                  </CardActions>\n                </Card>\n              </div>\n\n              {/* End of cardsContent */}\n            </div>\n\n            {/* End of hero */}\n          </div>\n\n          {/* End of root */}\n        </div>\n\n        {/* End of main */}\n      </div >\n    )\n  }\n\n  componentDidMount = () => {\n    console.log('did mount. State: ', this.state);\n  }\n\n  componentDidUpdate = () => {\n    console.log('did update. State: ', this.state);\n  }\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <Switch>\n            <Route exact path=\"/\" component={this.LandingPage} />\n            <Route exact path=\"/signinpage\" handler={this.handler} component={SigninPage} />\n            <Route exact path=\"/submitissue\" component={SubmitIssue} />\n            <Route exact path=\"/dashboard\" component={Dashboard} />\n            <Route exact path=\"/developerview\">\n              <DeveloperView />\n            </Route>\n            {/* <Route path=\"*\" component={NoMatch} /> */}\n\n          </Switch>\n        </div>\n      </Router >\n    )\n  }\n}\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}